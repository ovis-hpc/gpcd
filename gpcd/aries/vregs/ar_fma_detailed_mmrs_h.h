/******************************************************************************
 * COPYRIGHT CRAY INC. ar_fma_detailed_mmrs_h.h
 * FILE: ar_fma_detailed_mmrs_h.h
 * Created by v2h.c on Wed Oct  8 14:38:59 2014
 ******************************************************************************/
/**
 * @file ar_fma_detailed_mmrs_h.h
 * @author v2h.c on Wed Oct  8 14:38:59 2014
 * @section overview Overview:
 *	    Sets up ar_detailed_mmr_t and ar_detailed_mmrd_t structs for each MMR/MMR subfield with constants
 *	    found in ar_fma_mmr_values.h and ar_fma_defs.h. Then puts each ar_detailed_mmr_t set up
 *	    into an array. Used by the Cray MMR Access Library.
 */

#include "ar_fma_mmr_values.h"

#ifndef _AR_FMA_DETAILED_MMRS_H_H_
#define _AR_FMA_DETAILED_MMRS_H_H_

#ifndef _CMMR_FR_T_
#define _CMMR_FR_T_
/**
 * @struct cmmr_fr_s
 * Gemini Detailed MMR Field Descriptor
 * @see cmmr_br_s
 *
 * The Detailed MMR Field Descriptor contains information about individual
 * fields of a MMR in an ASIC. Used by the Cray MMR Access Library.
 *
 */
typedef struct cmmr_fr_s{
	char* _name;		/**< Field name */
	uint32_t _bpos;		/**< Field bit postion relative to QW */
	uint64_t _mask;		/**< Field bit mask relative to QW */
	uint64_t _rval;		/**< Reset data relative to QW */
	uint64_t _type_bitmsk;	/**< Field Type Bit Mask */
	int _index;		/**< QW Index */
	char* _desc;		/**< Field Description */
	char* _access;		/**< Field Access */
} cmmr_fr_t; /**< cmmr_fr_s */
#endif

#ifndef _CMMR_BR_T_
#define _CMMR_BR_T_
/**
 * @struct cmmr_br_s
 * Gemini Detailed MMR Descriptor
 * @see cmmr_fr_s
 *
 * The Detailed MMR contains information about a individual MMR in an ASIC.
 * Used by the Cray MMR Access Library.
 *
 */
typedef struct cmmr_br_s{
	char* _name;			/**< MMR name */
	uint64_t _addr;			/**< MMR address */
	uint64_t _type_bitmsk;		/**< MMR Type Bit Mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rval;	/**< Reset data */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rmsk;	/**< Reset mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _wrmsk;	/**< Write mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rdmsk;	/**< Read mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _xsmsk;	/**< XState mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _wsemsk;	/**< Write only with side effects */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rsemsk;	/**< Read only with side effects */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _w1smsk;	/**< Write okay but only 1's stick */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _w1cmsk;	/**< Write of 1 clears bit */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _wrstmsk;	/**< Warm Reset Mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _hwwmsk;	/**< Hardware Write Mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _hwrmsk;	/**< Hardware Read Mask */
	int _nqw;			/**< Number of QW */
	int _size;			/**< Size in bytes of MMR */
	int _incr;			/**< Increment between table entries */
	int _depth;			/**< Number of MMR instances */
	const cmmr_fr_t *_info;	/**< MMR detail */
} cmmr_br_t; /**< cmmr_br_s */
#endif

static const cmmr_br_t* __ar_fma_mmrs[];	/* FMA Array */

/*
 *  AR FMA MMR DETAIL DECLARATIONS
 */
static const cmmr_fr_t __ar_nic_fma_cfg_desc_sfma_detail[] = {
    { ._name = "RESERVED_1727_1713",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1727_1713_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1727_1713_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW26 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1727_1713_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1727_1713_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "DLA_MARKER_DEALLOC",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_MARKER_DEALLOC_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_MARKER_DEALLOC_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW26 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_MARKER_DEALLOC_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_MARKER_DEALLOC_QW,
      ._desc = "This field is part of the DLA_MARKER doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_1711_1696",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1711_1696_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1711_1696_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW26 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1711_1696_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1711_1696_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "MARKER_ID",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_MARKER_ID_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_MARKER_ID_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW26 & AR_NIC_FMA_CFG_DESC_SFMA_MARKER_ID_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_MARKER_ID_QW,
      ._desc = "This field is part of the DLA_MARKER doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "FMA_LAUNCH_OPERAND",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_OPERAND_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_OPERAND_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW25 & AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_OPERAND_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_OPERAND_QW,
      ._desc = "Part of the FMA_LAUNCH doorbell together with offset 0xC0",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_1599_1595",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1599_1595_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1599_1595_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW24 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1599_1595_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1599_1595_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "FMA_LAUNCH_GET",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_GET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_GET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW24 & AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_GET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_GET_QW,
      ._desc = "Part of the FMA_LAUNCH doorbell together with offset 0xC8",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "FMA_LAUNCH_GLOBAL_OFFSET",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_GLOBAL_OFFSET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_GLOBAL_OFFSET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW24 & AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_GLOBAL_OFFSET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_GLOBAL_OFFSET_QW,
      ._desc = "Part of the FMA_LAUNCH doorbell together with offset 0xC8",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_1103",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1103_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1103_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW17 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1103_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1103_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DLA_ALLOC_CD",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_CD_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_CD_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW17 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_CD_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_CD_QW,
      ._desc = "Sets a DLA allocation request to controlled discard",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DLA_ALLOC_PR",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_PR_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_PR_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW17 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_PR_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_PR_QW,
      ._desc = "Sets a DLA allocation request to persistent reservation",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DLA_HIGH_PRIORITY",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_HIGH_PRIORITY_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_HIGH_PRIORITY_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW17 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_HIGH_PRIORITY_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_HIGH_PRIORITY_QW,
      ._desc = "Sets controlled discard DLA allocation requests to high priority",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_1099",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1099_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1099_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW17 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1099_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1099_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DLA_CQH",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_CQH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_CQH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW17 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_CQH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_CQH_QW,
      ._desc = "DLA completion queue handle, used as part of the ALLOC_SEQID and DLA_MARKER doorbells",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_DONE",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_DONE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_DONE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_DONE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_DONE_QW,
      ._desc = "The fields in this register (STATUS) can be written to memory using the WR_STATUS doorbell register",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RO"
    },
    { ._name = "STATUS_TRANS_ACTIVE",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_TRANS_ACTIVE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_TRANS_ACTIVE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_TRANS_ACTIVE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_TRANS_ACTIVE_QW,
      ._desc = "Indicates that the descriptor is in use for a transaction",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_LAUNCH1",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_LAUNCH1_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_LAUNCH1_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_LAUNCH1_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_LAUNCH1_QW,
      ._desc = "Indicates that the upper FMA launch doorbell has been written",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_LAUNCH0",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_LAUNCH0_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_LAUNCH0_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_LAUNCH0_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_LAUNCH0_QW,
      ._desc = "Indicates that the lower FMA launch doorbell has been written",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_PRIV_ERR",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_PRIV_ERR_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_PRIV_ERR_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_PRIV_ERR_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_PRIV_ERR_QW,
      ._desc = "This field is set to 1 by hardware if a request cannot be performed due to a lack of privilege",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_HW_ERR",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_HW_ERR_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_HW_ERR_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_HW_ERR_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_HW_ERR_QW,
      ._desc = "This field is set to 1 by hardware if a request targeting this descriptor or targeting the FMA GET window or FMA PUT window associated with this descriptor has a hardware error",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_SW_ERR",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_SW_ERR_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_SW_ERR_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_SW_ERR_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_SW_ERR_QW,
      ._desc = "This field is set to 1 by hardware if a request targeting this descriptor or targeting the FMA GET window or FMA PUT window associated with this descriptor is malformed",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_NPES_ERR",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_NPES_ERR_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_NPES_ERR_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_NPES_ERR_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_NPES_ERR_QW,
      ._desc = "This field is set to 1 by hardware if an NPES violation occurs (see Section 1",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_ALLOC_SEQID_ERR",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_ALLOC_SEQID_ERR_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_ALLOC_SEQID_ERR_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_ALLOC_SEQID_ERR_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_ALLOC_SEQID_ERR_QW,
      ._desc = "This field is set to 1 by hardware when an action that normally results in a network request (request packet to TARB) is performed and a Synchronization Sequence ID is not allocated (See the ALLOC_SEQID doorbell)",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_SSIDS_IN_USE",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_SSIDS_IN_USE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_SSIDS_IN_USE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_SSIDS_IN_USE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_SSIDS_IN_USE_QW,
      ._desc = "This field is incremented by hardware each time a Synchronization Sequence ID is allocated through a store to the ALLOC_SEQID doorbell and is decremented each time a Synchronization Sequence ID is de-allocated",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_RC",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_RC_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_RC_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_RC_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_RC_QW,
      ._desc = "The status read count field is incremented by hardware each time a valid Get or fetching AMO type request packet is issued and is decremented when the corresponding response has returned",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_WC",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WC_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WC_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WC_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WC_QW,
      ._desc = "The status write count field is incremented by hardware each time a valid Put, non-fetching AMO, fetching AMO, CQWrite, MsgComplete, or CE leaf-join type request packet is issued and is decremented when the corresponding response has returned",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_1023_960",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1023_960_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1023_960_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW15 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1023_960_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_1023_960_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_959_896",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_959_896_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_959_896_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW14 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_959_896_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_959_896_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RO"
    },
    { ._name = "SEQCMP_TYPE",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_TYPE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_TYPE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW13 & AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_TYPE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_TYPE_QW,
      ._desc = "This field is part of the SEQCMP doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_887_882",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_887_882_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_887_882_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW13 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_887_882_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_887_882_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "TRANSACTION_END",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_TRANSACTION_END_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_TRANSACTION_END_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW13 & AR_NIC_FMA_CFG_DESC_SFMA_TRANSACTION_END_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_TRANSACTION_END_QW,
      ._desc = "This field is part of the SEQCMP doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "SEQCMP_DLA_DEALLOC",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_DLA_DEALLOC_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_DLA_DEALLOC_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW13 & AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_DLA_DEALLOC_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_DLA_DEALLOC_QW,
      ._desc = "This field is part of the SEQCMP doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "SEQCMP_SRC_CQ_DATA",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_SRC_CQ_DATA_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_SRC_CQ_DATA_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW13 & AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_SRC_CQ_DATA_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_SRC_CQ_DATA_QW,
      ._desc = "This field is part of the SEQCMP doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_831_771",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_831_771_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_831_771_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW12 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_831_771_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_831_771_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "WR_STATUS_WHEN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_WR_STATUS_WHEN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_WR_STATUS_WHEN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW12 & AR_NIC_FMA_CFG_DESC_SFMA_WR_STATUS_WHEN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_WR_STATUS_WHEN_QW,
      ._desc = "This field is part of the WR_STATUS doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_767_704",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_767_704_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_767_704_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW11 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_767_704_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_767_704_QW,
      ._desc = "This is the CE leaf-join doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_703_640",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_703_640_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_703_640_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW10 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_703_640_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_703_640_QW,
      ._desc = "The FLBTE doorbell register is not used with SFMA transactions",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_639_624",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_639_624_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_639_624_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW9 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_639_624_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_639_624_QW,
      ._desc = "This is the CQ_WRITE doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "CQ_WRITE",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_CQ_WRITE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_CQ_WRITE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW9 & AR_NIC_FMA_CFG_DESC_SFMA_CQ_WRITE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_CQ_WRITE_QW,
      ._desc = "This field is part of the CQ_WRITE doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "TRANSACTION_START",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_TRANSACTION_START_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_TRANSACTION_START_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_SFMA_TRANSACTION_START_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_TRANSACTION_START_QW,
      ._desc = "This is a the ALLOC_SEQID doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "DLA_REISSUE",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_REISSUE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_REISSUE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_REISSUE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_REISSUE_QW,
      ._desc = "This is part of the ALLOC_SEQID doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "DISCARD_RESET",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DISCARD_RESET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DISCARD_RESET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_SFMA_DISCARD_RESET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DISCARD_RESET_QW,
      ._desc = "This is part of the ALLOC_SEQID doorbell register",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "ALLOC_STATUS_RESET",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_ALLOC_STATUS_RESET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_ALLOC_STATUS_RESET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_SFMA_ALLOC_STATUS_RESET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_ALLOC_STATUS_RESET_QW,
      ._desc = "Clears pending DLA allocation status CQEs",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_571_558",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_571_558_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_571_558_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_571_558_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_571_558_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "CREDITS_REQUIRED",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_CREDITS_REQUIRED_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_CREDITS_REQUIRED_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_SFMA_CREDITS_REQUIRED_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_CREDITS_REQUIRED_QW,
      ._desc = "DLA credit allocation count",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "BLOCK_ID",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_BLOCK_ID_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_BLOCK_ID_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_SFMA_BLOCK_ID_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_BLOCK_ID_QW,
      ._desc = "Used as CQE data",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "RESERVED_523_522",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_523_522_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_523_522_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_523_522_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_523_522_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "STATUS_INTERVAL",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_INTERVAL_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_INTERVAL_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_INTERVAL_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_INTERVAL_QW,
      ._desc = "Sets DLA successful allocation CQE generation frequency",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "WO"
    },
    { ._name = "STATUS_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WREN_QW,
      ._desc = "This bit controls access to the defined fields in the STATUS word",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DLA_MARKER_DBELL_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_MARKER_DBELL_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_MARKER_DBELL_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_MARKER_DBELL_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_MARKER_DBELL_WREN_QW,
      ._desc = "This field allows use of the DLA_MARKER doorbell",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "FMA_LAUNCH_DBELL_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_DBELL_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_DBELL_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_DBELL_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FMA_LAUNCH_DBELL_WREN_QW,
      ._desc = "This field allows use of the FMA_LAUNCH doorbell",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "WR_STATUS_DBELL_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_WR_STATUS_DBELL_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_WR_STATUS_DBELL_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_WR_STATUS_DBELL_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_WR_STATUS_DBELL_WREN_QW,
      ._desc = "This field allows use of the WR_STATUS doorbell",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "CE_DBELL_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_CE_DBELL_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_CE_DBELL_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_CE_DBELL_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_CE_DBELL_WREN_QW,
      ._desc = "This field allows use of the CE doorbell",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "FLBTE_DBELL_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FLBTE_DBELL_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FLBTE_DBELL_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_FLBTE_DBELL_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FLBTE_DBELL_WREN_QW,
      ._desc = "This field allows use of the FLBTE doorbell",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "CQ_WRITE_DBELL_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_CQ_WRITE_DBELL_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_CQ_WRITE_DBELL_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_CQ_WRITE_DBELL_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_CQ_WRITE_DBELL_WREN_QW,
      ._desc = "This field allows use of the CQ_WRITE doorbell",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "SEQCMP_DBELL_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_DBELL_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_DBELL_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_DBELL_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_SEQCMP_DBELL_WREN_QW,
      ._desc = "This field allows use of the SEQCMP doorbell",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "ALLOC_SEQ_ID_DBELL_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_ALLOC_SEQ_ID_DBELL_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_ALLOC_SEQ_ID_DBELL_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_ALLOC_SEQ_ID_DBELL_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_ALLOC_SEQ_ID_DBELL_WREN_QW,
      ._desc = "This field allows use of the ALLOC_SEQ_ID doorbell",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "WC_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_WC_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_WC_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_WC_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_WC_WREN_QW,
      ._desc = "Controls access to WC",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DLA_ALLOC_CD_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_CD_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_CD_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_CD_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_CD_WREN_QW,
      ._desc = "Controls access to DLA_ALLOC_CD",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DLA_ALLOC_PR_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_PR_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_PR_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_PR_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_ALLOC_PR_WREN_QW,
      ._desc = "Controls access to DLA_ALLOC_PR",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DLA_HIGH_PRIORITY_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_HIGH_PRIORITY_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_HIGH_PRIORITY_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_HIGH_PRIORITY_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_HIGH_PRIORITY_WREN_QW,
      ._desc = "Controls access to DLA_HIGH_PRIORITY",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DLA_CQH_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DLA_CQH_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DLA_CQH_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_DLA_CQH_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DLA_CQH_WREN_QW,
      ._desc = "Controls access to DLA_CQH",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "SCRATCH_REG2_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG2_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG2_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG2_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG2_WREN_QW,
      ._desc = "For SFMA, this bit controls access to DEST_CQ_DATA",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "SCRATCH_REG1_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG1_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG1_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG1_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG1_WREN_QW,
      ._desc = "For SFMA, this bit controls access to AMO_OPRND2 and FLAG_DATA_OFFSET",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "SCRATCH_REG0_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG0_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG0_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG0_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_SCRATCH_REG0_WREN_QW,
      ._desc = "For SFMA, this bit controls access to AMO_OPRND1 and FLAG_DATA",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "NTT_EN_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_NTT_EN_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_NTT_EN_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_NTT_EN_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_NTT_EN_WREN_QW,
      ._desc = "This bit controls access to NTT_EN",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "PTAG_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_PTAG_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_PTAG_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_PTAG_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_PTAG_WREN_QW,
      ._desc = "This bit controls access to LOC_PTAG and REM_PTAG",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "SRC_CQH_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_SRC_CQH_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_SRC_CQH_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_SRC_CQH_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_SRC_CQH_WREN_QW,
      ._desc = "For SFMA and FLBTE, this bit controls access to SRC_CQH",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "PE_BASE_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_PE_BASE_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_PE_BASE_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_PE_BASE_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_PE_BASE_WREN_QW,
      ._desc = "This bit controls access to PE_BASE",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "NPES_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_NPES_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_NPES_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_NPES_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_NPES_WREN_QW,
      ._desc = "This bit controls access to NPES",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "REM_MDH_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_REM_MDH_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_REM_MDH_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_REM_MDH_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_REM_MDH_WREN_QW,
      ._desc = "This bit controls access to REM_MDH",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "LOC_MDH_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_LOC_MDH_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_LOC_MDH_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_LOC_MDH_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_LOC_MDH_WREN_QW,
      ._desc = "For SFMA and FLBTE, this bit controls access to LOC_MDH",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "BTE_FENCE_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_BTE_FENCE_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_BTE_FENCE_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_BTE_FENCE_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_BTE_FENCE_WREN_QW,
      ._desc = "For FLBTE, this bit controls access to BTE_FENCE",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "PRIVILEGED_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_PRIVILEGED_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_PRIVILEGED_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_PRIVILEGED_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_PRIVILEGED_WREN_QW,
      ._desc = "For FLBTE, this bit controls access to PRIVILEGED",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "BTE_CHAN_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_BTE_CHAN_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_BTE_CHAN_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_BTE_CHAN_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_BTE_CHAN_WREN_QW,
      ._desc = "For FLBTE, this bit controls access to BTE_CHAN",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "NAT_RDCTRL_LONG_PKT_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_NAT_RDCTRL_LONG_PKT_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_NAT_RDCTRL_LONG_PKT_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_NAT_RDCTRL_LONG_PKT_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_NAT_RDCTRL_LONG_PKT_WREN_QW,
      ._desc = "For FLBTE, this bit controls access to the fields:NAT_EN, RD_RO, and RD_NO_SNOOP",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "ENQ_STATUS_CQH_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_ENQ_STATUS_CQH_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_ENQ_STATUS_CQH_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_ENQ_STATUS_CQH_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_ENQ_STATUS_CQH_WREN_QW,
      ._desc = "For FLBTE, this bit controls access to ENQ_STATUS_CQH_WREN",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "PE_MASK_FPE_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_PE_MASK_FPE_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_PE_MASK_FPE_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_PE_MASK_FPE_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_PE_MASK_FPE_WREN_QW,
      ._desc = "For SFMA, this bit controls access to PE_MASK_MODE",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "OP_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_OP_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_OP_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_OP_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_OP_WREN_QW,
      ._desc = "This bit controls access to FMA_OP, BTE_OP, and CE_OP",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "FMA_EN_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FMA_EN_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FMA_EN_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_FMA_EN_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FMA_EN_WREN_QW,
      ._desc = "This bit controls access to FMA_EN",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RC_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RC_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RC_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_RC_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RC_WREN_QW,
      ._desc = "This bit controls access to RC",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "BASE_OFFSET_HIGH_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_HIGH_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_HIGH_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_HIGH_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_HIGH_WREN_QW,
      ._desc = "For SFMA, this bit controls access to bits [57:40] of BASE_OFFSET and of STATUS_WD_OFFSET",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "BASE_OFFSET_LOW_WREN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_LOW_WREN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_LOW_WREN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_LOW_WREN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_LOW_WREN_QW,
      ._desc = "For SFMA, this bit controls access to bits [39:0] of BASE_OFFSET and of STATUS_WD_OFFSET",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_383_368",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_383_368_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_383_368_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW5 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_383_368_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_383_368_QW,
      ._desc = "Register bits exist, but not used for SFMA",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "DEST_CQ_DATA",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_DEST_CQ_DATA_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_DEST_CQ_DATA_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW5 & AR_NIC_FMA_CFG_DESC_SFMA_DEST_CQ_DATA_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_DEST_CQ_DATA_QW,
      ._desc = "Destination side CQ dataThis field is used to indicate the SW_DATA value to be included in the optional sequence completion notification delivered at the destination endpoint",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "FLAG_DATA_OFFSET",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FLAG_DATA_OFFSET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FLAG_DATA_OFFSET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW4 & AR_NIC_FMA_CFG_DESC_SFMA_FLAG_DATA_OFFSET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FLAG_DATA_OFFSET_QW,
      ._desc = "Offset within the remote memory domain specified by REM_MDH at which FLAG_DATA will be written for message complete requests generated by writing the SEQCMP doorbell",
      ._type_bitmsk = 0x000000000000000bull,
      ._access = "RW"
    },
    { ._name = "AMO_OPRND2",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_AMO_OPRND2_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_AMO_OPRND2_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW4 & AR_NIC_FMA_CFG_DESC_SFMA_AMO_OPRND2_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_AMO_OPRND2_QW,
      ._desc = "For SFMA this register is used for Fetching AMOs",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "FLAG_DATA",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FLAG_DATA_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FLAG_DATA_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW3 & AR_NIC_FMA_CFG_DESC_SFMA_FLAG_DATA_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FLAG_DATA_QW,
      ._desc = "Optional flag data for message complete packets generated by writing the SEQCMP doorbell register",
      ._type_bitmsk = 0x000000000000000bull,
      ._access = "RW"
    },
    { ._name = "AMO_OPRND1",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_AMO_OPRND1_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_AMO_OPRND1_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW3 & AR_NIC_FMA_CFG_DESC_SFMA_AMO_OPRND1_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_AMO_OPRND1_QW,
      ._desc = "For SFMA this register is used for Fetching AMOs",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "NTT_EN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_NTT_EN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_NTT_EN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_SFMA_NTT_EN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_NTT_EN_QW,
      ._desc = "Determines whether the Node Translation Table (NTT) (Section 1",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "REM_PTAG",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_REM_PTAG_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_REM_PTAG_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_SFMA_REM_PTAG_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_REM_PTAG_QW,
      ._desc = "Destination Memory protection tag(Translated by the PTAG Translation Table (PTT) to a PKEY which is used in remote address translation at the destination endpoint",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "LOC_PTAG",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_LOC_PTAG_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_LOC_PTAG_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_SFMA_LOC_PTAG_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_LOC_PTAG_QW,
      ._desc = "Local memory protection tag used with FMA GET and fetching AMO operations",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "SRC_CQH",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_SRC_CQH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_SRC_CQH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_SFMA_SRC_CQH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_SRC_CQH_QW,
      ._desc = "Completion queue handle, used when a source side completion event is requested with the SEQCMP doorbell operation",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "PE_BASE",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_PE_BASE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_PE_BASE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_SFMA_PE_BASE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_PE_BASE_QW,
      ._desc = "This field is used when NTT_EN = 1 to indicate the base PE",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "NPES",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_NPES_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_NPES_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_SFMA_NPES_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_NPES_QW,
      ._desc = "This field is used when NTT_EN = 1 to indicate the number of PEs (destination endpoints) accessible through this descriptor",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_127",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_127_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_127_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_127_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_127_QW,
      ._desc = "Reserved for future increase in MDH size",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "REM_MDH",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_REM_MDH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_REM_MDH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_REM_MDH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_REM_MDH_QW,
      ._desc = "Remote Memory Domain Handle",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_114",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_114_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_114_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_114_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_114_QW,
      ._desc = "Reserved for future increase in MDH size",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "LOC_MDH",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_LOC_MDH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_LOC_MDH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_LOC_MDH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_LOC_MDH_QW,
      ._desc = "Local Memory Domain HandleFor SFMA this is only used for Get and Fetching AMO requests",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_101_100",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_101_100_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_101_100_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_101_100_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_101_100_QW,
      ._desc = "Register bits exist, but not used for SFMA",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_99_98",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_99_98_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_99_98_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_99_98_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_99_98_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_97_92",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_97_92_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_97_92_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_97_92_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_97_92_QW,
      ._desc = "Register bits exist, but not used for SFMA",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_91",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_91_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_91_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_91_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_91_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_90_80",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_90_80_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_90_80_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_90_80_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_90_80_QW,
      ._desc = "Register bits exist, but not used for SFMA",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_79_76",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_79_76_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_79_76_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_79_76_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_79_76_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_75",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_75_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_75_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_75_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_75_QW,
      ._desc = "Register bits exist, but not used for SFMA",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "PE_MASK_MODE",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_PE_MASK_MODE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_PE_MASK_MODE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_PE_MASK_MODE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_PE_MASK_MODE_QW,
      ._desc = "Specifies location of the 18 bit PE field in the sum of the Base Offset and window offset",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_71",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_71_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_71_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_71_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RESERVED_71_QW,
      ._desc = "Reserved for potential future expansion of the FMA_OP field",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "FMA_OP",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FMA_OP_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FMA_OP_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_SFMA_FMA_OP_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FMA_OP_QW,
      ._desc = "Operation to perform (e",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "FMA_EN",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_FMA_EN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_FMA_EN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_SFMA_FMA_EN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_FMA_EN_QW,
      ._desc = "Enable descriptorOperations dependent on values configured in this descriptor will not be performed unless this field is set to 1",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "RC",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_RC_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_RC_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_SFMA_RC_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_RC_QW,
      ._desc = "Routing ControlSpecifies constraints on how the packets of the transaction are routed through the network",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "WC",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_WC_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_WC_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_SFMA_WC_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_WC_QW,
      ._desc = "Write combining enable",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "GET_LAUNCH",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_GET_LAUNCH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_GET_LAUNCH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_SFMA_GET_LAUNCH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_GET_LAUNCH_QW,
      ._desc = "This descriptor field is used to store the FMA_LAUNCH_GET field written to the FMA_LAUNCH doorbell",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "STATUS_WD_OFFSET",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WD_OFFSET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WD_OFFSET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WD_OFFSET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_STATUS_WD_OFFSET_QW,
      ._desc = "This field is used in determining the offset in the target memory domain at which the status word will be written and in determining the target PE to which the status word will be written",
      ._type_bitmsk = 0x000000000000000bull,
      ._access = "RW"
    },
    { ._name = "BASE_OFFSET",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_BASE_OFFSET_QW,
      ._desc = "This field is used in computing the target Network Logical Address",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = "GLOBAL_OFFSET",
      ._bpos = AR_NIC_FMA_CFG_DESC_SFMA_GLOBAL_OFFSET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_SFMA_GLOBAL_OFFSET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_SFMA_GLOBAL_OFFSET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_SFMA_GLOBAL_OFFSET_QW,
      ._desc = "This descriptor field is also used to store the FMA_LAUNCH_GLOBAL_OFFSET field written to the FMA_LAUNCH doorbell",
      ._type_bitmsk = 0x000000000000000bull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_mmr_ring_0_hi_fma_detail[] = {
    { ._name = "UNUSED_145_35",
      ._bpos = AR_NIC_FMA_MMR_RING_0_HI_FMA_UNUSED_145_35_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_HI_FMA_UNUSED_145_35_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_MMR_RING_0_HI_FMA_UNUSED_145_35_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_HI_FMA_UNUSED_145_35_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_mmr_ring_0_mid_fma_detail[] = {
    { ._name = "UNUSED_127_98",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_UNUSED_127_98_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_UNUSED_127_98_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_UNUSED_127_98_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_UNUSED_127_98_QW,
      ._desc = "Unused",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_TDATA_SBE",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_TDATA_SBE_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_TDATA_SBE_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_TDATA_SBE_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_TDATA_SBE_QW,
      ._desc = "Tarb data buffer SBEs",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_INV_CMD",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_INV_CMD_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_INV_CMD_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_INV_CMD_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_INV_CMD_QW,
      ._desc = "Invalid command errors",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_DESC_MBE",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_DESC_MBE_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_DESC_MBE_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_DESC_MBE_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_DESC_MBE_QW,
      ._desc = "Uncorrectable descriptor errors",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_DATA_MBE",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_DATA_MBE_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_DATA_MBE_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_DATA_MBE_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_DATA_MBE_QW,
      ._desc = "Uncorrectable data flit errors",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_HDR_PERR",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_HDR_PERR_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_HDR_PERR_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_HDR_PERR_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_HDR_PERR_QW,
      ._desc = "Header flit parity errors",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_NFAMO_REQ",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_NFAMO_REQ_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_NFAMO_REQ_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_NFAMO_REQ_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_NFAMO_REQ_QW,
      ._desc = "Non-fetching AMO requests",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_PUT_REQ",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PUT_REQ_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PUT_REQ_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PUT_REQ_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PUT_REQ_QW,
      ._desc = "Network put requests",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_FAMO_REQ",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_FAMO_REQ_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_FAMO_REQ_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_FAMO_REQ_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_FAMO_REQ_QW,
      ._desc = "Fetching AMO requests",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_GET_REQ",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_GET_REQ_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_GET_REQ_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_GET_REQ_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_GET_REQ_QW,
      ._desc = "Network get requests",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_CQ_STALL",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_CQ_STALL_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_CQ_STALL_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_CQ_STALL_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_CQ_STALL_QW,
      ._desc = "CQ read index update stalls",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_CQ",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_CQ_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_CQ_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_CQ_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_CQ_QW,
      ._desc = "CQ read index updates",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_PI_FLIT",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PI_FLIT_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PI_FLIT_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PI_FLIT_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PI_FLIT_QW,
      ._desc = "Processor interface flits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_PI_PKT",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PI_PKT_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PI_PKT_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PI_PKT_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PI_PKT_QW,
      ._desc = "Processor interface packets",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_TARB_STALLED",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_TARB_STALLED_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_TARB_STALLED_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_TARB_STALLED_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_TARB_STALLED_QW,
      ._desc = "FMA to DLA stalls",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_FLIT",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_FLIT_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_FLIT_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_FLIT_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_FLIT_QW,
      ._desc = "FMA to DLA flits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "CNTR_PKT",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PKT_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PKT_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PKT_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_CNTR_PKT_QW,
      ._desc = "FMA to TARB packets",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "UNUSED_81_64",
      ._bpos = AR_NIC_FMA_MMR_RING_0_MID_FMA_UNUSED_81_64_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_MID_FMA_UNUSED_81_64_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_MMR_RING_0_MID_FMA_UNUSED_81_64_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_MID_FMA_UNUSED_81_64_QW,
      ._desc = "unused",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_mmr_ring_0_lo_fma_detail[] = {
    { ._name = "UNUSED_145_35",
      ._bpos = AR_NIC_FMA_MMR_RING_0_LO_FMA_UNUSED_145_35_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_LO_FMA_UNUSED_145_35_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_LO_FMA_RSTDATA & AR_NIC_FMA_MMR_RING_0_LO_FMA_UNUSED_145_35_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_LO_FMA_UNUSED_145_35_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "OS_INTR_REQ",
      ._bpos = AR_NIC_FMA_MMR_RING_0_LO_FMA_OS_INTR_REQ_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_LO_FMA_OS_INTR_REQ_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_LO_FMA_RSTDATA & AR_NIC_FMA_MMR_RING_0_LO_FMA_OS_INTR_REQ_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_LO_FMA_OS_INTR_REQ_QW,
      ._desc = "OS Interrupt Request",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "HSS_INTR_REQ",
      ._bpos = AR_NIC_FMA_MMR_RING_0_LO_FMA_HSS_INTR_REQ_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_LO_FMA_HSS_INTR_REQ_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_LO_FMA_RSTDATA & AR_NIC_FMA_MMR_RING_0_LO_FMA_HSS_INTR_REQ_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_LO_FMA_HSS_INTR_REQ_QW,
      ._desc = "HSS Interrupt Request",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "MMR_WR_ACK",
      ._bpos = AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_WR_ACK_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_WR_ACK_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_LO_FMA_RSTDATA & AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_WR_ACK_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_WR_ACK_QW,
      ._desc = "MMR Write Acknowledgement",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "MMR_RESP_OUT",
      ._bpos = AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_RESP_OUT_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_RESP_OUT_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_LO_FMA_RSTDATA & AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_RESP_OUT_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_RESP_OUT_QW,
      ._desc = "MMR Response Output",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "MMR_REQ_IN",
      ._bpos = AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_REQ_IN_BP,
      ._mask = AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_REQ_IN_MASK,
      ._rval = AR_NIC_FMA_MMR_RING_0_LO_FMA_RSTDATA & AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_REQ_IN_MASK,
      ._index = AR_NIC_FMA_MMR_RING_0_LO_FMA_MMR_REQ_IN_QW,
      ._desc = "MMR Request Input",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_flg_1_hi_fma_detail[] = {
    { ._name = "UNUSED_145_110",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_HI_FMA_UNUSED_145_110_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_HI_FMA_UNUSED_145_110_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_ERR_FLG_1_HI_FMA_UNUSED_145_110_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_HI_FMA_UNUSED_145_110_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_flg_1_mid_fma_detail[] = {
    { ._name = "UNUSED_127_110",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_UNUSED_127_110_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_UNUSED_127_110_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_UNUSED_127_110_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_UNUSED_127_110_QW,
      ._desc = "Unused",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "SW_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_SW_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_SW_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_SW_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_SW_ERR_QW,
      ._desc = "Software error detected, set whenever STATUS_SW_ERR is set",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "PI_PKT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_PKT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_PKT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_PKT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_PKT_ERR_QW,
      ._desc = "Packet received from PI with a non-zero LSTATUS",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "PI_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_BYTE_PUT_ERR_QW,
      ._desc = "Byte put received from PI that is not to an FMA PUT window",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "AMO_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_AMO_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_AMO_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_AMO_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_AMO_BYTE_PUT_ERR_QW,
      ._desc = "Byte store from PI to PUT window with FMA_OP equal to an AMO",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "GCW_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_GCW_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_GCW_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_GCW_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_GCW_MBE_ERR_QW,
      ._desc = "Multi-bit error on GCW payload flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "PI_GET_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_GET_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_GET_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_GET_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_GET_ADDR_ERR_QW,
      ._desc = "PUT to the FMA GET window that is not 8-byte aligned or is not an 8-byte multiple in length",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "FMA_LAUNCH_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_FMA_LAUNCH_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_FMA_LAUNCH_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_FMA_LAUNCH_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_FMA_LAUNCH_ERR_QW,
      ._desc = "Re-write FMA_LAUNCH0 while FMA_LAUNCH0_STATUS bit is set, or re-write FMA_LAUNCH1 while FMA_LAUNCH1_STATUS bit is set",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "ADDR_ALIGN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_ADDR_ALIGN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_ADDR_ALIGN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_ADDR_ALIGN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_ADDR_ALIGN_ERR_QW,
      ._desc = "A 64-bit two operand non-fetching AMO that is not 128-bit address aligned and not in AAX_OPRND_MODE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "GET_FR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_GET_FR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_GET_FR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_GET_FR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_GET_FR_ERR_QW,
      ._desc = "Get with flagged response that crosses local cache line boundary or with local address that is not 32-bit aligned",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "GET_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_GET_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_GET_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_GET_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_GET_LEN_ERR_QW,
      ._desc = "Get request that crosses remote cache line boundary or fetching-AMO response size inconsistent with FMA_GOP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "PUT_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PUT_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PUT_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_PUT_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PUT_LEN_ERR_QW,
      ._desc = "Non-fetching AMO with payload length inconsistent with FMA_OP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "INV_COM_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_INV_COM_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_INV_COM_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_INV_COM_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_INV_COM_ERR_QW,
      ._desc = "Invalid FMA_OP, FMA_GOP, or CE_OP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "NPES_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_NPES_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_NPES_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_NPES_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_NPES_ERR_QW,
      ._desc = "Request generated address exceeded PE limit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "PI_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_ADDR_ERR_QW,
      ._desc = "Packet from PI that is not to an FMA address",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "PI_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_LEN_ERR_QW,
      ._desc = "PUT from PI that has no payload",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "SSID_INACTIVE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_SSID_INACTIVE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_SSID_INACTIVE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_SSID_INACTIVE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_SSID_INACTIVE_ERR_QW,
      ._desc = "SSID not allocated and attempt to perform an operation that must be part of an active transaction",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "PI_CMD_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_CMD_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_CMD_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_CMD_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_CMD_ERR_QW,
      ._desc = "Packet from PI that is not a PUT request",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DB_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DB_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DB_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DB_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DB_MBE_ERR_QW,
      ._desc = "Multi-bit error on doorbell write data",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "NOPRIV_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_NOPRIV_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_NOPRIV_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_NOPRIV_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_NOPRIV_ERR_QW,
      ._desc = "User attempt to write descriptor or doorbell without privilege to do so",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "SSID_ALLOCID_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_SSID_ALLOCID_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_SSID_ALLOCID_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_SSID_ALLOCID_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_SSID_ALLOCID_ERR_QW,
      ._desc = "Allocate SSID attempt to already active sequence",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC_ENABLE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_ENABLE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_ENABLE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_ENABLE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_ENABLE_ERR_QW,
      ._desc = "Attempt to use a disabled descriptor",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "PI_BUF_OVERFLOW",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_BUF_OVERFLOW_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_BUF_OVERFLOW_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_BUF_OVERFLOW_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_PI_BUF_OVERFLOW_QW,
      ._desc = "Processor interface input buffer overflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_WR_ERR_QW,
      ._desc = "Attempt to write a descriptor or to do a CQ RD INDEX update with a payload size that is not an 8-byte multiple",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC_DB_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_DB_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_DB_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_DB_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC_DB_WR_ERR_QW,
      ._desc = "Attempt to write a doorbell except for FMA_LAUNCH0 with a payload size that is not 8 bytes",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "HDR_PERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_HDR_PERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_HDR_PERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_HDR_PERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_HDR_PERR_QW,
      ._desc = "Header parity error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DATA1IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA1IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA1IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA1IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA1IN_MBE_QW,
      ._desc = "Data flit in word 1 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DATA1IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA1IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA1IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA1IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA1IN_SBE_QW,
      ._desc = "Data flit in word 1 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DATA0IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA0IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA0IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA0IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA0IN_MBE_QW,
      ._desc = "Data flit in word 0 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DATA0IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA0IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA0IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA0IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DATA0IN_SBE_QW,
      ._desc = "Data flit in word 0 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC88_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC88_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC88_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC88_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC88_MBE_QW,
      ._desc = "Descriptor offset 0x88 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC88_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC88_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC88_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC88_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC88_SBE_QW,
      ._desc = "Descriptor offset 0x88 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC38_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC38_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC38_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC38_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC38_MBE_QW,
      ._desc = "Descriptor offset 0x38 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC38_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC38_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC38_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC38_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC38_SBE_QW,
      ._desc = "Descriptor offset 0x38 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC28_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC28_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC28_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC28_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC28_MBE_QW,
      ._desc = "Descriptor offset 0x28 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC28_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC28_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC28_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC28_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC28_SBE_QW,
      ._desc = "Descriptor offset 0x28 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC20_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC20_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC20_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC20_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC20_MBE_QW,
      ._desc = "Descriptor offset 0x20 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC20_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC20_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC20_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC20_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC20_SBE_QW,
      ._desc = "Descriptor offset 0x20 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC18_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC18_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC18_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC18_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC18_MBE_QW,
      ._desc = "Descriptor offset 0x18 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC18_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC18_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC18_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC18_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC18_SBE_QW,
      ._desc = "Descriptor offset 0x18 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC10_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC10_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC10_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC10_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC10_MBE_QW,
      ._desc = "Descriptor offset 0x10 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC10_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC10_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC10_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC10_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC10_SBE_QW,
      ._desc = "Descriptor offset 0x10 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC08_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC08_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC08_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC08_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC08_MBE_QW,
      ._desc = "Descriptor offset 0x08 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC08_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC08_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC08_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC08_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC08_SBE_QW,
      ._desc = "Descriptor offset 0x08 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC00_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC00_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC00_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC00_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC00_MBE_QW,
      ._desc = "Descriptor offset 0x00 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "DESC00_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC00_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC00_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC00_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_DESC00_SBE_QW,
      ._desc = "Descriptor offset 0x00 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "UNUSED_64",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_MID_FMA_UNUSED_64_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_MID_FMA_UNUSED_64_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_ERR_FLG_1_MID_FMA_UNUSED_64_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_MID_FMA_UNUSED_64_QW,
      ._desc = "unused",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_flg_1_lo_fma_detail[] = {
    { ._name = "UNUSED_63_46",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_UNUSED_63_46_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_UNUSED_63_46_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_UNUSED_63_46_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_UNUSED_63_46_QW,
      ._desc = "Unused",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_SW_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SW_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SW_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SW_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SW_ERR_QW,
      ._desc = "Software error detected, set whenever STATUS_SW_ERR is set",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_PI_PKT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_PKT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_PKT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_PKT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_PKT_ERR_QW,
      ._desc = "Packet received from PI with a non-zero LSTATUS",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_PI_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_BYTE_PUT_ERR_QW,
      ._desc = "Byte put received from PI that is not to an FMA PUT window",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_AMO_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_AMO_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_AMO_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_AMO_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_AMO_BYTE_PUT_ERR_QW,
      ._desc = "Byte store from PI to PUT window with FMA_OP equal to an AMO",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_GCW_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GCW_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GCW_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GCW_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GCW_MBE_ERR_QW,
      ._desc = "Multi-bit error on GCW payload flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_PI_GET_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_GET_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_GET_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_GET_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_GET_ADDR_ERR_QW,
      ._desc = "PUT to the FMA GET window that is not 8-byte aligned or is not an 8-byte multiple in length",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_FMA_LAUNCH_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_FMA_LAUNCH_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_FMA_LAUNCH_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_FMA_LAUNCH_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_FMA_LAUNCH_ERR_QW,
      ._desc = "Re-write FMA_LAUNCH0 while FMA_LAUNCH0_STATUS bit is set, or re-write FMA_LAUNCH1 while FMA_LAUNCH1_STATUS bit is set",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_ADDR_ALIGN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_ADDR_ALIGN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_ADDR_ALIGN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_ADDR_ALIGN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_ADDR_ALIGN_ERR_QW,
      ._desc = "A 64-bit two operand non-fetching AMO that is not 128-bit address aligned and not in AAX_OPRND_MODE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_GET_FR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GET_FR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GET_FR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GET_FR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GET_FR_ERR_QW,
      ._desc = "Get with flagged response that crosses local cache line boundary or with local address that is not 32-bit aligned",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_GET_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GET_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GET_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GET_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_GET_LEN_ERR_QW,
      ._desc = "Get request that crosses remote cache line boundary or fetching-AMO response size inconsistent with FMA_GOP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_PUT_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PUT_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PUT_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PUT_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PUT_LEN_ERR_QW,
      ._desc = "Non-fetching AMO with payload length inconsistent with FMA_OP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_INV_COM_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_INV_COM_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_INV_COM_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_INV_COM_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_INV_COM_ERR_QW,
      ._desc = "Invalid FMA_OP, FMA_GOP, or CE_OP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_NPES_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_NPES_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_NPES_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_NPES_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_NPES_ERR_QW,
      ._desc = "Request generated address exceeded PE limit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_PI_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_ADDR_ERR_QW,
      ._desc = "Packet from PI that is not to an FMA address",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_PI_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_LEN_ERR_QW,
      ._desc = "PUT from PI that has no payload",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_SSID_INACTIVE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SSID_INACTIVE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SSID_INACTIVE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SSID_INACTIVE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SSID_INACTIVE_ERR_QW,
      ._desc = "SSID not allocated and attempt to perform an operation that must be part of an active transaction",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_PI_CMD_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_CMD_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_CMD_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_CMD_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_CMD_ERR_QW,
      ._desc = "Packet from PI that is not a PUT request",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DB_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DB_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DB_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DB_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DB_MBE_ERR_QW,
      ._desc = "Multi-bit error on doorbell write data",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_NOPRIV_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_NOPRIV_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_NOPRIV_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_NOPRIV_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_NOPRIV_ERR_QW,
      ._desc = "User attempt to write descriptor or doorbell without privilege to do so",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_SSID_ALLOCID_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SSID_ALLOCID_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SSID_ALLOCID_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SSID_ALLOCID_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_SSID_ALLOCID_ERR_QW,
      ._desc = "Allocate SSID attempt to already active sequence",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC_ENABLE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_ENABLE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_ENABLE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_ENABLE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_ENABLE_ERR_QW,
      ._desc = "Attempt to use a disabled descriptor",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_PI_BUF_OVERFLOW",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_BUF_OVERFLOW_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_BUF_OVERFLOW_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_BUF_OVERFLOW_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_PI_BUF_OVERFLOW_QW,
      ._desc = "Processor interface input buffer overflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_WR_ERR_QW,
      ._desc = "Attempt to write a descriptor or to do a CQ RD INDEX update with a payload size that is not an 8-byte multiple",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC_DB_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_DB_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_DB_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_DB_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC_DB_WR_ERR_QW,
      ._desc = "Attempt to write a doorbell except for FMA_LAUNCH0 with a payload size that is not 8 bytes",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_HDR_PERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_HDR_PERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_HDR_PERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_HDR_PERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_HDR_PERR_QW,
      ._desc = "Header parity error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DATA1IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA1IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA1IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA1IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA1IN_MBE_QW,
      ._desc = "Data flit in word 1 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DATA1IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA1IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA1IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA1IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA1IN_SBE_QW,
      ._desc = "Data flit in word 1 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DATA0IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA0IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA0IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA0IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA0IN_MBE_QW,
      ._desc = "Data flit in word 0 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DATA0IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA0IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA0IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA0IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DATA0IN_SBE_QW,
      ._desc = "Data flit in word 0 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC88_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC88_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC88_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC88_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC88_MBE_QW,
      ._desc = "Descriptor offset 0x88 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC88_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC88_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC88_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC88_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC88_SBE_QW,
      ._desc = "Descriptor offset 0x88 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC38_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC38_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC38_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC38_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC38_MBE_QW,
      ._desc = "Descriptor offset 0x38 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC38_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC38_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC38_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC38_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC38_SBE_QW,
      ._desc = "Descriptor offset 0x38 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC28_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC28_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC28_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC28_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC28_MBE_QW,
      ._desc = "Descriptor offset 0x28 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC28_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC28_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC28_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC28_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC28_SBE_QW,
      ._desc = "Descriptor offset 0x28 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC20_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC20_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC20_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC20_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC20_MBE_QW,
      ._desc = "Descriptor offset 0x20 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC20_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC20_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC20_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC20_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC20_SBE_QW,
      ._desc = "Descriptor offset 0x20 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC18_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC18_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC18_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC18_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC18_MBE_QW,
      ._desc = "Descriptor offset 0x18 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC18_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC18_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC18_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC18_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC18_SBE_QW,
      ._desc = "Descriptor offset 0x18 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC10_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC10_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC10_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC10_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC10_MBE_QW,
      ._desc = "Descriptor offset 0x10 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC10_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC10_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC10_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC10_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC10_SBE_QW,
      ._desc = "Descriptor offset 0x10 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC08_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC08_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC08_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC08_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC08_MBE_QW,
      ._desc = "Descriptor offset 0x08 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC08_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC08_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC08_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC08_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC08_SBE_QW,
      ._desc = "Descriptor offset 0x08 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC00_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC00_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC00_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC00_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC00_MBE_QW,
      ._desc = "Descriptor offset 0x00 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC00_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC00_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC00_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC00_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_I_DESC00_SBE_QW,
      ._desc = "Descriptor offset 0x00 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "UNUSED_0",
      ._bpos = AR_NIC_FMA_ERR_FLG_1_LO_FMA_UNUSED_0_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_1_LO_FMA_UNUSED_0_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA & AR_NIC_FMA_ERR_FLG_1_LO_FMA_UNUSED_0_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_1_LO_FMA_UNUSED_0_QW,
      ._desc = "Unused",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_detail[] = {
    { ._name = "I_PI_NIC_REQ_SB",
      ._bpos = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_I_PI_NIC_REQ_SB_BP,
      ._mask = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_I_PI_NIC_REQ_SB_MASK,
      ._rval = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_I_PI_NIC_REQ_SB_MASK,
      ._index = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_I_PI_NIC_REQ_SB_QW,
      ._desc = "PI to NIC channel sideband",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_PI_NIC_REQ_FLIT",
      ._bpos = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_I_PI_NIC_REQ_FLIT_BP,
      ._mask = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_I_PI_NIC_REQ_FLIT_MASK,
      ._rval = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_I_PI_NIC_REQ_FLIT_MASK,
      ._index = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_I_PI_NIC_REQ_FLIT_QW,
      ._desc = "PI to NIC channel flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_detail[] = {
    { ._name = "I_PI_NIC_REQ_FLIT",
      ._bpos = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_I_PI_NIC_REQ_FLIT_BP,
      ._mask = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_I_PI_NIC_REQ_FLIT_MASK,
      ._rval = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_I_PI_NIC_REQ_FLIT_MASK,
      ._index = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_I_PI_NIC_REQ_FLIT_QW,
      ._desc = "PI to NIC channel flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_pi_flit_input_stage_2_lo_fma_detail[] = {
    { ._name = "I_PI_NIC_REQ_FLIT",
      ._bpos = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_I_PI_NIC_REQ_FLIT_BP,
      ._mask = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_I_PI_NIC_REQ_FLIT_MASK,
      ._rval = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_RSTDATA & AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_I_PI_NIC_REQ_FLIT_MASK,
      ._index = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_I_PI_NIC_REQ_FLIT_QW,
      ._desc = "PI to NIC channel flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_detail[] = {
    { ._name = "UNUSED_145_96",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_UNUSED_145_96_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_UNUSED_145_96_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_UNUSED_145_96_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_UNUSED_145_96_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_detail[] = {
    { ._name = "UNUSED_145_96",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_UNUSED_145_96_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_UNUSED_145_96_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_UNUSED_145_96_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_UNUSED_145_96_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GO_DLA_MARKER_HDR_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_DLA_MARKER_HDR_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_DLA_MARKER_HDR_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_DLA_MARKER_HDR_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_DLA_MARKER_HDR_SG3_QW,
      ._desc = "Go DLA marker doorbell header flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_88_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_WR_88_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_WR_88_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_WR_88_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_WR_88_SG3_QW,
      ._desc = "Write to descriptor offset 0x88 stage 3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_RD_88_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_RD_88_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_RD_88_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_RD_88_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_RD_88_SG3_QW,
      ._desc = "Write to descriptor offset 0x88 stage 3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_NIC_PI_REQ_ACK",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_Q_NIC_PI_REQ_ACK_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_Q_NIC_PI_REQ_ACK_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_Q_NIC_PI_REQ_ACK_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_Q_NIC_PI_REQ_ACK_QW,
      ._desc = "Flit acknowledge to processor interface",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_PI_REWIND",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_PI_REWIND_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_PI_REWIND_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_PI_REWIND_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_PI_REWIND_QW,
      ._desc = "Rewind PI fifo for replay",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_PI_HOLD",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_PI_HOLD_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_PI_HOLD_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_PI_HOLD_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_PI_HOLD_QW,
      ._desc = "PI fifo hold",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_VALID_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_VALID_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_VALID_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_VALID_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_VALID_SG3_QW,
      ._desc = "Send flit to tarb interface",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_HEADER_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_HEADER_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_HEADER_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_HEADER_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_HEADER_SG3_QW,
      ._desc = "Send packet header into pipeline",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_ERR_RECVD_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_ERR_RECVD_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_ERR_RECVD_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_ERR_RECVD_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_ERR_RECVD_SG3_QW,
      ._desc = "Non-zero lstatus in header from PI",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GO_WN_HDR_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WN_HDR_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WN_HDR_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WN_HDR_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WN_HDR_SG3_QW,
      ._desc = "Go store to FMA window header",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GO_WN_DTF_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WN_DTF_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WN_DTF_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WN_DTF_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WN_DTF_SG3_QW,
      ._desc = "Go store to FMA window data flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_USER_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_USER_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_USER_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_USER_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_USER_SG3_QW,
      ._desc = "User descriptor access",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GO_CQ_WINDOW_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_CQ_WINDOW_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_CQ_WINDOW_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_CQ_WINDOW_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_CQ_WINDOW_SG3_QW,
      ._desc = "Go cq rd idx update",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_ALLOC_SSID_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_ALLOC_SSID_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_ALLOC_SSID_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_ALLOC_SSID_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_ALLOC_SSID_SG3_QW,
      ._desc = "Go SSID allocate doorbell",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_CQWRITE_HDR_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CQWRITE_HDR_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CQWRITE_HDR_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CQWRITE_HDR_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CQWRITE_HDR_SG3_QW,
      ._desc = "Go cqwrite header flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_CQWRITE_DTF_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CQWRITE_DTF_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CQWRITE_DTF_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CQWRITE_DTF_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CQWRITE_DTF_SG3_QW,
      ._desc = "Go cqwrite data flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GO_FLBTE_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_FLBTE_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_FLBTE_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_FLBTE_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_FLBTE_SG3_QW,
      ._desc = "Go FMA launched BTE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_STAT_WHEN_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_WR_STAT_WHEN_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_WR_STAT_WHEN_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_WR_STAT_WHEN_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_WR_STAT_WHEN_SG3_QW,
      ._desc = "Go write status when doorbell",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_CE_HDR_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CE_HDR_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CE_HDR_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CE_HDR_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CE_HDR_SG3_QW,
      ._desc = "Go CE doorbell header",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_CE_DTF_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CE_DTF_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CE_DTF_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CE_DTF_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_CE_DTF_SG3_QW,
      ._desc = "Go CE data flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GO_SEQCMP_HDR_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_SEQCMP_HDR_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_SEQCMP_HDR_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_SEQCMP_HDR_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_SEQCMP_HDR_SG3_QW,
      ._desc = "Go sequence complete doorbell header",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_SEQCMP_DTF_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_SEQCMP_DTF_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_SEQCMP_DTF_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_SEQCMP_DTF_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_SEQCMP_DTF_SG3_QW,
      ._desc = "Go sequence complete doorbell data flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GO_MMR_RD_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_MMR_RD_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_MMR_RD_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_MMR_RD_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_MMR_RD_SG3_QW,
      ._desc = "Go mmr read",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GO_MMR_WR_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_MMR_WR_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_MMR_WR_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_MMR_WR_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_MMR_WR_SG3_QW,
      ._desc = "Go mmr write",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_FMA_LAUNCH0",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_FMA_LAUNCH0_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_FMA_LAUNCH0_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_FMA_LAUNCH0_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_FMA_LAUNCH0_QW,
      ._desc = "Go FMA_LAUNCH doorbell lower",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_FMA_LAUNCH1",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_FMA_LAUNCH1_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_FMA_LAUNCH1_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_FMA_LAUNCH1_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_FMA_LAUNCH1_QW,
      ._desc = "Go FMA_LAUNCH doorbell upper",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GO_WR_STAT_REQ_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WR_STAT_REQ_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WR_STAT_REQ_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WR_STAT_REQ_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_GO_WR_STAT_REQ_SG3_QW,
      ._desc = "Go write status request due to rc or wc decrement",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_SEQ_ACTIVE_READ_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_SEQ_ACTIVE_READ_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_SEQ_ACTIVE_READ_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_SEQ_ACTIVE_READ_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_SEQ_ACTIVE_READ_SG3_QW,
      ._desc = "Check sequence active flag",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_DESCRIPTOR_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_DESCRIPTOR_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_DESCRIPTOR_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_DESCRIPTOR_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_R_DESCRIPTOR_SG3_QW,
      ._desc = "Descriptor",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_lo_fma_detail[] = {
    { ._name = "R_DESCRIPTOR_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_DESCRIPTOR_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_DESCRIPTOR_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_DESCRIPTOR_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_DESCRIPTOR_SG3_QW,
      ._desc = "Descriptor",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_ADDRESS_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_ADDRESS_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_ADDRESS_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_ADDRESS_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_ADDRESS_SG3_QW,
      ._desc = "Address[29:0]",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_DATA0_2ODD",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DATA0_2ODD_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DATA0_2ODD_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DATA0_2ODD_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DATA0_2ODD_QW,
      ._desc = "Send lower 64-bits of write data to odd (x8) descriptor storage",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_00_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_00_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_00_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_00_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_00_SG3_QW,
      ._desc = "Go write offset 0x00",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_08_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_08_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_08_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_08_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_08_SG3_QW,
      ._desc = "Go write offset 0x08",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_10_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_10_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_10_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_10_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_10_SG3_QW,
      ._desc = "Go write offset 0x10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_18_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_18_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_18_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_18_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_18_SG3_QW,
      ._desc = "Go write offset 0x18",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_20_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_20_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_20_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_20_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_20_SG3_QW,
      ._desc = "Go write offset 0x20",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_28_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_28_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_28_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_28_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_28_SG3_QW,
      ._desc = "Go write offset 0x28",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_38_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_38_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_38_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_38_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_38_SG3_QW,
      ._desc = "Go write offset 0x38",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_WR_80_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_80_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_80_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_80_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_WR_80_SG3_QW,
      ._desc = "Go write offset 0x80",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_RD_00_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_00_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_00_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_00_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_00_SG3_QW,
      ._desc = "Go read offset 0x00",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_RD_08_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_08_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_08_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_08_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_08_SG3_QW,
      ._desc = "Go read offset 0x08",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_RD_10_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_10_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_10_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_10_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_10_SG3_QW,
      ._desc = "Go read offset 0x10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_RD_18_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_18_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_18_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_18_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_18_SG3_QW,
      ._desc = "Go read offset 0x18",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_RD_20_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_20_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_20_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_20_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_20_SG3_QW,
      ._desc = "Go read offset 0x20",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_RD_28_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_28_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_28_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_28_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_28_SG3_QW,
      ._desc = "Go read offset 0x28",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_RD_38_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_38_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_38_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_38_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_38_SG3_QW,
      ._desc = "Go read offset 0x38",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_RD_80_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_80_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_80_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_80_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_RD_80_SG3_QW,
      ._desc = "Go read offset 0x80",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_TAIL_FLIT_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_TAIL_FLIT_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_TAIL_FLIT_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_TAIL_FLIT_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_TAIL_FLIT_SG3_QW,
      ._desc = "Send tail flit into pipeline",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_MMR_HDR_PERR",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_PERR_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_PERR_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_PERR_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_PERR_QW,
      ._desc = "Header parity error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_MMR_HDR_COM_ERR",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_COM_ERR_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_COM_ERR_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_COM_ERR_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_COM_ERR_QW,
      ._desc = "Header command error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_MMR_HDR_ADR_ERR",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_ADR_ERR_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_ADR_ERR_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_ADR_ERR_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_ADR_ERR_QW,
      ._desc = "Header address not to FMA block error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_MMR_HDR_LEN_ERR",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_HDR_LEN_ERR_QW,
      ._desc = "Packet length error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_MMR_DATA0_SBE",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA0_SBE_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA0_SBE_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA0_SBE_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA0_SBE_QW,
      ._desc = "Data flit 0 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_MMR_DATA0_MBE",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA0_MBE_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA0_MBE_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA0_MBE_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA0_MBE_QW,
      ._desc = "Data flit 0 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_MMR_DATA1_SBE",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA1_SBE_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA1_SBE_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA1_SBE_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA1_SBE_QW,
      ._desc = "Data flit 1 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_MMR_DATA1_MBE",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA1_MBE_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA1_MBE_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA1_MBE_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_MMR_DATA1_MBE_QW,
      ._desc = "Data flit 1 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_DESC_OP_ERR",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DESC_OP_ERR_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DESC_OP_ERR_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DESC_OP_ERR_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DESC_OP_ERR_QW,
      ._desc = "Descriptor operation error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_DESC_DB_ERR",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DESC_DB_ERR_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DESC_DB_ERR_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DESC_DB_ERR_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_R_Q_DESC_DB_ERR_QW,
      ._desc = "Descriptor doorbell error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_detail[] = {
    { ._name = "UNUSED_145_144",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_UNUSED_145_144_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_UNUSED_145_144_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_UNUSED_145_144_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_UNUSED_145_144_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_ECC1_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_R_ECC1_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_R_ECC1_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_R_ECC1_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_R_ECC1_SG3_QW,
      ._desc = "Control data flit ecc1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_DATA1_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_R_DATA1_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_R_DATA1_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_R_DATA1_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_R_DATA1_SG3_QW,
      ._desc = "Control data flit data 1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_detail[] = {
    { ._name = "R_DATA1_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_R_DATA1_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_R_DATA1_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_R_DATA1_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_R_DATA1_SG3_QW,
      ._desc = "Control data flit data 1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_ECC0_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_R_ECC0_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_R_ECC0_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_R_ECC0_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_R_ECC0_SG3_QW,
      ._desc = "Control data flit ecc 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_pi_control_data_desc_read_stage_5_lo_fma_detail[] = {
    { ._name = "R_DATA0_SG3",
      ._bpos = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_R_DATA0_SG3_BP,
      ._mask = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_R_DATA0_SG3_MASK,
      ._rval = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_RSTDATA & AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_R_DATA0_SG3_MASK,
      ._index = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_R_DATA0_SG3_QW,
      ._desc = "Control data flit data 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_detail[] = {
    { ._name = "UNUSED_145_82",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_UNUSED_145_82_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_UNUSED_145_82_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_UNUSED_145_82_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_UNUSED_145_82_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_detail[] = {
    { ._name = "UNUSED_145_82",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_UNUSED_145_82_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_UNUSED_145_82_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_UNUSED_145_82_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_UNUSED_145_82_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "I_DESC_SG6",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_I_DESC_SG6_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_I_DESC_SG6_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_I_DESC_SG6_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_I_DESC_SG6_QW,
      ._desc = "Descriptor number",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_HDR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_HDR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_HDR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_HDR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_HDR_QW,
      ._desc = "Go header to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_LAUNCH",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_LAUNCH_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_LAUNCH_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_LAUNCH_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_LAUNCH_QW,
      ._desc = "Go FMA launch to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GET",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_GET_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_GET_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_GET_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_GET_QW,
      ._desc = "Go GET to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_PUT",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_PUT_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_PUT_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_PUT_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_PUT_QW,
      ._desc = "Go PUT to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_AMO",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_AMO_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_AMO_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_AMO_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_AMO_QW,
      ._desc = "Go AMO to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_STAT_REQ",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_STAT_REQ_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_STAT_REQ_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_STAT_REQ_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_STAT_REQ_QW,
      ._desc = "Go write status request to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_AMO_2OPS",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_AMO_2OPS_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_AMO_2OPS_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_AMO_2OPS_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_AMO_2OPS_QW,
      ._desc = "Two operand amo to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_32BIT_AMO_CE",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_32BIT_AMO_CE_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_32BIT_AMO_CE_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_32BIT_AMO_CE_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_32BIT_AMO_CE_QW,
      ._desc = "Go 32 bit amo or CE to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_64BIT",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_64BIT_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_64BIT_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_64BIT_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_64BIT_QW,
      ._desc = "Go 64 bit amo to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_REQ_COUNT",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_REQ_COUNT_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_REQ_COUNT_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_REQ_COUNT_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_R_REQ_COUNT_QW,
      ._desc = "Requests to generate count to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_packet_generation_tarb_write_stage_6_lo_fma_detail[] = {
    { ._name = "R_REQ_COUNT",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_REQ_COUNT_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_REQ_COUNT_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_REQ_COUNT_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_REQ_COUNT_QW,
      ._desc = "Requests to generate count to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GOP0_SG6",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GOP0_SG6_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GOP0_SG6_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GOP0_SG6_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GOP0_SG6_QW,
      ._desc = "GCW0 FMA_GOP to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GCW0_COUNT",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_COUNT_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_COUNT_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_COUNT_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_COUNT_QW,
      ._desc = "GCW0 count to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GCW0_MBE",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_MBE_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_MBE_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_MBE_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_MBE_QW,
      ._desc = "GCW0 MBE to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GCW0_COUNT_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_COUNT_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_COUNT_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_COUNT_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW0_COUNT_ERR_QW,
      ._desc = "GCW starting address + count violation to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GOP1_SG6",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GOP1_SG6_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GOP1_SG6_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GOP1_SG6_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GOP1_SG6_QW,
      ._desc = "GCW1 FMA_GOP to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GCW1_COUNT",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_COUNT_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_COUNT_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_COUNT_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_COUNT_QW,
      ._desc = "GCW1 count to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GCW1_MBE",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_MBE_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_MBE_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_MBE_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_MBE_QW,
      ._desc = "GCW1 MBE to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_GCW1_COUNT_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_COUNT_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_COUNT_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_COUNT_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_GCW1_COUNT_ERR_QW,
      ._desc = "GCW1 starting address + count violation to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_DTF",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_DTF_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_DTF_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_DTF_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_DTF_QW,
      ._desc = "Data flit to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_TAIL",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_TAIL_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_TAIL_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_TAIL_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_TAIL_QW,
      ._desc = "Tail flit to tarb",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_CE_DTF1",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_CE_DTF1_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_CE_DTF1_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_CE_DTF1_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_CE_DTF1_QW,
      ._desc = "CE data flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_SEND_FLAG_DATA",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_FLAG_DATA_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_FLAG_DATA_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_FLAG_DATA_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_FLAG_DATA_QW,
      ._desc = "Message complete send flag data",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_SEND_CE_IDX",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_CE_IDX_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_CE_IDX_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_CE_IDX_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_CE_IDX_QW,
      ._desc = "Send CE operand 2 as 64-bit index",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_SEND_CE_OP2",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_CE_OP2_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_CE_OP2_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_CE_OP2_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_SEND_CE_OP2_QW,
      ._desc = "Send CE operand 2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_LAF1_VALID",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_LAF1_VALID_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_LAF1_VALID_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_LAF1_VALID_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_LAF1_VALID_QW,
      ._desc = "Send laf1 to tarb int",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_INC_RC0",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_RC0_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_RC0_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_RC0_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_RC0_QW,
      ._desc = "Increment status read counter",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_INC_WC0",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_WC0_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_WC0_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_WC0_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_WC0_QW,
      ._desc = "Increment status write counter",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_COUNT0",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_COUNT0_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_COUNT0_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_COUNT0_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_COUNT0_QW,
      ._desc = "Count for rc, wc increment",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_INC_RC1",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_RC1_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_RC1_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_RC1_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_RC1_QW,
      ._desc = "Increment status read counter by 1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_INC_WC1",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_WC1_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_WC1_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_WC1_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INC_WC1_QW,
      ._desc = "Increment status write counter by 1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_SW_ERR_1",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SW_ERR_1_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SW_ERR_1_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SW_ERR_1_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SW_ERR_1_QW,
      ._desc = "Set software error status bit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_NPES_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_NPES_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_NPES_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_NPES_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_NPES_ERR_QW,
      ._desc = "Set NPES status flag",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_SEQID_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SEQID_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SEQID_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SEQID_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SEQID_ERR_QW,
      ._desc = "Set seqid error status flag",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_SSID_AA_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SSID_AA_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SSID_AA_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SSID_AA_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SSID_AA_ERR_QW,
      ._desc = "SSID already active error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_SSID_NA_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SSID_NA_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SSID_NA_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SSID_NA_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_SSID_NA_ERR_QW,
      ._desc = "SSID not active error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_ENABLE_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_ENABLE_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_ENABLE_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_ENABLE_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_ENABLE_ERR_QW,
      ._desc = "Descriptor not enabled error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_FR_LEN_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_FR_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_FR_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_FR_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_FR_LEN_ERR_QW,
      ._desc = "Count + starting address error with GCW FR bit set",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_GET_LEN_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_GET_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_GET_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_GET_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_GET_LEN_ERR_QW,
      ._desc = "Count + starting address error in GCW",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_PUT_LEN_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_PUT_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_PUT_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_PUT_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_PUT_LEN_ERR_QW,
      ._desc = "Non-fetching AMO payload length error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_INV_COM_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INV_COM_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INV_COM_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INV_COM_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_INV_COM_ERR_QW,
      ._desc = "Invalid command in FMA_OP, FMA_GOP, or CE_OP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_ALIGN_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_ALIGN_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_ALIGN_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_ALIGN_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_ALIGN_ERR_QW,
      ._desc = "AMO alignment error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_LAUNCH_ERR",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_LAUNCH_ERR_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_LAUNCH_ERR_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_LAUNCH_ERR_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_LAUNCH_ERR_QW,
      ._desc = "FMA_LAUNCH doorbell error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_WR_STAT_WHEN",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_WR_STAT_WHEN_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_WR_STAT_WHEN_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_WR_STAT_WHEN_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_WR_STAT_WHEN_QW,
      ._desc = "Defer write status request until rc, wc decrement",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_WR_STAT_WHEN_MODE",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_WR_STAT_WHEN_MODE_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_WR_STAT_WHEN_MODE_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_WR_STAT_WHEN_MODE_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_WR_STAT_WHEN_MODE_QW,
      ._desc = "rc, wc, or both need to be zero",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "UNUSED_1",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_UNUSED_1_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_UNUSED_1_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_UNUSED_1_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_UNUSED_1_QW,
      ._desc = "Zero",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "R_Q_FMA_BTE_VALID",
      ._bpos = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_FMA_BTE_VALID_BP,
      ._mask = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_FMA_BTE_VALID_MASK,
      ._rval = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA & AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_FMA_BTE_VALID_MASK,
      ._index = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_R_Q_FMA_BTE_VALID_QW,
      ._desc = "Go FLBTE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_detail[] = {
    { ._name = "UNUSED_145_64",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_UNUSED_145_64_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_UNUSED_145_64_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSTDATA_QW2 & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_UNUSED_145_64_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_UNUSED_145_64_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_detail[] = {
    { ._name = "UNUSED_145_64",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_UNUSED_145_64_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_UNUSED_145_64_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_RSTDATA_QW1 & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_UNUSED_145_64_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_UNUSED_145_64_QW,
      ._desc = "Forced 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_tarb_rd_data_stage_7_lo_fma_detail[] = {
    { ._name = "Q_GET_ACTIVE",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_ACTIVE_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_ACTIVE_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_ACTIVE_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_ACTIVE_QW,
      ._desc = "Processing GET packet",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_READ_PKT",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_READ_PKT_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_READ_PKT_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_READ_PKT_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_READ_PKT_QW,
      ._desc = "Packet in progress",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_GET_LAF1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_LAF1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_LAF1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_LAF1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_LAF1_QW,
      ._desc = "Sending GET LAF1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_GET_DONE",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_DONE_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_DONE_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_DONE_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GET_DONE_QW,
      ._desc = "GET packet finished",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_START_PUT_AAX_MODE",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_PUT_AAX_MODE_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_PUT_AAX_MODE_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_PUT_AAX_MODE_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_PUT_AAX_MODE_QW,
      ._desc = "Start 64-bit AAX in AAX_OPRND_MODE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_PUT_AMO_ACTIVE",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_ACTIVE_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_ACTIVE_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_ACTIVE_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_ACTIVE_QW,
      ._desc = "Processing PUT AMO packet",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_PUT_AMO_DONE",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_DONE_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_DONE_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_DONE_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_DONE_QW,
      ._desc = "PUT AMO packet done",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_START_PUT_AMO",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_PUT_AMO_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_PUT_AMO_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_PUT_AMO_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_PUT_AMO_QW,
      ._desc = "Start put AMO processing",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_ADD_DATA",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_ADD_DATA_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_ADD_DATA_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_ADD_DATA_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_ADD_DATA_QW,
      ._desc = "Send flit from data buffer",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_64BIT",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_QW,
      ._desc = "64-bit AMO",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_2OP_PUT_AMO",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_PUT_AMO_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_PUT_AMO_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_PUT_AMO_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_PUT_AMO_QW,
      ._desc = "Two operand non-fetching AMO",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_PUT_AMO_PTR",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_PTR_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_PTR_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_PTR_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_PTR_QW,
      ._desc = "Data pointer for put amo operands",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_PUT_AMO_NEXT_FLIT",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_NEXT_FLIT_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_NEXT_FLIT_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_NEXT_FLIT_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_NEXT_FLIT_QW,
      ._desc = "Send next flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_PEND_REQ_COUNT",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PEND_REQ_COUNT_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PEND_REQ_COUNT_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PEND_REQ_COUNT_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PEND_REQ_COUNT_QW,
      ._desc = "Number of requests to send for this packet",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_GO_READ_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GO_READ_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GO_READ_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GO_READ_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GO_READ_SG1_QW,
      ._desc = "Go read header and control fifo",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_HEADER_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_HEADER_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_HEADER_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_HEADER_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_HEADER_SG1_QW,
      ._desc = "Send header flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_LAUNCH_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_LAUNCH_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_LAUNCH_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_LAUNCH_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_LAUNCH_SG1_QW,
      ._desc = "FMA_LAUNCH operation",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_START_GET",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_GET_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_GET_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_GET_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_START_GET_QW,
      ._desc = "Start GET operation",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_GOP0_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GOP0_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GOP0_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GOP0_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GOP0_SG1_QW,
      ._desc = "FMA_GOP for GCW0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_CNT0_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_CNT0_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_CNT0_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_CNT0_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_CNT0_SG1_QW,
      ._desc = "CNT for GCW0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_GCW0_MBE_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW0_MBE_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW0_MBE_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW0_MBE_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW0_MBE_SG1_QW,
      ._desc = "GCW0 MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_GCW0_COUNT_ERR_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW0_COUNT_ERR_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW0_COUNT_ERR_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW0_COUNT_ERR_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW0_COUNT_ERR_SG1_QW,
      ._desc = "GCW0 count error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_GOP1_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GOP1_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GOP1_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GOP1_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GOP1_SG1_QW,
      ._desc = "FMA_GOP for GCW1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_CNT1_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_CNT1_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_CNT1_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_CNT1_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_CNT1_SG1_QW,
      ._desc = "CNT for GCW1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_GCW1_MBE_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW1_MBE_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW1_MBE_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW1_MBE_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW1_MBE_SG1_QW,
      ._desc = "GCW1 MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_GCW1_COUNT_ERR_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW1_COUNT_ERR_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW1_COUNT_ERR_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW1_COUNT_ERR_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_GCW1_COUNT_ERR_SG1_QW,
      ._desc = "GCW1 Count Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_TAIL_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_TAIL_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_TAIL_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_TAIL_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_TAIL_SG1_QW,
      ._desc = "Tail flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_SEND_HDR_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_HDR_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_HDR_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_HDR_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_HDR_SG1_QW,
      ._desc = "Send saved header",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_SEND_LAF_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_LAF_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_LAF_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_LAF_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_LAF_SG1_QW,
      ._desc = "Send LAF flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_SEND_LAF1_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_LAF1_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_LAF1_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_LAF1_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_LAF1_SG1_QW,
      ._desc = "Send LAF flit for GCW1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_DATA_READ_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_DATA_READ_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_DATA_READ_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_DATA_READ_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_DATA_READ_SG1_QW,
      ._desc = "Read data fifo",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_ADD_DATA_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_ADD_DATA_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_ADD_DATA_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_ADD_DATA_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_ADD_DATA_SG1_QW,
      ._desc = "Send data flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_SEND_PUT_AMO_DATA_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_PUT_AMO_DATA_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_PUT_AMO_DATA_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_PUT_AMO_DATA_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_PUT_AMO_DATA_SG1_QW,
      ._desc = "Send non-fetching AMO data",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_SEND_GET_AMO_DATA_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_GET_AMO_DATA_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_GET_AMO_DATA_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_GET_AMO_DATA_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_SEND_GET_AMO_DATA_SG1_QW,
      ._desc = "Send fetching AMO data",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_PUT_AMO_PTR_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_PTR_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_PTR_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_PTR_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_PUT_AMO_PTR_SG1_QW,
      ._desc = "Put AMO operand pointer",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_64BIT_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_SG1_QW,
      ._desc = "64-bit AMO, CE operation",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_2OP_PUT_AMO_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_PUT_AMO_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_PUT_AMO_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_PUT_AMO_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_PUT_AMO_SG1_QW,
      ._desc = "Two operand non-fetching AMO",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_2OP_GET_AMO_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_GET_AMO_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_GET_AMO_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_GET_AMO_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_2OP_GET_AMO_SG1_QW,
      ._desc = "Two operand fetching AMO",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_64BIT_GET_AMO_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_GET_AMO_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_GET_AMO_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_GET_AMO_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_GET_AMO_SG1_QW,
      ._desc = "64 bit fetching AMO",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = "Q_64BIT_PUT_AMO_SG1",
      ._bpos = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_PUT_AMO_SG1_BP,
      ._mask = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_PUT_AMO_SG1_MASK,
      ._rval = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA & AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_PUT_AMO_SG1_MASK,
      ._index = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_Q_64BIT_PUT_AMO_SG1_QW,
      ._desc = "64 bit non-fetching AMO",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "R"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_cfg_desc_flbte_detail[] = {
    { ._name = "RESERVED_1727_1664",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1727_1664_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1727_1664_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW26 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1727_1664_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1727_1664_QW,
      ._desc = "The DLA_MARKER doorbell register is not used with FLBTE transactions",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_1663_1600",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1663_1600_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1663_1600_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW25 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1663_1600_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1663_1600_QW,
      ._desc = "The FMA_LAUNCH doorbell register is not used with FLBTE transactions",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_1599_1536",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1599_1536_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1599_1536_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW24 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1599_1536_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1599_1536_QW,
      ._desc = "The FMA_LAUNCH doorbell register is not used with FLBTE transactions",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_1151_1088",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1151_1088_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1151_1088_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW17 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1151_1088_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1151_1088_QW,
      ._desc = "Register bits exist, but not used for FLBTE",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RO"
    },
    { ._name = "STATUS",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_STATUS_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_STATUS_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_FLBTE_STATUS_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_STATUS_QW,
      ._desc = "The fields in this register (STATUS) are described in the SFMA version of the descriptor (offset 0x80)",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RW"
    },
    { ._name = "RESERVED_1023_960",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1023_960_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1023_960_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW15 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1023_960_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_1023_960_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RO"
    },
    { ._name = "RESERVED_959_896",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_959_896_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_959_896_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW14 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_959_896_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_959_896_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RO"
    },
    { ._name = "RESERVED_895_832",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_895_832_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_895_832_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW13 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_895_832_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_895_832_QW,
      ._desc = "The SEQCMP doorbell register is not used with FLBTE transactions",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_831_771",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_831_771_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_831_771_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW12 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_831_771_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_831_771_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RW"
    },
    { ._name = "WR_STATUS_WHEN",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_WR_STATUS_WHEN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_WR_STATUS_WHEN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW12 & AR_NIC_FMA_CFG_DESC_FLBTE_WR_STATUS_WHEN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_WR_STATUS_WHEN_QW,
      ._desc = "This field is part of the WR_STATUS doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_767_704",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_767_704_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_767_704_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW11 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_767_704_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_767_704_QW,
      ._desc = "The CE doorbell register is not used with FLBTE transactions",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "FLBTE_RPT_ENQ_STATUS",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_RPT_ENQ_STATUS_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_RPT_ENQ_STATUS_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW10 & AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_RPT_ENQ_STATUS_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_RPT_ENQ_STATUS_QW,
      ._desc = "This field is part of the FLBTE doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "FLBTE_BTE_IMMEDIATE",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_BTE_IMMEDIATE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_BTE_IMMEDIATE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW10 & AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_BTE_IMMEDIATE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_BTE_IMMEDIATE_QW,
      ._desc = "This field is part of the FLBTE doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "FLBTE_SRC_SSID_CQ_EN",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_SSID_CQ_EN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_SSID_CQ_EN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW10 & AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_SSID_CQ_EN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_SSID_CQ_EN_QW,
      ._desc = "This field is part of the FLBTE doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "FLBTE_SRC_BTE_CQ_EN",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_BTE_CQ_EN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_BTE_CQ_EN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW10 & AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_BTE_CQ_EN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_BTE_CQ_EN_QW,
      ._desc = "This field is part of the FLBTE doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_699_688",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_699_688_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_699_688_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW10 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_699_688_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_699_688_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RW"
    },
    { ._name = "FLBTE_SRC_CQ_DATA",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_CQ_DATA_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_CQ_DATA_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW10 & AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_CQ_DATA_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_FLBTE_SRC_CQ_DATA_QW,
      ._desc = "This field is part of the FLBTE doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_639_576",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_639_576_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_639_576_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW9 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_639_576_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_639_576_QW,
      ._desc = "The CQ_WRITE doorbell register is not used with FLBTE transactions",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_575_512",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_575_512_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_575_512_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_575_512_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_575_512_QW,
      ._desc = "The ALLOC_SEQID doorbell register is not used with FLBTE transactions",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "PRIVILEGE_MASK",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_PRIVILEGE_MASK_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_PRIVILEGE_MASK_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_FLBTE_PRIVILEGE_MASK_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_PRIVILEGE_MASK_QW,
      ._desc = "This word of the FMA descriptor is used to disable the ability to modify other fields in this descriptor from FMA Descriptor User Access address space",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "DEST_USER_DATA",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_DEST_USER_DATA_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_DEST_USER_DATA_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW5 & AR_NIC_FMA_CFG_DESC_FLBTE_DEST_USER_DATA_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_DEST_USER_DATA_QW,
      ._desc = "This field corresponds to the BTE TX descriptor DEST_USER_DATA field",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_319_288",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_319_288_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_319_288_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW4 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_319_288_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_319_288_QW,
      ._desc = "Register bits exist, but not used for FLBTE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "XFER_LEN",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_XFER_LEN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_XFER_LEN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW4 & AR_NIC_FMA_CFG_DESC_FLBTE_XFER_LEN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_XFER_LEN_QW,
      ._desc = "The number of bytes to be transferred by the FLBTE transaction",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_255_240",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_255_240_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_255_240_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW3 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_255_240_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_255_240_QW,
      ._desc = "Register bits exist, but not used for FLBTE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "LOC_PHYS_ADDR",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_PHYS_ADDR_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_PHYS_ADDR_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW3 & AR_NIC_FMA_CFG_DESC_FLBTE_LOC_PHYS_ADDR_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_PHYS_ADDR_QW,
      ._desc = "Local physical address",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "LOC_MEM_OFFSET",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_MEM_OFFSET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_MEM_OFFSET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW3 & AR_NIC_FMA_CFG_DESC_FLBTE_LOC_MEM_OFFSET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_MEM_OFFSET_QW,
      ._desc = "Starting offset in the local memory domain (LOC_MDH)",
      ._type_bitmsk = 0x000000000000000full,
      ._access = "RW"
    },
    { ._name = "NTT_EN",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_NTT_EN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_NTT_EN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_FLBTE_NTT_EN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_NTT_EN_QW,
      ._desc = "Determines whether the Node Translation Table (NTT) (Section 1",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "REM_PTAG",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_REM_PTAG_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_REM_PTAG_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_FLBTE_REM_PTAG_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_REM_PTAG_QW,
      ._desc = "Destination Memory protection tag",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "LOC_PTAG",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_PTAG_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_PTAG_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_FLBTE_LOC_PTAG_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_PTAG_QW,
      ._desc = "Local memory protection tag",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "SRC_CQH",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_SRC_CQH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_SRC_CQH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_FLBTE_SRC_CQH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_SRC_CQH_QW,
      ._desc = "Completion queue handle for source side CQ events",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "PE_BASE",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_PE_BASE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_PE_BASE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_FLBTE_PE_BASE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_PE_BASE_QW,
      ._desc = "This field is used when NTT_EN = 1 to indicate the base PE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "NPES",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_NPES_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_NPES_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_FLBTE_NPES_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_NPES_QW,
      ._desc = "This field is only used when NTT_EN = 1, and is then used to indicate the number of PEs (destination endpoints) associated with the NTT group",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_127",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_127_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_127_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_127_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_127_QW,
      ._desc = "Reserved for future increase in MDH size",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "REM_MDH",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_REM_MDH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_REM_MDH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_REM_MDH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_REM_MDH_QW,
      ._desc = "Remote Memory Domain Handle",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_114",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_114_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_114_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_114_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_114_QW,
      ._desc = "Reserved for future increase in MDH size",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "LOC_MDH",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_MDH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_MDH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_LOC_MDH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_LOC_MDH_QW,
      ._desc = "Local Memory Domain Handle",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "BTE_FENCE",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_BTE_FENCE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_BTE_FENCE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_BTE_FENCE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_BTE_FENCE_QW,
      ._desc = "Fence inserted between end of processing of current FLBTE transaction and start of whichever BTE transaction is enqueued next",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "PRIVILEGED",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_PRIVILEGED_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_PRIVILEGED_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_PRIVILEGED_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_PRIVILEGED_QW,
      ._desc = "If 1, the FLBTE transaction is considered by the BTE to be ",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_99_98",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_99_98_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_99_98_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_99_98_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_99_98_QW,
      ._desc = "Reserved for future increase in BTE_CHAN size",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "BTE_CHAN",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_BTE_CHAN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_BTE_CHAN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_BTE_CHAN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_BTE_CHAN_QW,
      ._desc = "The BTE channel to which the FLBTE transaction will be enqueued",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_95",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_95_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_95_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_95_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_95_QW,
      ._desc = "Not used",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RD_NO_SNOOP",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RD_NO_SNOOP_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RD_NO_SNOOP_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RD_NO_SNOOP_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RD_NO_SNOOP_QW,
      ._desc = "If 1, local processor cache coherency is not required for Put / Send data buffer read requests issued by BTE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RD_RO",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RD_RO_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RD_RO_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RD_RO_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RD_RO_QW,
      ._desc = "If 1, relaxed ordering is allowed for Put / Send data buffer read requests issued to the local processor by BTE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "NAT_EN",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_NAT_EN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_NAT_EN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_NAT_EN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_NAT_EN_QW,
      ._desc = "Use network style address translation for Put / Send data buffer read requests issued by BTE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_91",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_91_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_91_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_91_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_91_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "ENQ_STATUS_CQH",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_ENQ_STATUS_CQH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_ENQ_STATUS_CQH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_ENQ_STATUS_CQH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_ENQ_STATUS_CQH_QW,
      ._desc = "Handle of CQ used to report FLBTE enqueue status",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_75_72",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_75_72_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_75_72_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_75_72_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_75_72_QW,
      ._desc = "Register bits exist, but not used for FLBTE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_71",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_71_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_71_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_71_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_71_QW,
      ._desc = "Reserved",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_70_66",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_70_66_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_70_66_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_70_66_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_70_66_QW,
      ._desc = "Register bits exist, but not used for FLBTE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "BTE_OP",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_BTE_OP_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_BTE_OP_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_FLBTE_BTE_OP_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_BTE_OP_QW,
      ._desc = "The operation that is to be performed by the BTE transaction",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "FMA_EN",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_FMA_EN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_FMA_EN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_FLBTE_FMA_EN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_FMA_EN_QW,
      ._desc = "Enable descriptorAn FLBTE transaction is not launched on a write to the FLBTE doorbell register unless FMA_EN = 1",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RC",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RC_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RC_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_FLBTE_RC_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RC_QW,
      ._desc = "Routing ControlSpecifies constraints on how the packets of the transaction are routed through the network",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "WC",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_WC_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_WC_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_FLBTE_WC_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_WC_QW,
      ._desc = "Write combining enable",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_58",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_58_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_58_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_58_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_RESERVED_58_QW,
      ._desc = "Register bit exists, but not used for FLBTE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "LOGICAL_DEST",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_LOGICAL_DEST_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_LOGICAL_DEST_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_FLBTE_LOGICAL_DEST_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_LOGICAL_DEST_QW,
      ._desc = "Logical destination network endpoint id",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "REM_MEM_OFFSET",
      ._bpos = AR_NIC_FMA_CFG_DESC_FLBTE_REM_MEM_OFFSET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_FLBTE_REM_MEM_OFFSET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_FLBTE_REM_MEM_OFFSET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_FLBTE_REM_MEM_OFFSET_QW,
      ._desc = "Starting offset in the remote memory domain (REM_MDH)",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_cfg_desc_ce_detail[] = {
    { ._name = "RESERVED_1727_1664",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1727_1664_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1727_1664_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW26 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_1727_1664_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1727_1664_QW,
      ._desc = "The DLA_MARKER doorbell register is not used with CE transactions",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_1663_1600",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1663_1600_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1663_1600_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW25 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_1663_1600_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1663_1600_QW,
      ._desc = "The FMA_LAUNCH doorbell register is not used with CE leaf-join requests",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_1599_1536",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1599_1536_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1599_1536_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW24 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_1599_1536_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1599_1536_QW,
      ._desc = "The FMA_LAUNCH doorbell register is not used with CE leaf-join requests",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_1151_1088",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1151_1088_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1151_1088_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW17 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_1151_1088_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1151_1088_QW,
      ._desc = "Register bits exist, but not used for CE",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RO"
    },
    { ._name = "STATUS",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_STATUS_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_STATUS_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW16 & AR_NIC_FMA_CFG_DESC_CE_STATUS_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_STATUS_QW,
      ._desc = "The register (STATUS) can be written to memory using the WR_STATUS doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RW"
    },
    { ._name = "RESERVED_1023_960",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1023_960_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1023_960_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW15 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_1023_960_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_1023_960_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RO"
    },
    { ._name = "RESERVED_959_896",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_959_896_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_959_896_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW14 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_959_896_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_959_896_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "RO"
    },
    { ._name = "SEQCMP",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_SEQCMP_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_SEQCMP_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW13 & AR_NIC_FMA_CFG_DESC_CE_SEQCMP_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_SEQCMP_QW,
      ._desc = "See the description of the SEQCMP doorbell register (offset 0x68) in the SFMA version of the descriptor",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_831_771",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_831_771_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_831_771_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW12 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_831_771_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_831_771_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "WR_STATUS_WHEN",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_WR_STATUS_WHEN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_WR_STATUS_WHEN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW12 & AR_NIC_FMA_CFG_DESC_CE_WR_STATUS_WHEN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_WR_STATUS_WHEN_QW,
      ._desc = "This field is part of the WR_STATUS doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_767_745",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_767_745_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_767_745_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW11 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_767_745_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_767_745_QW,
      ._desc = "This field is the CE doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "CEDB_USE_OPRND2",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_CEDB_USE_OPRND2_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_CEDB_USE_OPRND2_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW11 & AR_NIC_FMA_CFG_DESC_CE_CEDB_USE_OPRND2_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_CEDB_USE_OPRND2_QW,
      ._desc = "This field, when set to 1, indicates that operand 2 should be included in this leaf-join request",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "CEDB_REDUCTN_ID",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_CEDB_REDUCTN_ID_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_CEDB_REDUCTN_ID_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW11 & AR_NIC_FMA_CFG_DESC_CE_CEDB_REDUCTN_ID_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_CEDB_REDUCTN_ID_QW,
      ._desc = "This field is part of the CE doorbell register",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_703_640",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_703_640_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_703_640_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW10 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_703_640_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_703_640_QW,
      ._desc = "The FLBTE doorbell register is not used with CE leaf-join requests",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "RESERVED_639_576",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_639_576_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_639_576_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW9 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_639_576_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_639_576_QW,
      ._desc = "The CQ_WRITE doorbell register is not used with CE leaf-join requests",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "ALLOC_SEQID",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_ALLOC_SEQID_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_ALLOC_SEQID_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW8 & AR_NIC_FMA_CFG_DESC_CE_ALLOC_SEQID_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_ALLOC_SEQID_QW,
      ._desc = "See the description of the TRANSACTION_START doorbell register in the SFMA version of the descriptor",
      ._type_bitmsk = 0x000000000000000cull,
      ._access = "WO"
    },
    { ._name = "PRIVILEGE_MASK",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_PRIVILEGE_MASK_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_PRIVILEGE_MASK_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW7 & AR_NIC_FMA_CFG_DESC_CE_PRIVILEGE_MASK_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_PRIVILEGE_MASK_QW,
      ._desc = "The use of the PRIVILEGE_MASK is described in detail in Section 6",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_383_334",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_383_334_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_383_334_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW5 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_383_334_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_383_334_QW,
      ._desc = "Register bits exist, but not used for CE leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "CHILD_ID",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_CHILD_ID_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_CHILD_ID_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW5 & AR_NIC_FMA_CFG_DESC_CE_CHILD_ID_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_CHILD_ID_QW,
      ._desc = "Identifies which child this leaf-join request corresponds to at the targeted virtual CE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_327_326",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_327_326_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_327_326_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW5 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_327_326_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_327_326_QW,
      ._desc = "Register bits exist, but not used for CE leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "CE_ID",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_CE_ID_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_CE_ID_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW5 & AR_NIC_FMA_CFG_DESC_CE_CE_ID_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_CE_ID_QW,
      ._desc = "Identifies the particular virtual CE at the destination endpoint that this leaf-join request is targeted to",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "CE_OPRND2",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_CE_OPRND2_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_CE_OPRND2_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW4 & AR_NIC_FMA_CFG_DESC_CE_CE_OPRND2_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_CE_OPRND2_QW,
      ._desc = "The second operand being submitted to the reduction by this leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "CE_OPRND1",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_CE_OPRND1_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_CE_OPRND1_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW3 & AR_NIC_FMA_CFG_DESC_CE_CE_OPRND1_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_CE_OPRND1_QW,
      ._desc = "The first operand being submitted to the reduction by this leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "NTT_EN",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_NTT_EN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_NTT_EN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_CE_NTT_EN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_NTT_EN_QW,
      ._desc = "Determines whether the Node Translation Table (NTT) (Section 1",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "REM_PTAG",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_REM_PTAG_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_REM_PTAG_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_CE_REM_PTAG_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_REM_PTAG_QW,
      ._desc = "Remote protection tag",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_182_164",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_182_164_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_182_164_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_182_164_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_182_164_QW,
      ._desc = "Register bits exist, but not used for CE leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "PE_BASE",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_PE_BASE_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_PE_BASE_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_CE_PE_BASE_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_PE_BASE_QW,
      ._desc = "This field is used only when NTT_EN = 1, and is then used to indicate the base endpoint ID",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "NPES",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_NPES_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_NPES_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW2 & AR_NIC_FMA_CFG_DESC_CE_NPES_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_NPES_QW,
      ._desc = "This field is only used when NTT_EN = 1, and is then used to indicate the number of PEs (destination endpoints) associated with the NTT group",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_127",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_127_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_127_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_127_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_127_QW,
      ._desc = "Reserved for future increase in MDH size",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "REM_MDH",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_REM_MDH_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_REM_MDH_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_REM_MDH_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_REM_MDH_QW,
      ._desc = "Identifies the memory domain that is to be used by the CE when returning the reduction scatter result",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_114",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_114_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_114_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_114_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_114_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_113_100",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_113_100_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_113_100_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_113_100_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_113_100_QW,
      ._desc = "Register bits exist, but not used for CE leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_99_98",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_99_98_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_99_98_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_99_98_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_99_98_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_97_92",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_97_92_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_97_92_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_97_92_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_97_92_QW,
      ._desc = "Register bits exist, but not used for CE leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_91",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_91_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_91_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_91_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_91_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_90_80",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_90_80_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_90_80_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_90_80_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_90_80_QW,
      ._desc = "Register bits exist, but not used for CE leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_79_76",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_79_76_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_79_76_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_79_76_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_79_76_QW,
      ._desc = "",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "FP_EXCEPTION",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_FP_EXCEPTION_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_FP_EXCEPTION_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_FP_EXCEPTION_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_FP_EXCEPTION_QW,
      ._desc = "Floating point exceptions present in the operand(s) being submitted to the reduction by this leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_71",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_71_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_71_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_71_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_71_QW,
      ._desc = "Reserved",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_70",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_70_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_70_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_70_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_70_QW,
      ._desc = "Register bits exist, but not used for CE leaf-join request",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "CE_OP",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_CE_OP_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_CE_OP_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1 & AR_NIC_FMA_CFG_DESC_CE_CE_OP_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_CE_OP_QW,
      ._desc = "The operation that is to be performed on the operands in the reduction",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "FMA_EN",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_FMA_EN_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_FMA_EN_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_CE_FMA_EN_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_FMA_EN_QW,
      ._desc = "Enable descriptorA CE leaf-join request is not launched on a write to the CE doorbell register unless FMA_EN = 1",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RC",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RC_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RC_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_CE_RC_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RC_QW,
      ._desc = "Routing Control Controls the routing of the leaf-join request, through the network, to the destination endpoint containing the target CE",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_59",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_59_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_59_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_59_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_59_QW,
      ._desc = "Bit exists but is not used for CE operations",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "RESERVED_58",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_RESERVED_58_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_RESERVED_58_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_CE_RESERVED_58_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_RESERVED_58_QW,
      ._desc = "Bit exists but is not used for CE operations",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "LOGICAL_DEST",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_LOGICAL_DEST_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_LOGICAL_DEST_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_CE_LOGICAL_DEST_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_LOGICAL_DEST_QW,
      ._desc = "Logical destination network endpoint id",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = "SCATTER_OFFSET",
      ._bpos = AR_NIC_FMA_CFG_DESC_CE_SCATTER_OFFSET_BP,
      ._mask = AR_NIC_FMA_CFG_DESC_CE_SCATTER_OFFSET_MASK,
      ._rval = AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW0 & AR_NIC_FMA_CFG_DESC_CE_SCATTER_OFFSET_MASK,
      ._index = AR_NIC_FMA_CFG_DESC_CE_SCATTER_OFFSET_QW,
      ._desc = "Starting offset in the memory domain identified by REM_MDH at which the scatter result of the reduction will be written",
      ._type_bitmsk = 0x000000000000000dull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_flg_detail[] = {
    { ._name = "SW_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_SW_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_SW_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_SW_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_SW_ERR_QW,
      ._desc = "Software error detected, set whenever STATUS_SW_ERR is set",
      ._type_bitmsk = 0x0000000000080001ull,
      ._access = "RW1"
    },
    { ._name = "PI_PKT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_PI_PKT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_PI_PKT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_PI_PKT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_PI_PKT_ERR_QW,
      ._desc = "Packet received from PI with a non-zero LSTATUS",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "PI_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_PI_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_PI_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_PI_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_PI_BYTE_PUT_ERR_QW,
      ._desc = "Byte put received from PI that is not to an FMA PUT window",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "AMO_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_AMO_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_AMO_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_AMO_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_AMO_BYTE_PUT_ERR_QW,
      ._desc = "Byte store from PI to PUT window with FMA_OP equal to an AMO",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "GCW_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_GCW_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_GCW_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_GCW_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_GCW_MBE_ERR_QW,
      ._desc = "Multi-bit error on GCW payload flit",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "PI_GET_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_PI_GET_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_PI_GET_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_PI_GET_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_PI_GET_ADDR_ERR_QW,
      ._desc = "PUT to the FMA GET window that is not 8-byte aligned or is not an 8-byte multiple in length",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "FMA_LAUNCH_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_FMA_LAUNCH_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_FMA_LAUNCH_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_FMA_LAUNCH_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_FMA_LAUNCH_ERR_QW,
      ._desc = "Re-write FMA_LAUNCH0 while FMA_LAUNCH0_STATUS bit is set, or re-write FMA_LAUNCH1 while FMA_LAUNCH1_STATUS bit is set",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "ADDR_ALIGN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_ADDR_ALIGN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_ADDR_ALIGN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_ADDR_ALIGN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_ADDR_ALIGN_ERR_QW,
      ._desc = "A 64-bit two operand non-fetching AMO that is not 128-bit address aligned and not in AAX_OPRND_MODE",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "GET_FR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_GET_FR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_GET_FR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_GET_FR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_GET_FR_ERR_QW,
      ._desc = "Get with flagged response that crosses local cache line boundary or with local address that is not 32-bit aligned",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "GET_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_GET_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_GET_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_GET_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_GET_LEN_ERR_QW,
      ._desc = "Get request that crosses remote cache line boundary or fetching-AMO response size inconsistent with FMA_GOP",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "PUT_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_PUT_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_PUT_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_PUT_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_PUT_LEN_ERR_QW,
      ._desc = "Non-fetching AMO with payload length inconsistent with FMA_OP",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "INV_COM_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_INV_COM_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_INV_COM_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_INV_COM_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_INV_COM_ERR_QW,
      ._desc = "Invalid FMA_OP, FMA_GOP, or CE_OP",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "NPES_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_NPES_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_NPES_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_NPES_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_NPES_ERR_QW,
      ._desc = "Request generated address exceeded PE limit",
      ._type_bitmsk = 0x0000000000020001ull,
      ._access = "RW1"
    },
    { ._name = "PI_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_PI_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_PI_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_PI_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_PI_ADDR_ERR_QW,
      ._desc = "Packet from PI that is not to an FMA address",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1"
    },
    { ._name = "PI_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_PI_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_PI_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_PI_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_PI_LEN_ERR_QW,
      ._desc = "PUT from PI that has no payload",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1"
    },
    { ._name = "SSID_INACTIVE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_SSID_INACTIVE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_SSID_INACTIVE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_SSID_INACTIVE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_SSID_INACTIVE_ERR_QW,
      ._desc = "SSID not allocated and attempt to perform an operation that must be part of an active transaction",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "PI_CMD_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_PI_CMD_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_PI_CMD_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_PI_CMD_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_PI_CMD_ERR_QW,
      ._desc = "Packet from PI that is not a PUT request",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1"
    },
    { ._name = "DB_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_DB_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DB_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DB_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DB_MBE_ERR_QW,
      ._desc = "Multi-bit error on doorbell write data",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "NOPRIV_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_NOPRIV_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_NOPRIV_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_NOPRIV_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_NOPRIV_ERR_QW,
      ._desc = "User attempt to write descriptor or doorbell without privilege to do so",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "SSID_ALLOCID_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_SSID_ALLOCID_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_SSID_ALLOCID_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_SSID_ALLOCID_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_SSID_ALLOCID_ERR_QW,
      ._desc = "Allocate SSID attempt to already active sequence",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "DESC_ENABLE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC_ENABLE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC_ENABLE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC_ENABLE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC_ENABLE_ERR_QW,
      ._desc = "Attempt to use a disabled descriptor",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "PI_BUF_OVERFLOW",
      ._bpos = AR_NIC_FMA_ERR_FLG_PI_BUF_OVERFLOW_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_PI_BUF_OVERFLOW_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_PI_BUF_OVERFLOW_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_PI_BUF_OVERFLOW_QW,
      ._desc = "Processor interface input buffer overflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1"
    },
    { ._name = "DESC_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC_WR_ERR_QW,
      ._desc = "Attempt to write a descriptor or to do a CQ RD INDEX update with a payload size that is not an 8-byte multiple",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "DESC_DB_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC_DB_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC_DB_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC_DB_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC_DB_WR_ERR_QW,
      ._desc = "Attempt to write a doorbell except for FMA_LAUNCH0 with a payload size that is not 8 bytes",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "HDR_PERR",
      ._bpos = AR_NIC_FMA_ERR_FLG_HDR_PERR_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_HDR_PERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_HDR_PERR_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_HDR_PERR_QW,
      ._desc = "Header parity error",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "DATA1IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DATA1IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DATA1IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DATA1IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DATA1IN_MBE_QW,
      ._desc = "Data flit in word 1 multiple bit error",
      ._type_bitmsk = 0x0000000000040001ull,
      ._access = "RW1"
    },
    { ._name = "DATA1IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DATA1IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DATA1IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DATA1IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DATA1IN_SBE_QW,
      ._desc = "Data flit in word 1 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DATA0IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DATA0IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DATA0IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DATA0IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DATA0IN_MBE_QW,
      ._desc = "Data flit in word 0 multiple bit error",
      ._type_bitmsk = 0x0000000000040001ull,
      ._access = "RW1"
    },
    { ._name = "DATA0IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DATA0IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DATA0IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DATA0IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DATA0IN_SBE_QW,
      ._desc = "Data flit in word 0 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DESC88_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC88_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC88_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC88_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC88_MBE_QW,
      ._desc = "Descriptor offset 0x88 multiple bit error",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "DESC88_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC88_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC88_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC88_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC88_SBE_QW,
      ._desc = "Descriptor offset 0x88 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DESC38_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC38_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC38_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC38_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC38_MBE_QW,
      ._desc = "Descriptor offset 0x38 multiple bit error",
      ._type_bitmsk = 0x0000000000200001ull,
      ._access = "RW1"
    },
    { ._name = "DESC38_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC38_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC38_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC38_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC38_SBE_QW,
      ._desc = "Descriptor offset 0x38 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DESC28_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC28_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC28_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC28_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC28_MBE_QW,
      ._desc = "Descriptor offset 0x28 multiple bit error",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "DESC28_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC28_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC28_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC28_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC28_SBE_QW,
      ._desc = "Descriptor offset 0x28 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DESC20_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC20_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC20_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC20_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC20_MBE_QW,
      ._desc = "Descriptor offset 0x20 multiple bit error",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "DESC20_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC20_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC20_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC20_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC20_SBE_QW,
      ._desc = "Descriptor offset 0x20 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DESC18_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC18_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC18_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC18_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC18_MBE_QW,
      ._desc = "Descriptor offset 0x18 multiple bit error",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "DESC18_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC18_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC18_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC18_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC18_SBE_QW,
      ._desc = "Descriptor offset 0x18 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DESC10_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC10_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC10_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC10_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC10_MBE_QW,
      ._desc = "Descriptor offset 0x10 multiple bit error",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "DESC10_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC10_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC10_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC10_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC10_SBE_QW,
      ._desc = "Descriptor offset 0x10 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DESC08_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC08_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC08_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC08_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC08_MBE_QW,
      ._desc = "Descriptor offset 0x08 multiple bit error",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "DESC08_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC08_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC08_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC08_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC08_SBE_QW,
      ._desc = "Descriptor offset 0x08 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DESC00_MBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC00_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC00_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC00_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC00_MBE_QW,
      ._desc = "Descriptor offset 0x00 multiple bit error",
      ._type_bitmsk = 0x0000000000010001ull,
      ._access = "RW1"
    },
    { ._name = "DESC00_SBE",
      ._bpos = AR_NIC_FMA_ERR_FLG_DESC00_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DESC00_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DESC00_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DESC00_SBE_QW,
      ._desc = "Descriptor offset 0x00 single bit error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_NIC_FMA_ERR_FLG_DIAG_ONLY_BP,
      ._mask = AR_NIC_FMA_ERR_FLG_DIAG_ONLY_MASK,
      ._rval = AR_NIC_FMA_ERR_FLG_RSTDATA & AR_NIC_FMA_ERR_FLG_DIAG_ONLY_MASK,
      ._index = AR_NIC_FMA_ERR_FLG_DIAG_ONLY_QW,
      ._desc = "Not written by hardware, software writable",
      ._type_bitmsk = 0x0000000000100001ull,
      ._access = "RW1"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_clr_detail[] = {
    { ._name = "SW_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_SW_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_SW_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_SW_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_SW_ERR_QW,
      ._desc = "Software error detected, set whenever STATUS_SW_ERR is set",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PI_PKT_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_PI_PKT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_PI_PKT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_PI_PKT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_PI_PKT_ERR_QW,
      ._desc = "Packet received from PI with a non-zero LSTATUS",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PI_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_PI_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_PI_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_PI_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_PI_BYTE_PUT_ERR_QW,
      ._desc = "Byte put received from PI that is not to an FMA PUT window",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "AMO_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_AMO_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_AMO_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_AMO_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_AMO_BYTE_PUT_ERR_QW,
      ._desc = "Byte store from PI to PUT window with FMA_OP equal to an AMO",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "GCW_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_GCW_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_GCW_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_GCW_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_GCW_MBE_ERR_QW,
      ._desc = "Multi-bit error on GCW payload flit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PI_GET_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_PI_GET_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_PI_GET_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_PI_GET_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_PI_GET_ADDR_ERR_QW,
      ._desc = "PUT to the FMA GET window that is not 8-byte aligned or is not an 8-byte multiple in length",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "FMA_LAUNCH_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_FMA_LAUNCH_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_FMA_LAUNCH_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_FMA_LAUNCH_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_FMA_LAUNCH_ERR_QW,
      ._desc = "Re-write FMA_LAUNCH0 while FMA_LAUNCH0_STATUS bit is set, or re-write FMA_LAUNCH1 while FMA_LAUNCH1_STATUS bit is set",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "ADDR_ALIGN_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_ADDR_ALIGN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_ADDR_ALIGN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_ADDR_ALIGN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_ADDR_ALIGN_ERR_QW,
      ._desc = "A 64-bit two operand non-fetching AMO that is not 128-bit address aligned and not in AAX_OPRND_MODE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "GET_FR_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_GET_FR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_GET_FR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_GET_FR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_GET_FR_ERR_QW,
      ._desc = "Get with flagged response that crosses local cache line boundary or with local address that is not 32-bit aligned",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "GET_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_GET_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_GET_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_GET_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_GET_LEN_ERR_QW,
      ._desc = "Get request that crosses remote cache line boundary or fetching-AMO response size inconsistent with FMA_GOP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PUT_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_PUT_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_PUT_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_PUT_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_PUT_LEN_ERR_QW,
      ._desc = "Non-fetching AMO with payload length inconsistent with FMA_OP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "INV_COM_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_INV_COM_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_INV_COM_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_INV_COM_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_INV_COM_ERR_QW,
      ._desc = "Invalid FMA_OP, FMA_GOP, or CE_OP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "NPES_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_NPES_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_NPES_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_NPES_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_NPES_ERR_QW,
      ._desc = "Request generated address exceeded PE limit",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PI_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_PI_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_PI_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_PI_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_PI_ADDR_ERR_QW,
      ._desc = "Packet from PI that is not to an FMA address",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PI_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_PI_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_PI_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_PI_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_PI_LEN_ERR_QW,
      ._desc = "PUT from PI that has no payload",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "SSID_INACTIVE_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_SSID_INACTIVE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_SSID_INACTIVE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_SSID_INACTIVE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_SSID_INACTIVE_ERR_QW,
      ._desc = "SSID not allocated and attempt to perform an operation that must be part of an active transaction",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PI_CMD_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_PI_CMD_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_PI_CMD_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_PI_CMD_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_PI_CMD_ERR_QW,
      ._desc = "Packet from PI that is not a PUT request",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DB_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_DB_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DB_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DB_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DB_MBE_ERR_QW,
      ._desc = "Multi-bit error on doorbell write data",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "NOPRIV_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_NOPRIV_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_NOPRIV_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_NOPRIV_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_NOPRIV_ERR_QW,
      ._desc = "User attempt to write descriptor or doorbell without privilege to do so",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "SSID_ALLOCID_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_SSID_ALLOCID_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_SSID_ALLOCID_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_SSID_ALLOCID_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_SSID_ALLOCID_ERR_QW,
      ._desc = "Allocate SSID attempt to already active sequence",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC_ENABLE_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC_ENABLE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC_ENABLE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC_ENABLE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC_ENABLE_ERR_QW,
      ._desc = "Attempt to use a disabled descriptor",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PI_BUF_OVERFLOW",
      ._bpos = AR_NIC_FMA_ERR_CLR_PI_BUF_OVERFLOW_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_PI_BUF_OVERFLOW_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_PI_BUF_OVERFLOW_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_PI_BUF_OVERFLOW_QW,
      ._desc = "Processor interface input buffer overflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC_WR_ERR_QW,
      ._desc = "Attempt to write a descriptor or to do a CQ RD INDEX update with a payload size that is not an 8-byte multiple",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC_DB_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC_DB_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC_DB_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC_DB_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC_DB_WR_ERR_QW,
      ._desc = "Attempt to write a doorbell except for FMA_LAUNCH0 with a payload size that is not 8 bytes",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "HDR_PERR",
      ._bpos = AR_NIC_FMA_ERR_CLR_HDR_PERR_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_HDR_PERR_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_HDR_PERR_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_HDR_PERR_QW,
      ._desc = "Header parity error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DATA1IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DATA1IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DATA1IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DATA1IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DATA1IN_MBE_QW,
      ._desc = "Data flit in word 1 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DATA1IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DATA1IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DATA1IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DATA1IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DATA1IN_SBE_QW,
      ._desc = "Data flit in word 1 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DATA0IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DATA0IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DATA0IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DATA0IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DATA0IN_MBE_QW,
      ._desc = "Data flit in word 0 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DATA0IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DATA0IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DATA0IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DATA0IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DATA0IN_SBE_QW,
      ._desc = "Data flit in word 0 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC88_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC88_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC88_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC88_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC88_MBE_QW,
      ._desc = "Descriptor offset 0x88 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC88_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC88_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC88_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC88_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC88_SBE_QW,
      ._desc = "Descriptor offset 0x88 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC38_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC38_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC38_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC38_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC38_MBE_QW,
      ._desc = "Descriptor offset 0x38 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC38_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC38_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC38_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC38_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC38_SBE_QW,
      ._desc = "Descriptor offset 0x38 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC28_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC28_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC28_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC28_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC28_MBE_QW,
      ._desc = "Descriptor offset 0x28 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC28_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC28_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC28_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC28_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC28_SBE_QW,
      ._desc = "Descriptor offset 0x28 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC20_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC20_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC20_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC20_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC20_MBE_QW,
      ._desc = "Descriptor offset 0x20 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC20_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC20_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC20_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC20_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC20_SBE_QW,
      ._desc = "Descriptor offset 0x20 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC18_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC18_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC18_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC18_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC18_MBE_QW,
      ._desc = "Descriptor offset 0x18 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC18_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC18_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC18_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC18_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC18_SBE_QW,
      ._desc = "Descriptor offset 0x18 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC10_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC10_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC10_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC10_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC10_MBE_QW,
      ._desc = "Descriptor offset 0x10 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC10_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC10_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC10_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC10_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC10_SBE_QW,
      ._desc = "Descriptor offset 0x10 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC08_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC08_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC08_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC08_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC08_MBE_QW,
      ._desc = "Descriptor offset 0x08 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC08_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC08_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC08_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC08_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC08_SBE_QW,
      ._desc = "Descriptor offset 0x08 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC00_MBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC00_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC00_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC00_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC00_MBE_QW,
      ._desc = "Descriptor offset 0x00 multiple bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DESC00_SBE",
      ._bpos = AR_NIC_FMA_ERR_CLR_DESC00_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DESC00_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DESC00_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DESC00_SBE_QW,
      ._desc = "Descriptor offset 0x00 single bit error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_NIC_FMA_ERR_CLR_DIAG_ONLY_BP,
      ._mask = AR_NIC_FMA_ERR_CLR_DIAG_ONLY_MASK,
      ._rval = AR_NIC_FMA_ERR_CLR_RSTDATA & AR_NIC_FMA_ERR_CLR_DIAG_ONLY_MASK,
      ._index = AR_NIC_FMA_ERR_CLR_DIAG_ONLY_QW,
      ._desc = "Not written by hardware, software writable",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_hss_msk_detail[] = {
    { ._name = "SW_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_SW_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_SW_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_SW_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_SW_ERR_QW,
      ._desc = "45:45",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_PKT_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_PI_PKT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_PI_PKT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_PI_PKT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_PI_PKT_ERR_QW,
      ._desc = "44:44",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_PI_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_PI_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_PI_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_PI_BYTE_PUT_ERR_QW,
      ._desc = "43:43",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "AMO_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_AMO_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_AMO_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_AMO_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_AMO_BYTE_PUT_ERR_QW,
      ._desc = "42:42",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "GCW_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_GCW_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_GCW_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_GCW_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_GCW_MBE_ERR_QW,
      ._desc = "41:41",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_GET_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_PI_GET_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_PI_GET_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_PI_GET_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_PI_GET_ADDR_ERR_QW,
      ._desc = "40:40",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "FMA_LAUNCH_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_FMA_LAUNCH_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_FMA_LAUNCH_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_FMA_LAUNCH_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_FMA_LAUNCH_ERR_QW,
      ._desc = "39:39",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "ADDR_ALIGN_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_ADDR_ALIGN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_ADDR_ALIGN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_ADDR_ALIGN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_ADDR_ALIGN_ERR_QW,
      ._desc = "38:38",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "GET_FR_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_GET_FR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_GET_FR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_GET_FR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_GET_FR_ERR_QW,
      ._desc = "37:37",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "GET_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_GET_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_GET_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_GET_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_GET_LEN_ERR_QW,
      ._desc = "36:36",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PUT_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_PUT_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_PUT_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_PUT_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_PUT_LEN_ERR_QW,
      ._desc = "35:35",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "INV_COM_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_INV_COM_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_INV_COM_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_INV_COM_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_INV_COM_ERR_QW,
      ._desc = "34:34",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "NPES_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_NPES_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_NPES_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_NPES_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_NPES_ERR_QW,
      ._desc = "33:33",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_PI_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_PI_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_PI_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_PI_ADDR_ERR_QW,
      ._desc = "32:32",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_PI_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_PI_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_PI_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_PI_LEN_ERR_QW,
      ._desc = "31:31",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "SSID_INACTIVE_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_SSID_INACTIVE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_SSID_INACTIVE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_SSID_INACTIVE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_SSID_INACTIVE_ERR_QW,
      ._desc = "30:30",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_CMD_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_PI_CMD_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_PI_CMD_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_PI_CMD_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_PI_CMD_ERR_QW,
      ._desc = "29:29",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DB_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DB_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DB_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DB_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DB_MBE_ERR_QW,
      ._desc = "28:28",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "NOPRIV_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_NOPRIV_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_NOPRIV_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_NOPRIV_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_NOPRIV_ERR_QW,
      ._desc = "27:27",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "SSID_ALLOCID_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_SSID_ALLOCID_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_SSID_ALLOCID_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_SSID_ALLOCID_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_SSID_ALLOCID_ERR_QW,
      ._desc = "26:26",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC_ENABLE_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC_ENABLE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC_ENABLE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC_ENABLE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC_ENABLE_ERR_QW,
      ._desc = "25:25",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_BUF_OVERFLOW",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_PI_BUF_OVERFLOW_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_PI_BUF_OVERFLOW_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_PI_BUF_OVERFLOW_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_PI_BUF_OVERFLOW_QW,
      ._desc = "24:24",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC_WR_ERR_QW,
      ._desc = "23:23",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC_DB_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC_DB_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC_DB_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC_DB_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC_DB_WR_ERR_QW,
      ._desc = "22:22",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "HDR_PERR",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_HDR_PERR_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_HDR_PERR_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_HDR_PERR_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_HDR_PERR_QW,
      ._desc = "21:21",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA1IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DATA1IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DATA1IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DATA1IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DATA1IN_MBE_QW,
      ._desc = "20:20",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA1IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DATA1IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DATA1IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DATA1IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DATA1IN_SBE_QW,
      ._desc = "19:19",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA0IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DATA0IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DATA0IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DATA0IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DATA0IN_MBE_QW,
      ._desc = "18:18",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA0IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DATA0IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DATA0IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DATA0IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DATA0IN_SBE_QW,
      ._desc = "17:17",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC88_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC88_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC88_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC88_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC88_MBE_QW,
      ._desc = "16:16",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC88_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC88_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC88_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC88_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC88_SBE_QW,
      ._desc = "15:15",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC38_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC38_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC38_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC38_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC38_MBE_QW,
      ._desc = "14:14",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC38_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC38_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC38_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC38_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC38_SBE_QW,
      ._desc = "13:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC28_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC28_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC28_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC28_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC28_MBE_QW,
      ._desc = "12:12",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC28_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC28_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC28_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC28_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC28_SBE_QW,
      ._desc = "11:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC20_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC20_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC20_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC20_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC20_MBE_QW,
      ._desc = "10:10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC20_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC20_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC20_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC20_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC20_SBE_QW,
      ._desc = "9:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC18_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC18_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC18_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC18_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC18_MBE_QW,
      ._desc = "8:8",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC18_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC18_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC18_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC18_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC18_SBE_QW,
      ._desc = "7:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC10_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC10_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC10_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC10_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC10_MBE_QW,
      ._desc = "6:6",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC10_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC10_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC10_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC10_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC10_SBE_QW,
      ._desc = "5:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC08_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC08_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC08_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC08_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC08_MBE_QW,
      ._desc = "4:4",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC08_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC08_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC08_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC08_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC08_SBE_QW,
      ._desc = "3:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC00_MBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC00_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC00_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC00_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC00_MBE_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC00_SBE",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DESC00_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DESC00_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DESC00_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DESC00_SBE_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_NIC_FMA_ERR_HSS_MSK_DIAG_ONLY_BP,
      ._mask = AR_NIC_FMA_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._rval = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA & AR_NIC_FMA_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._index = AR_NIC_FMA_ERR_HSS_MSK_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_os_msk_detail[] = {
    { ._name = "SW_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_SW_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_SW_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_SW_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_SW_ERR_QW,
      ._desc = "45:45",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_PKT_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_PI_PKT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_PI_PKT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_PI_PKT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_PI_PKT_ERR_QW,
      ._desc = "44:44",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_PI_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_PI_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_PI_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_PI_BYTE_PUT_ERR_QW,
      ._desc = "43:43",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "AMO_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_AMO_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_AMO_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_AMO_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_AMO_BYTE_PUT_ERR_QW,
      ._desc = "42:42",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "GCW_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_GCW_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_GCW_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_GCW_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_GCW_MBE_ERR_QW,
      ._desc = "41:41",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_GET_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_PI_GET_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_PI_GET_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_PI_GET_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_PI_GET_ADDR_ERR_QW,
      ._desc = "40:40",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "FMA_LAUNCH_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_FMA_LAUNCH_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_FMA_LAUNCH_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_FMA_LAUNCH_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_FMA_LAUNCH_ERR_QW,
      ._desc = "39:39",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "ADDR_ALIGN_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_ADDR_ALIGN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_ADDR_ALIGN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_ADDR_ALIGN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_ADDR_ALIGN_ERR_QW,
      ._desc = "38:38",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "GET_FR_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_GET_FR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_GET_FR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_GET_FR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_GET_FR_ERR_QW,
      ._desc = "37:37",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "GET_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_GET_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_GET_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_GET_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_GET_LEN_ERR_QW,
      ._desc = "36:36",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PUT_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_PUT_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_PUT_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_PUT_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_PUT_LEN_ERR_QW,
      ._desc = "35:35",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "INV_COM_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_INV_COM_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_INV_COM_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_INV_COM_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_INV_COM_ERR_QW,
      ._desc = "34:34",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "NPES_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_NPES_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_NPES_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_NPES_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_NPES_ERR_QW,
      ._desc = "33:33",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_PI_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_PI_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_PI_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_PI_ADDR_ERR_QW,
      ._desc = "32:32",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_PI_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_PI_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_PI_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_PI_LEN_ERR_QW,
      ._desc = "31:31",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "SSID_INACTIVE_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_SSID_INACTIVE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_SSID_INACTIVE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_SSID_INACTIVE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_SSID_INACTIVE_ERR_QW,
      ._desc = "30:30",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_CMD_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_PI_CMD_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_PI_CMD_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_PI_CMD_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_PI_CMD_ERR_QW,
      ._desc = "29:29",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DB_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DB_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DB_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DB_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DB_MBE_ERR_QW,
      ._desc = "28:28",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "NOPRIV_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_NOPRIV_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_NOPRIV_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_NOPRIV_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_NOPRIV_ERR_QW,
      ._desc = "27:27",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "SSID_ALLOCID_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_SSID_ALLOCID_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_SSID_ALLOCID_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_SSID_ALLOCID_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_SSID_ALLOCID_ERR_QW,
      ._desc = "26:26",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC_ENABLE_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC_ENABLE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC_ENABLE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC_ENABLE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC_ENABLE_ERR_QW,
      ._desc = "25:25",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_BUF_OVERFLOW",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_PI_BUF_OVERFLOW_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_PI_BUF_OVERFLOW_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_PI_BUF_OVERFLOW_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_PI_BUF_OVERFLOW_QW,
      ._desc = "24:24",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC_WR_ERR_QW,
      ._desc = "23:23",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC_DB_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC_DB_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC_DB_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC_DB_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC_DB_WR_ERR_QW,
      ._desc = "22:22",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "HDR_PERR",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_HDR_PERR_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_HDR_PERR_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_HDR_PERR_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_HDR_PERR_QW,
      ._desc = "21:21",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA1IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DATA1IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DATA1IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DATA1IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DATA1IN_MBE_QW,
      ._desc = "20:20",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA1IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DATA1IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DATA1IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DATA1IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DATA1IN_SBE_QW,
      ._desc = "19:19",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA0IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DATA0IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DATA0IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DATA0IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DATA0IN_MBE_QW,
      ._desc = "18:18",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA0IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DATA0IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DATA0IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DATA0IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DATA0IN_SBE_QW,
      ._desc = "17:17",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC88_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC88_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC88_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC88_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC88_MBE_QW,
      ._desc = "16:16",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC88_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC88_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC88_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC88_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC88_SBE_QW,
      ._desc = "15:15",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC38_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC38_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC38_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC38_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC38_MBE_QW,
      ._desc = "14:14",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC38_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC38_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC38_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC38_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC38_SBE_QW,
      ._desc = "13:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC28_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC28_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC28_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC28_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC28_MBE_QW,
      ._desc = "12:12",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC28_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC28_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC28_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC28_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC28_SBE_QW,
      ._desc = "11:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC20_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC20_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC20_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC20_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC20_MBE_QW,
      ._desc = "10:10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC20_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC20_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC20_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC20_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC20_SBE_QW,
      ._desc = "9:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC18_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC18_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC18_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC18_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC18_MBE_QW,
      ._desc = "8:8",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC18_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC18_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC18_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC18_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC18_SBE_QW,
      ._desc = "7:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC10_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC10_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC10_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC10_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC10_MBE_QW,
      ._desc = "6:6",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC10_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC10_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC10_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC10_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC10_SBE_QW,
      ._desc = "5:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC08_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC08_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC08_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC08_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC08_MBE_QW,
      ._desc = "4:4",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC08_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC08_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC08_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC08_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC08_SBE_QW,
      ._desc = "3:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC00_MBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC00_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC00_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC00_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC00_MBE_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC00_SBE",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DESC00_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DESC00_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DESC00_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DESC00_SBE_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_NIC_FMA_ERR_OS_MSK_DIAG_ONLY_BP,
      ._mask = AR_NIC_FMA_ERR_OS_MSK_DIAG_ONLY_MASK,
      ._rval = AR_NIC_FMA_ERR_OS_MSK_RSTDATA & AR_NIC_FMA_ERR_OS_MSK_DIAG_ONLY_MASK,
      ._index = AR_NIC_FMA_ERR_OS_MSK_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_first_flg_detail[] = {
    { ._name = "SW_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_SW_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_SW_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_SW_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_SW_ERR_QW,
      ._desc = "45:45",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_PKT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_PI_PKT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_PI_PKT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_PI_PKT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_PI_PKT_ERR_QW,
      ._desc = "44:44",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_PI_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_PI_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_PI_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_PI_BYTE_PUT_ERR_QW,
      ._desc = "43:43",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "AMO_BYTE_PUT_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_AMO_BYTE_PUT_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_AMO_BYTE_PUT_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_AMO_BYTE_PUT_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_AMO_BYTE_PUT_ERR_QW,
      ._desc = "42:42",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "GCW_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_GCW_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_GCW_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_GCW_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_GCW_MBE_ERR_QW,
      ._desc = "41:41",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_GET_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_PI_GET_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_PI_GET_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_PI_GET_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_PI_GET_ADDR_ERR_QW,
      ._desc = "40:40",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "FMA_LAUNCH_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_FMA_LAUNCH_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_FMA_LAUNCH_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_FMA_LAUNCH_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_FMA_LAUNCH_ERR_QW,
      ._desc = "39:39",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "ADDR_ALIGN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_ADDR_ALIGN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_ADDR_ALIGN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_ADDR_ALIGN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_ADDR_ALIGN_ERR_QW,
      ._desc = "38:38",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "GET_FR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_GET_FR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_GET_FR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_GET_FR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_GET_FR_ERR_QW,
      ._desc = "37:37",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "GET_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_GET_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_GET_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_GET_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_GET_LEN_ERR_QW,
      ._desc = "36:36",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PUT_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_PUT_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_PUT_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_PUT_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_PUT_LEN_ERR_QW,
      ._desc = "35:35",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "INV_COM_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_INV_COM_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_INV_COM_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_INV_COM_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_INV_COM_ERR_QW,
      ._desc = "34:34",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "NPES_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_NPES_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_NPES_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_NPES_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_NPES_ERR_QW,
      ._desc = "33:33",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_ADDR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_PI_ADDR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_PI_ADDR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_PI_ADDR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_PI_ADDR_ERR_QW,
      ._desc = "32:32",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_LEN_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_PI_LEN_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_PI_LEN_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_PI_LEN_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_PI_LEN_ERR_QW,
      ._desc = "31:31",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "SSID_INACTIVE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_SSID_INACTIVE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_SSID_INACTIVE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_SSID_INACTIVE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_SSID_INACTIVE_ERR_QW,
      ._desc = "30:30",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_CMD_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_PI_CMD_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_PI_CMD_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_PI_CMD_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_PI_CMD_ERR_QW,
      ._desc = "29:29",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DB_MBE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DB_MBE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DB_MBE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DB_MBE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DB_MBE_ERR_QW,
      ._desc = "28:28",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "NOPRIV_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_NOPRIV_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_NOPRIV_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_NOPRIV_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_NOPRIV_ERR_QW,
      ._desc = "27:27",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "SSID_ALLOCID_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_SSID_ALLOCID_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_SSID_ALLOCID_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_SSID_ALLOCID_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_SSID_ALLOCID_ERR_QW,
      ._desc = "26:26",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC_ENABLE_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC_ENABLE_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC_ENABLE_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC_ENABLE_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC_ENABLE_ERR_QW,
      ._desc = "25:25",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PI_BUF_OVERFLOW",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_PI_BUF_OVERFLOW_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_PI_BUF_OVERFLOW_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_PI_BUF_OVERFLOW_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_PI_BUF_OVERFLOW_QW,
      ._desc = "24:24",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC_WR_ERR_QW,
      ._desc = "23:23",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC_DB_WR_ERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC_DB_WR_ERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC_DB_WR_ERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC_DB_WR_ERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC_DB_WR_ERR_QW,
      ._desc = "22:22",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "HDR_PERR",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_HDR_PERR_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_HDR_PERR_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_HDR_PERR_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_HDR_PERR_QW,
      ._desc = "21:21",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA1IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DATA1IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DATA1IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DATA1IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DATA1IN_MBE_QW,
      ._desc = "20:20",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA1IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DATA1IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DATA1IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DATA1IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DATA1IN_SBE_QW,
      ._desc = "19:19",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA0IN_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DATA0IN_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DATA0IN_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DATA0IN_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DATA0IN_MBE_QW,
      ._desc = "18:18",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DATA0IN_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DATA0IN_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DATA0IN_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DATA0IN_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DATA0IN_SBE_QW,
      ._desc = "17:17",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC88_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC88_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC88_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC88_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC88_MBE_QW,
      ._desc = "16:16",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC88_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC88_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC88_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC88_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC88_SBE_QW,
      ._desc = "15:15",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC38_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC38_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC38_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC38_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC38_MBE_QW,
      ._desc = "14:14",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC38_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC38_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC38_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC38_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC38_SBE_QW,
      ._desc = "13:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC28_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC28_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC28_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC28_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC28_MBE_QW,
      ._desc = "12:12",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC28_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC28_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC28_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC28_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC28_SBE_QW,
      ._desc = "11:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC20_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC20_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC20_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC20_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC20_MBE_QW,
      ._desc = "10:10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC20_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC20_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC20_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC20_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC20_SBE_QW,
      ._desc = "9:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC18_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC18_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC18_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC18_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC18_MBE_QW,
      ._desc = "8:8",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC18_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC18_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC18_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC18_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC18_SBE_QW,
      ._desc = "7:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC10_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC10_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC10_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC10_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC10_MBE_QW,
      ._desc = "6:6",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC10_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC10_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC10_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC10_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC10_SBE_QW,
      ._desc = "5:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC08_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC08_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC08_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC08_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC08_MBE_QW,
      ._desc = "4:4",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC08_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC08_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC08_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC08_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC08_SBE_QW,
      ._desc = "3:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC00_MBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC00_MBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC00_MBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC00_MBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC00_MBE_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DESC00_SBE",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DESC00_SBE_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DESC00_SBE_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DESC00_SBE_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DESC00_SBE_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_NIC_FMA_ERR_FIRST_FLG_DIAG_ONLY_BP,
      ._mask = AR_NIC_FMA_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._rval = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA & AR_NIC_FMA_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._index = AR_NIC_FMA_ERR_FIRST_FLG_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_info_ram0_detail[] = {
    { ._name = "DESC18_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM0_DESC18_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM0_DESC18_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM0_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM0_DESC18_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM0_DESC18_MBE_SYND_QW,
      ._desc = "Descriptor ram 18 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC18_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM0_DESC18_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM0_DESC18_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM0_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM0_DESC18_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM0_DESC18_SBE_SYND_QW,
      ._desc = "Descriptor ram 18 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC10_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM0_DESC10_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM0_DESC10_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM0_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM0_DESC10_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM0_DESC10_MBE_SYND_QW,
      ._desc = "Descriptor ram 10 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC10_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM0_DESC10_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM0_DESC10_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM0_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM0_DESC10_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM0_DESC10_SBE_SYND_QW,
      ._desc = "Descriptor ram 10 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC08_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM0_DESC08_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM0_DESC08_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM0_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM0_DESC08_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM0_DESC08_MBE_SYND_QW,
      ._desc = "Descriptor ram 08 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC08_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM0_DESC08_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM0_DESC08_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM0_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM0_DESC08_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM0_DESC08_SBE_SYND_QW,
      ._desc = "Descriptor ram 08 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC00_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM0_DESC00_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM0_DESC00_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM0_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM0_DESC00_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM0_DESC00_MBE_SYND_QW,
      ._desc = "Descriptor ram 00 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC00_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM0_DESC00_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM0_DESC00_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM0_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM0_DESC00_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM0_DESC00_SBE_SYND_QW,
      ._desc = "Descriptor ram 00 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_info_ram1_detail[] = {
    { ._name = "DESC88_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM1_DESC88_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM1_DESC88_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM1_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM1_DESC88_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM1_DESC88_MBE_SYND_QW,
      ._desc = "Descriptor ram 88 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC88_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM1_DESC88_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM1_DESC88_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM1_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM1_DESC88_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM1_DESC88_SBE_SYND_QW,
      ._desc = "Descriptor ram 88 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC38_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM1_DESC38_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM1_DESC38_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM1_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM1_DESC38_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM1_DESC38_MBE_SYND_QW,
      ._desc = "Descriptor ram 38 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC38_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM1_DESC38_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM1_DESC38_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM1_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM1_DESC38_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM1_DESC38_SBE_SYND_QW,
      ._desc = "Descriptor ram 38 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC28_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM1_DESC28_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM1_DESC28_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM1_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM1_DESC28_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM1_DESC28_MBE_SYND_QW,
      ._desc = "Descriptor ram 28 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC28_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM1_DESC28_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM1_DESC28_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM1_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM1_DESC28_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM1_DESC28_SBE_SYND_QW,
      ._desc = "Descriptor ram 28 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC20_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM1_DESC20_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM1_DESC20_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM1_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM1_DESC20_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM1_DESC20_MBE_SYND_QW,
      ._desc = "Descriptor ram 20 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DESC20_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_RAM1_DESC20_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_RAM1_DESC20_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_RAM1_RSTDATA & AR_NIC_FMA_ERR_INFO_RAM1_DESC20_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_RAM1_DESC20_SBE_SYND_QW,
      ._desc = "Descriptor ram 20 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_info_data_detail[] = {
    { ._name = "DATA1IN_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_DATA_DATA1IN_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_DATA_DATA1IN_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_DATA_RSTDATA & AR_NIC_FMA_ERR_INFO_DATA_DATA1IN_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_DATA_DATA1IN_MBE_SYND_QW,
      ._desc = "Data path in word 1 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DATA1IN_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_DATA_DATA1IN_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_DATA_DATA1IN_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_DATA_RSTDATA & AR_NIC_FMA_ERR_INFO_DATA_DATA1IN_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_DATA_DATA1IN_SBE_SYND_QW,
      ._desc = "Data path in word 1 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DATA0IN_MBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_DATA_DATA0IN_MBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_DATA_DATA0IN_MBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_DATA_RSTDATA & AR_NIC_FMA_ERR_INFO_DATA_DATA0IN_MBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_DATA_DATA0IN_MBE_SYND_QW,
      ._desc = "Data path in word 0 multiple bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "DATA0IN_SBE_SYND",
      ._bpos = AR_NIC_FMA_ERR_INFO_DATA_DATA0IN_SBE_SYND_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_DATA_DATA0IN_SBE_SYND_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_DATA_RSTDATA & AR_NIC_FMA_ERR_INFO_DATA_DATA0IN_SBE_SYND_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_DATA_DATA0IN_SBE_SYND_QW,
      ._desc = "Data path in word 0 single bit error syndrome bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_info_hdr_detail[] = {
    { ._name = "PERR3",
      ._bpos = AR_NIC_FMA_ERR_INFO_HDR_PERR3_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_HDR_PERR3_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_HDR_RSTDATA & AR_NIC_FMA_ERR_INFO_HDR_PERR3_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_HDR_PERR3_QW,
      ._desc = "Header parity error 3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PERR2",
      ._bpos = AR_NIC_FMA_ERR_INFO_HDR_PERR2_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_HDR_PERR2_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_HDR_RSTDATA & AR_NIC_FMA_ERR_INFO_HDR_PERR2_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_HDR_PERR2_QW,
      ._desc = "Header parity error 2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PERR1",
      ._bpos = AR_NIC_FMA_ERR_INFO_HDR_PERR1_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_HDR_PERR1_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_HDR_RSTDATA & AR_NIC_FMA_ERR_INFO_HDR_PERR1_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_HDR_PERR1_QW,
      ._desc = "Header parity error 1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PERR0",
      ._bpos = AR_NIC_FMA_ERR_INFO_HDR_PERR0_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_HDR_PERR0_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_HDR_RSTDATA & AR_NIC_FMA_ERR_INFO_HDR_PERR0_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_HDR_PERR0_QW,
      ._desc = "Header parity error 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_dbg_errinj_ram_detail[] = {
    { ._name = "ADDRESS",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_ADDRESS_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_ADDRESS_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_ADDRESS_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_ADDRESS_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CHECKBYTE",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_CHECKBYTE_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_CHECKBYTE_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_CHECKBYTE_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_CHECKBYTE_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DESC88",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC88_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC88_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_DESC88_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC88_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DESC38",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC38_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC38_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_DESC38_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC38_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DESC28",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC28_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC28_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_DESC28_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC28_QW,
      ._desc = "Inject errors into descriptor ram 28",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DESC20",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC20_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC20_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_DESC20_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC20_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DESC18",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC18_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC18_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_DESC18_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC18_QW,
      ._desc = "Inject errors into descriptor ram 18",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DESC10",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC10_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC10_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_DESC10_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC10_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DESC08",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC08_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC08_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_DESC08_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC08_QW,
      ._desc = "Inject errors into descriptor ram 08",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DESC00",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC00_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC00_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_DESC00_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_DESC00_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TRIGGERED",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_TRIGGERED_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_TRIGGERED_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_TRIGGERED_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_TRIGGERED_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "MODE",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_MODE_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_MODE_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_MODE_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_MODE_QW,
      ._desc = "Mode 0: Inject error once Mode 1: Inject error always Mode 2: Inject error once if address matches Mode 3: Inject error always if address matches",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_RAM_ENABLE_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_RAM_ENABLE_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_RAM_ENABLE_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_RAM_ENABLE_QW,
      ._desc = "Enable Error Injection",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_dbg_errinj_pkt_detail[] = {
    { ._name = "CHECKBYTEUP",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_PKT_CHECKBYTEUP_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_PKT_CHECKBYTEUP_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_PKT_CHECKBYTEUP_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_PKT_CHECKBYTEUP_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CHECKBYTELO",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_PKT_CHECKBYTELO_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_PKT_CHECKBYTELO_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_PKT_CHECKBYTELO_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_PKT_CHECKBYTELO_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PARITY",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_PKT_PARITY_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_PKT_PARITY_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_PKT_PARITY_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_PKT_PARITY_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TAIL",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_PKT_TAIL_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_PKT_TAIL_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_PKT_TAIL_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_PKT_TAIL_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "COUNT",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_PKT_COUNT_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_PKT_COUNT_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_PKT_COUNT_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_PKT_COUNT_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TRIGGERED",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_PKT_TRIGGERED_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_PKT_TRIGGERED_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_PKT_TRIGGERED_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_PKT_TRIGGERED_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "MODE",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_PKT_MODE_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_PKT_MODE_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_PKT_MODE_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_PKT_MODE_QW,
      ._desc = "Mode 0: Inject error in Nth flit of one packet Mode 1: Inject error in Nth flit of all packets",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE",
      ._bpos = AR_NIC_FMA_DBG_ERRINJ_PKT_ENABLE_BP,
      ._mask = AR_NIC_FMA_DBG_ERRINJ_PKT_ENABLE_MASK,
      ._rval = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTDATA & AR_NIC_FMA_DBG_ERRINJ_PKT_ENABLE_MASK,
      ._index = AR_NIC_FMA_DBG_ERRINJ_PKT_ENABLE_QW,
      ._desc = "Enable Error Injection",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_cfg_credit_detail[] = {
    { ._name = "CQ_COUNT",
      ._bpos = AR_NIC_FMA_CFG_CREDIT_CQ_COUNT_BP,
      ._mask = AR_NIC_FMA_CFG_CREDIT_CQ_COUNT_MASK,
      ._rval = AR_NIC_FMA_CFG_CREDIT_RSTDATA & AR_NIC_FMA_CFG_CREDIT_CQ_COUNT_MASK,
      ._index = AR_NIC_FMA_CFG_CREDIT_CQ_COUNT_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RW,HRO"
    },
    { ._name = "AAX_OPRND_MODE",
      ._bpos = AR_NIC_FMA_CFG_CREDIT_AAX_OPRND_MODE_BP,
      ._mask = AR_NIC_FMA_CFG_CREDIT_AAX_OPRND_MODE_MASK,
      ._rval = AR_NIC_FMA_CFG_CREDIT_RSTDATA & AR_NIC_FMA_CFG_CREDIT_AAX_OPRND_MODE_MASK,
      ._index = AR_NIC_FMA_CFG_CREDIT_AAX_OPRND_MODE_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TARB_INT_COUNT",
      ._bpos = AR_NIC_FMA_CFG_CREDIT_TARB_INT_COUNT_BP,
      ._mask = AR_NIC_FMA_CFG_CREDIT_TARB_INT_COUNT_MASK,
      ._rval = AR_NIC_FMA_CFG_CREDIT_RSTDATA & AR_NIC_FMA_CFG_CREDIT_TARB_INT_COUNT_MASK,
      ._index = AR_NIC_FMA_CFG_CREDIT_TARB_INT_COUNT_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DLA_COUNT",
      ._bpos = AR_NIC_FMA_CFG_CREDIT_DLA_COUNT_BP,
      ._mask = AR_NIC_FMA_CFG_CREDIT_DLA_COUNT_MASK,
      ._rval = AR_NIC_FMA_CFG_CREDIT_RSTDATA & AR_NIC_FMA_CFG_CREDIT_DLA_COUNT_MASK,
      ._index = AR_NIC_FMA_CFG_CREDIT_DLA_COUNT_QW,
      ._desc = "DLA FIFO maximum credit count",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_info_pi_detail[] = {
    { ._name = "LSTATUS",
      ._bpos = AR_NIC_FMA_ERR_INFO_PI_LSTATUS_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_PI_LSTATUS_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_PI_RSTDATA & AR_NIC_FMA_ERR_INFO_PI_LSTATUS_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_PI_LSTATUS_QW,
      ._desc = "LSTATUS, valid when PI_PKT_ERR is set",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_nic_fma_err_info_sw_detail[] = {
    { ._name = "ADDRESS",
      ._bpos = AR_NIC_FMA_ERR_INFO_SW_ADDRESS_BP,
      ._mask = AR_NIC_FMA_ERR_INFO_SW_ADDRESS_MASK,
      ._rval = AR_NIC_FMA_ERR_INFO_SW_RSTDATA & AR_NIC_FMA_ERR_INFO_SW_ADDRESS_MASK,
      ._index = AR_NIC_FMA_ERR_INFO_SW_ADDRESS_QW,
      ._desc = "PI",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};

/*
 *  AR FMA DESC MASK ARRAYS DECLARATIONS
 */
static const uint64_t __ar_nic_fma_cfg_desc_sfma_rval[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTDATA_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_rmsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_RSTMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_wrmsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_WRTMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_rdmsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_RDMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_xsmsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_XSMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_wsemsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_WSEMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_rsemsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_RSEMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_w1smsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_W1SMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_w1cmsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_W1CMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_wrstmsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_WRSTMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_hwwmsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_HWWMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_sfma_hwrmsk[27] = {
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW0,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW1,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW2,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW3,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW4,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW5,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW6,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW7,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW8,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW9,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW10,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW11,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW12,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW13,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW14,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW15,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW16,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW17,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW18,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW19,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW20,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW21,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW22,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW23,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW24,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW25,
	AR_NIC_FMA_CFG_DESC_SFMA_HWRMASK_QW26
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_rval[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RSTDATA_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RSTDATA_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RSTDATA_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_rmsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RSTMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RSTMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RSTMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_wrmsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_WRTMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_WRTMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_WRTMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_rdmsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RDMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RDMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RDMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_xsmsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_XSMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_XSMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_XSMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_wsemsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_WSEMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_WSEMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_WSEMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_rsemsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RSEMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RSEMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_RSEMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_w1smsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_W1SMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_W1SMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_W1SMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_w1cmsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_W1CMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_W1CMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_W1CMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_wrstmsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_WRSTMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_WRSTMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_hwwmsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_HWWMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_HWWMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_HWWMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_hi_fma_hwrmsk[3] = {
	AR_NIC_FMA_MMR_RING_0_HI_FMA_HWRMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_HWRMASK_QW1,
	AR_NIC_FMA_MMR_RING_0_HI_FMA_HWRMASK_QW2
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_rval[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTDATA_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_rmsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_RSTMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_wrmsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_WRTMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_WRTMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_rdmsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_RDMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_RDMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_xsmsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_XSMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_XSMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_wsemsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_WSEMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_WSEMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_rsemsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_RSEMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_RSEMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_w1smsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_W1SMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_W1SMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_w1cmsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_W1CMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_W1CMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_wrstmsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_WRSTMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_hwwmsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_HWWMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_HWWMASK_QW1
};
static const uint64_t __ar_nic_fma_mmr_ring_0_mid_fma_hwrmsk[2] = {
	AR_NIC_FMA_MMR_RING_0_MID_FMA_HWRMASK_QW0,
	AR_NIC_FMA_MMR_RING_0_MID_FMA_HWRMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_rval[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSTDATA_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSTDATA_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSTDATA_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_rmsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSTMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSTMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSTMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_wrmsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_WRTMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_WRTMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_WRTMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_rdmsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RDMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RDMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RDMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_xsmsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_XSMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_XSMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_XSMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_wsemsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_WSEMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_WSEMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_WSEMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_rsemsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSEMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSEMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_RSEMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_w1smsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_W1SMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_W1SMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_W1SMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_w1cmsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_W1CMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_W1CMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_W1CMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_wrstmsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_WRSTMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_WRSTMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_hwwmsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_HWWMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_HWWMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_HWWMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_hi_fma_hwrmsk[3] = {
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_HWRMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_HWRMASK_QW1,
	AR_NIC_FMA_ERR_FLG_1_HI_FMA_HWRMASK_QW2
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_rval[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTDATA_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_rmsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSTMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_wrmsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_WRTMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_WRTMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_rdmsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_RDMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_RDMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_xsmsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_XSMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_XSMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_wsemsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_WSEMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_WSEMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_rsemsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSEMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_RSEMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_w1smsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_W1SMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_W1SMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_w1cmsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_W1CMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_W1CMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_wrstmsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_WRSTMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_hwwmsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_HWWMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_HWWMASK_QW1
};
static const uint64_t __ar_nic_fma_err_flg_1_mid_fma_hwrmsk[2] = {
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_HWRMASK_QW0,
	AR_NIC_FMA_ERR_FLG_1_MID_FMA_HWRMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_rval[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSTDATA_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSTDATA_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSTDATA_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_rmsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSTMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSTMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSTMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_wrmsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_WRTMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_WRTMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_WRTMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_rdmsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RDMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RDMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RDMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_xsmsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_XSMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_XSMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_XSMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_wsemsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_WSEMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_WSEMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_WSEMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_rsemsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSEMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSEMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_RSEMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_w1smsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_W1SMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_W1SMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_W1SMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_w1cmsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_W1CMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_W1CMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_W1CMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_wrstmsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_WRSTMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_WRSTMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_hwwmsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_HWWMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_HWWMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_HWWMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma_hwrmsk[3] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_HWRMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_HWRMASK_QW1,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA_HWRMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_rval[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_RSTDATA_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_RSTDATA_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_rmsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_RSTMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_RSTMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_wrmsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_WRTMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_WRTMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_rdmsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_RDMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_RDMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_xsmsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_XSMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_XSMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_wsemsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_WSEMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_WSEMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_rsemsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_RSEMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_RSEMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_w1smsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_W1SMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_W1SMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_w1cmsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_W1CMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_W1CMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_wrstmsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_WRSTMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_hwwmsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_HWWMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_HWWMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma_hwrmsk[2] = {
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_HWRMASK_QW0,
	AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA_HWRMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_rval[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSTDATA_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSTDATA_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSTDATA_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_rmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSTMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSTMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_wrmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_WRTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_WRTMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_WRTMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_rdmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RDMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RDMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RDMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_xsmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_XSMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_XSMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_XSMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_wsemsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_WSEMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_WSEMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_WSEMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_rsemsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSEMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSEMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_RSEMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_w1smsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_W1SMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_W1SMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_W1SMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_w1cmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_W1CMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_W1CMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_W1CMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_wrstmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_WRSTMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_WRSTMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_hwwmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_HWWMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_HWWMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_HWWMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_hwrmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_HWRMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_HWRMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA_HWRMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_rval[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTDATA_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_rmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSTMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_wrmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_WRTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_WRTMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_rdmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RDMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RDMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_xsmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_XSMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_XSMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_wsemsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_WSEMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_WSEMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_rsemsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSEMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_RSEMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_w1smsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_W1SMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_W1SMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_w1cmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_W1CMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_W1CMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_wrstmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_WRSTMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_hwwmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_HWWMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_HWWMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_hwrmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_HWRMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA_HWRMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_rval[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSTDATA_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSTDATA_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSTDATA_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_rmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSTMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSTMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_wrmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_WRTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_WRTMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_WRTMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_rdmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RDMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RDMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RDMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_xsmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_XSMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_XSMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_XSMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_wsemsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_WSEMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_WSEMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_WSEMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_rsemsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSEMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSEMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_RSEMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_w1smsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_W1SMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_W1SMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_W1SMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_w1cmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_W1CMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_W1CMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_W1CMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_wrstmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_WRSTMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_WRSTMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_hwwmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_HWWMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_HWWMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_HWWMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_hwrmsk[3] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_HWRMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_HWRMASK_QW1,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA_HWRMASK_QW2
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_rval[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RSTDATA_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RSTDATA_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_rmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RSTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RSTMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_wrmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_WRTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_WRTMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_rdmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RDMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RDMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_xsmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_XSMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_XSMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_wsemsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_WSEMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_WSEMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_rsemsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RSEMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_RSEMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_w1smsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_W1SMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_W1SMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_w1cmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_W1CMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_W1CMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_wrstmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_WRSTMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_hwwmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_HWWMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_HWWMASK_QW1
};
static const uint64_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_hwrmsk[2] = {
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_HWRMASK_QW0,
	AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA_HWRMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_rval[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSTDATA_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSTDATA_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSTDATA_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_rmsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSTMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSTMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSTMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_wrmsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_WRTMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_WRTMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_WRTMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_rdmsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RDMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RDMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RDMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_xsmsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_XSMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_XSMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_XSMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_wsemsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_WSEMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_WSEMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_WSEMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_rsemsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSEMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSEMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_RSEMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_w1smsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_W1SMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_W1SMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_W1SMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_w1cmsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_W1CMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_W1CMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_W1CMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_wrstmsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_WRSTMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_WRSTMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_hwwmsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_HWWMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_HWWMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_HWWMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_hwrmsk[3] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_HWRMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_HWRMASK_QW1,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA_HWRMASK_QW2
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_rval[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTDATA_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_rmsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSTMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_wrmsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_WRTMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_WRTMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_rdmsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RDMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RDMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_xsmsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_XSMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_XSMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_wsemsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_WSEMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_WSEMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_rsemsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSEMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_RSEMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_w1smsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_W1SMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_W1SMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_w1cmsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_W1CMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_W1CMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_wrstmsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_WRSTMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_hwwmsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_HWWMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_HWWMASK_QW1
};
static const uint64_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_hwrmsk[2] = {
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_HWRMASK_QW0,
	AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA_HWRMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_rval[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSTDATA_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSTDATA_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSTDATA_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_rmsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSTMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSTMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSTMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_wrmsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_WRTMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_WRTMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_WRTMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_rdmsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RDMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RDMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RDMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_xsmsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_XSMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_XSMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_XSMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_wsemsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_WSEMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_WSEMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_WSEMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_rsemsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSEMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSEMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_RSEMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_w1smsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_W1SMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_W1SMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_W1SMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_w1cmsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_W1CMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_W1CMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_W1CMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_wrstmsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_WRSTMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_WRSTMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_hwwmsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_HWWMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_HWWMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_HWWMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_hwrmsk[3] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_HWRMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_HWRMASK_QW1,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA_HWRMASK_QW2
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_rval[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_RSTDATA_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_RSTDATA_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_rmsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_RSTMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_RSTMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_wrmsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_WRTMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_WRTMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_rdmsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_RDMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_RDMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_xsmsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_XSMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_XSMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_wsemsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_WSEMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_WSEMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_rsemsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_RSEMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_RSEMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_w1smsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_W1SMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_W1SMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_w1cmsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_W1CMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_W1CMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_wrstmsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_WRSTMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_WRSTMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_hwwmsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_HWWMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_HWWMASK_QW1
};
static const uint64_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_hwrmsk[2] = {
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_HWRMASK_QW0,
	AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA_HWRMASK_QW1
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_rval[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTDATA_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_rmsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSTMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_wrmsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRTMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_rdmsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_RDMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_xsmsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_XSMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_wsemsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_WSEMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_rsemsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_RSEMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_w1smsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1SMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_w1cmsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_W1CMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_wrstmsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_WRSTMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_hwwmsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWWMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_flbte_hwrmsk[27] = {
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW0,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW1,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW2,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW3,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW4,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW5,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW6,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW7,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW8,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW9,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW10,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW11,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW12,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW13,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW14,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW15,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW16,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW17,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW18,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW19,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW20,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW21,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW22,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW23,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW24,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW25,
	AR_NIC_FMA_CFG_DESC_FLBTE_HWRMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_rval[27] = {
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW0,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW1,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW2,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW3,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW4,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW5,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW6,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW7,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW8,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW9,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW10,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW11,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW12,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW13,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW14,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW15,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW16,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW17,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW18,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW19,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW20,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW21,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW22,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW23,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW24,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW25,
	AR_NIC_FMA_CFG_DESC_CE_RSTDATA_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_rmsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_RSTMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_wrmsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_WRTMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_rdmsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_RDMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_xsmsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_XSMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_wsemsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_WSEMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_rsemsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_RSEMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_w1smsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_W1SMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_w1cmsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_W1CMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_wrstmsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_WRSTMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_hwwmsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_HWWMASK_QW26
};
static const uint64_t __ar_nic_fma_cfg_desc_ce_hwrmsk[27] = {
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW0,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW1,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW2,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW3,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW4,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW5,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW6,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW7,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW8,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW9,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW10,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW11,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW12,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW13,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW14,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW15,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW16,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW17,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW18,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW19,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW20,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW21,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW22,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW23,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW24,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW25,
	AR_NIC_FMA_CFG_DESC_CE_HWRMASK_QW26
};

/*
 *  AR FMA MMR DECLARATIONS
 */
static const cmmr_br_t __ar_nic_fma_cfg_desc_sfma = {
    ._name = "AR_NIC_FMA_CFG_DESC_SFMA",
    ._addr = AR_NIC_FMA_CFG_DESC_SFMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_sfma_hwrmsk,
    ._nqw = 27,
    ._size = 216,
    ._incr = 4096,
    ._depth = 128,
      ._type_bitmsk = 0x000000000000000bull,
    ._info = __ar_nic_fma_cfg_desc_sfma_detail
};
static const cmmr_br_t __ar_nic_fma_mmr_ring_0_hi_fma = {
    ._name = "AR_NIC_FMA_MMR_RING_0_HI_FMA",
    ._addr = AR_NIC_FMA_MMR_RING_0_HI_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_hi_fma_hwrmsk,
    ._nqw = 3,
    ._size = 24,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_mmr_ring_0_hi_fma_detail
};
static const cmmr_br_t __ar_nic_fma_mmr_ring_0_mid_fma = {
    ._name = "AR_NIC_FMA_MMR_RING_0_MID_FMA",
    ._addr = AR_NIC_FMA_MMR_RING_0_MID_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_mmr_ring_0_mid_fma_hwrmsk,
    ._nqw = 2,
    ._size = 16,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_mmr_ring_0_mid_fma_detail
};
static const cmmr_br_t __ar_nic_fma_mmr_ring_0_lo_fma = {
    ._name = "AR_NIC_FMA_MMR_RING_0_LO_FMA",
    ._addr = AR_NIC_FMA_MMR_RING_0_LO_FMA,
    ._rval.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_MMR_RING_0_LO_FMA_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_mmr_ring_0_lo_fma_detail
};
static const cmmr_br_t __ar_nic_fma_err_flg_1_hi_fma = {
    ._name = "AR_NIC_FMA_ERR_FLG_1_HI_FMA",
    ._addr = AR_NIC_FMA_ERR_FLG_1_HI_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_hi_fma_hwrmsk,
    ._nqw = 3,
    ._size = 24,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_err_flg_1_hi_fma_detail
};
static const cmmr_br_t __ar_nic_fma_err_flg_1_mid_fma = {
    ._name = "AR_NIC_FMA_ERR_FLG_1_MID_FMA",
    ._addr = AR_NIC_FMA_ERR_FLG_1_MID_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_err_flg_1_mid_fma_hwrmsk,
    ._nqw = 2,
    ._size = 16,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_err_flg_1_mid_fma_detail
};
static const cmmr_br_t __ar_nic_fma_err_flg_1_lo_fma = {
    ._name = "AR_NIC_FMA_ERR_FLG_1_LO_FMA",
    ._addr = AR_NIC_FMA_ERR_FLG_1_LO_FMA,
    ._rval.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_FLG_1_LO_FMA_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_err_flg_1_lo_fma_detail
};
static const cmmr_br_t __ar_nic_fma_pi_flit_input_stage_2_hi_fma = {
    ._name = "AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA",
    ._addr = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_HI_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_hi_fma_hwrmsk,
    ._nqw = 3,
    ._size = 24,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_pi_flit_input_stage_2_hi_fma_detail
};
static const cmmr_br_t __ar_nic_fma_pi_flit_input_stage_2_mid_fma = {
    ._name = "AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA",
    ._addr = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_MID_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_flit_input_stage_2_mid_fma_hwrmsk,
    ._nqw = 2,
    ._size = 16,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_pi_flit_input_stage_2_mid_fma_detail
};
static const cmmr_br_t __ar_nic_fma_pi_flit_input_stage_2_lo_fma = {
    ._name = "AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA",
    ._addr = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA,
    ._rval.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_PI_FLIT_INPUT_STAGE_2_LO_FMA_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_pi_flit_input_stage_2_lo_fma_detail
};
static const cmmr_br_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma = {
    ._name = "AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA",
    ._addr = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_HI_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_hwrmsk,
    ._nqw = 3,
    ._size = 24,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma_detail
};
static const cmmr_br_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma = {
    ._name = "AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA",
    ._addr = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_MID_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_hwrmsk,
    ._nqw = 2,
    ._size = 16,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma_detail
};
static const cmmr_br_t __ar_nic_fma_pi_control_decode_desc_read_stage_4_lo_fma = {
    ._name = "AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA",
    ._addr = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA,
    ._rval.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_PI_CONTROL_DECODE_DESC_READ_STAGE_4_LO_FMA_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_pi_control_decode_desc_read_stage_4_lo_fma_detail
};
static const cmmr_br_t __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma = {
    ._name = "AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA",
    ._addr = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_HI_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_hwrmsk,
    ._nqw = 3,
    ._size = 24,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma_detail
};
static const cmmr_br_t __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma = {
    ._name = "AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA",
    ._addr = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_MID_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_hwrmsk,
    ._nqw = 2,
    ._size = 16,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma_detail
};
static const cmmr_br_t __ar_nic_fma_pi_control_data_desc_read_stage_5_lo_fma = {
    ._name = "AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA",
    ._addr = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA,
    ._rval.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_PI_CONTROL_DATA_DESC_READ_STAGE_5_LO_FMA_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_pi_control_data_desc_read_stage_5_lo_fma_detail
};
static const cmmr_br_t __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma = {
    ._name = "AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA",
    ._addr = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_HI_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_hwrmsk,
    ._nqw = 3,
    ._size = 24,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma_detail
};
static const cmmr_br_t __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma = {
    ._name = "AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA",
    ._addr = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_MID_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_hwrmsk,
    ._nqw = 2,
    ._size = 16,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma_detail
};
static const cmmr_br_t __ar_nic_fma_packet_generation_tarb_write_stage_6_lo_fma = {
    ._name = "AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA",
    ._addr = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA,
    ._rval.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_PACKET_GENERATION_TARB_WRITE_STAGE_6_LO_FMA_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_packet_generation_tarb_write_stage_6_lo_fma_detail
};
static const cmmr_br_t __ar_nic_fma_tarb_rd_data_stage_7_hi_fma = {
    ._name = "AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA",
    ._addr = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_HI_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_hi_fma_hwrmsk,
    ._nqw = 3,
    ._size = 24,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_tarb_rd_data_stage_7_hi_fma_detail
};
static const cmmr_br_t __ar_nic_fma_tarb_rd_data_stage_7_mid_fma = {
    ._name = "AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA",
    ._addr = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_MID_FMA,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_tarb_rd_data_stage_7_mid_fma_hwrmsk,
    ._nqw = 2,
    ._size = 16,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_tarb_rd_data_stage_7_mid_fma_detail
};
static const cmmr_br_t __ar_nic_fma_tarb_rd_data_stage_7_lo_fma = {
    ._name = "AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA",
    ._addr = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA,
    ._rval.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_TARB_RD_DATA_STAGE_7_LO_FMA_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_tarb_rd_data_stage_7_lo_fma_detail
};
static const cmmr_br_t __ar_nic_fma_cfg_desc_flbte = {
    ._name = "AR_NIC_FMA_CFG_DESC_FLBTE",
    ._addr = AR_NIC_FMA_CFG_DESC_FLBTE,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_flbte_hwrmsk,
    ._nqw = 27,
    ._size = 216,
    ._incr = 4096,
    ._depth = 128,
      ._type_bitmsk = 0x000000000000000full,
    ._info = __ar_nic_fma_cfg_desc_flbte_detail
};
static const cmmr_br_t __ar_nic_fma_cfg_desc_ce = {
    ._name = "AR_NIC_FMA_CFG_DESC_CE",
    ._addr = AR_NIC_FMA_CFG_DESC_CE,
    ._rval.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_rval,
    ._rmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_rmsk,
    ._wrmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_wrmsk,
    ._rdmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_rdmsk,
    ._xsmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_xsmsk,
    ._wsemsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_wsemsk,
    ._rsemsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_rsemsk,
    ._w1smsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_w1smsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_w1cmsk,
    ._w1cmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_w1cmsk,
    ._wrstmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_wrstmsk,
    ._hwwmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_hwwmsk,
    ._hwrmsk.ptr = (uint64_t *)__ar_nic_fma_cfg_desc_ce_hwrmsk,
    ._nqw = 27,
    ._size = 216,
    ._incr = 4096,
    ._depth = 128,
      ._type_bitmsk = 0x000000000000000dull,
    ._info = __ar_nic_fma_cfg_desc_ce_detail
};
static const cmmr_br_t __ar_nic_fma_err_flg = {
    ._name = "AR_NIC_FMA_ERR_FLG",
    ._addr = AR_NIC_FMA_ERR_FLG,
    ._rval.val = AR_NIC_FMA_ERR_FLG_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_FLG_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_FLG_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_FLG_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_FLG_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_FLG_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_FLG_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_FLG_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_FLG_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_FLG_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_FLG_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x00000000003fc011ull,
    ._info = __ar_nic_fma_err_flg_detail
};
static const cmmr_br_t __ar_nic_fma_err_clr = {
    ._name = "AR_NIC_FMA_ERR_CLR",
    ._addr = AR_NIC_FMA_ERR_CLR,
    ._rval.val = AR_NIC_FMA_ERR_CLR_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_CLR_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_CLR_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_CLR_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_CLR_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_CLR_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_CLR_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_CLR_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_CLR_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_CLR_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_CLR_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_CLR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000021ull,
    ._info = __ar_nic_fma_err_clr_detail
};
static const cmmr_br_t __ar_nic_fma_err_hss_msk = {
    ._name = "AR_NIC_FMA_ERR_HSS_MSK",
    ._addr = AR_NIC_FMA_ERR_HSS_MSK,
    ._rval.val = AR_NIC_FMA_ERR_HSS_MSK_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_HSS_MSK_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_HSS_MSK_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_HSS_MSK_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_HSS_MSK_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_HSS_MSK_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_HSS_MSK_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_HSS_MSK_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_HSS_MSK_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_HSS_MSK_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_HSS_MSK_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_HSS_MSK_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000041ull,
    ._info = __ar_nic_fma_err_hss_msk_detail
};
static const cmmr_br_t __ar_nic_fma_err_os_msk = {
    ._name = "AR_NIC_FMA_ERR_OS_MSK",
    ._addr = AR_NIC_FMA_ERR_OS_MSK,
    ._rval.val = AR_NIC_FMA_ERR_OS_MSK_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_OS_MSK_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_OS_MSK_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_OS_MSK_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_OS_MSK_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_OS_MSK_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_OS_MSK_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_OS_MSK_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_OS_MSK_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_OS_MSK_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_OS_MSK_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_OS_MSK_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000081ull,
    ._info = __ar_nic_fma_err_os_msk_detail
};
static const cmmr_br_t __ar_nic_fma_err_first_flg = {
    ._name = "AR_NIC_FMA_ERR_FIRST_FLG",
    ._addr = AR_NIC_FMA_ERR_FIRST_FLG,
    ._rval.val = AR_NIC_FMA_ERR_FIRST_FLG_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_FIRST_FLG_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_FIRST_FLG_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_FIRST_FLG_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_FIRST_FLG_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_FIRST_FLG_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_FIRST_FLG_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_FIRST_FLG_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_FIRST_FLG_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_FIRST_FLG_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_FIRST_FLG_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_FIRST_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000401ull,
    ._info = __ar_nic_fma_err_first_flg_detail
};
static const cmmr_br_t __ar_nic_fma_err_info_ram0 = {
    ._name = "AR_NIC_FMA_ERR_INFO_RAM0",
    ._addr = AR_NIC_FMA_ERR_INFO_RAM0,
    ._rval.val = AR_NIC_FMA_ERR_INFO_RAM0_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_INFO_RAM0_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_INFO_RAM0_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_INFO_RAM0_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_INFO_RAM0_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_INFO_RAM0_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_INFO_RAM0_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_INFO_RAM0_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_INFO_RAM0_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_INFO_RAM0_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_INFO_RAM0_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_INFO_RAM0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_err_info_ram0_detail
};
static const cmmr_br_t __ar_nic_fma_err_info_ram1 = {
    ._name = "AR_NIC_FMA_ERR_INFO_RAM1",
    ._addr = AR_NIC_FMA_ERR_INFO_RAM1,
    ._rval.val = AR_NIC_FMA_ERR_INFO_RAM1_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_INFO_RAM1_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_INFO_RAM1_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_INFO_RAM1_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_INFO_RAM1_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_INFO_RAM1_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_INFO_RAM1_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_INFO_RAM1_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_INFO_RAM1_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_INFO_RAM1_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_INFO_RAM1_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_INFO_RAM1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_err_info_ram1_detail
};
static const cmmr_br_t __ar_nic_fma_err_info_data = {
    ._name = "AR_NIC_FMA_ERR_INFO_DATA",
    ._addr = AR_NIC_FMA_ERR_INFO_DATA,
    ._rval.val = AR_NIC_FMA_ERR_INFO_DATA_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_INFO_DATA_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_INFO_DATA_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_INFO_DATA_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_INFO_DATA_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_INFO_DATA_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_INFO_DATA_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_INFO_DATA_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_INFO_DATA_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_INFO_DATA_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_INFO_DATA_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_INFO_DATA_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_err_info_data_detail
};
static const cmmr_br_t __ar_nic_fma_err_info_hdr = {
    ._name = "AR_NIC_FMA_ERR_INFO_HDR",
    ._addr = AR_NIC_FMA_ERR_INFO_HDR,
    ._rval.val = AR_NIC_FMA_ERR_INFO_HDR_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_INFO_HDR_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_INFO_HDR_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_INFO_HDR_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_INFO_HDR_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_INFO_HDR_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_INFO_HDR_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_INFO_HDR_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_INFO_HDR_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_INFO_HDR_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_INFO_HDR_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_INFO_HDR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000001001ull,
    ._info = __ar_nic_fma_err_info_hdr_detail
};
static const cmmr_br_t __ar_nic_fma_dbg_errinj_ram = {
    ._name = "AR_NIC_FMA_DBG_ERRINJ_RAM",
    ._addr = AR_NIC_FMA_DBG_ERRINJ_RAM,
    ._rval.val = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_DBG_ERRINJ_RAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000001001ull,
    ._info = __ar_nic_fma_dbg_errinj_ram_detail
};
static const cmmr_br_t __ar_nic_fma_dbg_errinj_pkt = {
    ._name = "AR_NIC_FMA_DBG_ERRINJ_PKT",
    ._addr = AR_NIC_FMA_DBG_ERRINJ_PKT,
    ._rval.val = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_DBG_ERRINJ_PKT_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000001001ull,
    ._info = __ar_nic_fma_dbg_errinj_pkt_detail
};
static const cmmr_br_t __ar_nic_fma_cfg_credit = {
    ._name = "AR_NIC_FMA_CFG_CREDIT",
    ._addr = AR_NIC_FMA_CFG_CREDIT,
    ._rval.val = AR_NIC_FMA_CFG_CREDIT_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_CFG_CREDIT_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_CFG_CREDIT_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_CFG_CREDIT_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_CFG_CREDIT_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_CFG_CREDIT_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_CFG_CREDIT_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_CFG_CREDIT_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_CFG_CREDIT_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_CFG_CREDIT_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_CFG_CREDIT_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_CFG_CREDIT_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000001001ull,
    ._info = __ar_nic_fma_cfg_credit_detail
};
static const cmmr_br_t __ar_nic_fma_err_info_pi = {
    ._name = "AR_NIC_FMA_ERR_INFO_PI",
    ._addr = AR_NIC_FMA_ERR_INFO_PI,
    ._rval.val = AR_NIC_FMA_ERR_INFO_PI_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_INFO_PI_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_INFO_PI_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_INFO_PI_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_INFO_PI_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_INFO_PI_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_INFO_PI_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_INFO_PI_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_INFO_PI_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_INFO_PI_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_INFO_PI_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_INFO_PI_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_err_info_pi_detail
};
static const cmmr_br_t __ar_nic_fma_err_info_sw = {
    ._name = "AR_NIC_FMA_ERR_INFO_SW",
    ._addr = AR_NIC_FMA_ERR_INFO_SW,
    ._rval.val = AR_NIC_FMA_ERR_INFO_SW_RSTDATA,
    ._rmsk.val = AR_NIC_FMA_ERR_INFO_SW_RSTMASK,
    ._wrmsk.val = AR_NIC_FMA_ERR_INFO_SW_WRTMASK,
    ._rdmsk.val = AR_NIC_FMA_ERR_INFO_SW_RDMASK,
    ._xsmsk.val = AR_NIC_FMA_ERR_INFO_SW_XSMASK,
    ._wsemsk.val = AR_NIC_FMA_ERR_INFO_SW_WSEMASK,
    ._rsemsk.val = AR_NIC_FMA_ERR_INFO_SW_RSEMASK,
    ._w1smsk.val = AR_NIC_FMA_ERR_INFO_SW_W1SMASK,
    ._w1cmsk.val = AR_NIC_FMA_ERR_INFO_SW_W1CMASK,
    ._wrstmsk.val = AR_NIC_FMA_ERR_INFO_SW_WRSTMASK,
    ._hwwmsk.val = AR_NIC_FMA_ERR_INFO_SW_HWWMASK,
    ._hwrmsk.val = AR_NIC_FMA_ERR_INFO_SW_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_nic_fma_err_info_sw_detail
};

/*
 *  INSTALL AR FMA MMRS
 */
static const cmmr_br_t* __ar_fma_mmrs[] = {
    &__ar_nic_fma_cfg_desc_sfma,
    &__ar_nic_fma_cfg_desc_flbte,
    &__ar_nic_fma_cfg_desc_ce,
    &__ar_nic_fma_err_flg,
    &__ar_nic_fma_err_clr,
    &__ar_nic_fma_err_hss_msk,
    &__ar_nic_fma_err_os_msk,
    &__ar_nic_fma_err_first_flg,
    &__ar_nic_fma_err_info_ram0,
    &__ar_nic_fma_err_info_ram1,
    &__ar_nic_fma_err_info_data,
    &__ar_nic_fma_err_info_hdr,
    &__ar_nic_fma_dbg_errinj_ram,
    &__ar_nic_fma_dbg_errinj_pkt,
    &__ar_nic_fma_cfg_credit,
    &__ar_nic_fma_err_info_pi,
    &__ar_nic_fma_err_info_sw,
    NULL
};

/*
 *  INSTALL AR FMA LM MUX SELECT ENCODINGS
 */
static const cmmr_br_t* __ar_fma_enc_mmrs[] = {
    &__ar_nic_fma_mmr_ring_0_hi_fma,
    &__ar_nic_fma_mmr_ring_0_mid_fma,
    &__ar_nic_fma_mmr_ring_0_lo_fma,
    &__ar_nic_fma_err_flg_1_hi_fma,
    &__ar_nic_fma_err_flg_1_mid_fma,
    &__ar_nic_fma_err_flg_1_lo_fma,
    &__ar_nic_fma_pi_flit_input_stage_2_hi_fma,
    &__ar_nic_fma_pi_flit_input_stage_2_mid_fma,
    &__ar_nic_fma_pi_flit_input_stage_2_lo_fma,
    &__ar_nic_fma_pi_control_decode_desc_read_stage_4_hi_fma,
    &__ar_nic_fma_pi_control_decode_desc_read_stage_4_mid_fma,
    &__ar_nic_fma_pi_control_decode_desc_read_stage_4_lo_fma,
    &__ar_nic_fma_pi_control_data_desc_read_stage_5_hi_fma,
    &__ar_nic_fma_pi_control_data_desc_read_stage_5_mid_fma,
    &__ar_nic_fma_pi_control_data_desc_read_stage_5_lo_fma,
    &__ar_nic_fma_packet_generation_tarb_write_stage_6_hi_fma,
    &__ar_nic_fma_packet_generation_tarb_write_stage_6_mid_fma,
    &__ar_nic_fma_packet_generation_tarb_write_stage_6_lo_fma,
    &__ar_nic_fma_tarb_rd_data_stage_7_hi_fma,
    &__ar_nic_fma_tarb_rd_data_stage_7_mid_fma,
    &__ar_nic_fma_tarb_rd_data_stage_7_lo_fma,
    NULL
};

#endif
