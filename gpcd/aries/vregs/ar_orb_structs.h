/******************************************************************************
 * COPYRIGHT CRAY INC. ar_orb_structs.h
 * FILE: ar_orb_structs.h
 * Created by v2h.c on Wed Oct  8 14:39:02 2014
 ******************************************************************************/

#ifndef _AR_ORB_STRUCTS_H_
#define _AR_ORB_STRUCTS_H_

/*
 *  ARIES ORB STRUCTURES
 */
typedef union ar_nic_orb_cfg_params_desc {
    struct {
        // QW0
        uint64_t orb_to_nl_crdts          : 8;	/* The maximum number of credits on the ORB-to-NL interface */
        uint64_t orb_to_rat_crdts         : 8;	/* The maximum number of credits on the ORB-to-RAT interface */
        uint64_t latency_cntr_step_size   :28;	/* This register selects the rate at which the ORB Latency Counter increments */
        uint64_t max_pid_cnt              :11;	/* The maximum number of pktIDs allowed to be in use */
        uint64_t sf_req_fifo_en           : 1;	/* If set to 1'b1, forces the Request FIFO to wait for an entire packet to be in the queue before proceeding */
        uint64_t req_fifo_dq_crdt_min     : 4;	/* The minimum number of credits that must be available on the ORB to NL interface before the ORB dequeues a packet */
        uint64_t disable_req_ecc_chk      : 1;	/* If set to 1'b1, disables SECDED and parity checking and correction for request flits */
        uint64_t disable_req_ecc_gen      : 1;	/* If set to 1'b1, disables parity generation for request flits */
        uint64_t disable_rsp_ecc_chk      : 1;	/* If set to 1'b1, disables SECDED and parity checking and correction for response flits */
        uint64_t disable_rsp_ecc_gen      : 1;	/* If set to 1'b1, disables check-bit and parity generation for response flits */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_params_desc_t;

typedef union ar_nic_orb_cfg_ord_scrub_ctrl_desc {
    struct {
        // QW0
        uint64_t scrub_rate               :32;	/* Sets the maximum value to which the counter in the ORD (Outstanding Request Data) counts to before initiating the scrub process for a given location in the Outstanding Request Data RAM */
        uint64_t next_scrub_addr          :10;	/* The value of the address checked to see if a scrub is needed */
        uint64_t disable                  : 1;	/* When set the ORD Scrubber is disabled */
        uint64_t scrub_notify_only        : 1;	/* When set the ORD Scrubber, if an entry is determined to be stale, sets the ORD_TIMEOUT flag */
        uint64_t undefine_63_44           :20;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_ord_scrub_ctrl_desc_t;

typedef union ar_nic_orb_cfg_net_rsp_hist_1_desc {
    struct {
        // QW0
        uint64_t undefine_15_0            :16;	/* undefined */
        uint64_t bin1_min                 :16;	/* Boundary between bin 0 and bin 1 */
        uint64_t bin2_min                 :16;	/* Boundary between bin 1 and bin 2 */
        uint64_t bin3_min                 :16;	/* Boundary between bin 2 and bin 3 */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_net_rsp_hist_1_desc_t;

typedef union ar_nic_orb_cfg_net_rsp_hist_2_desc {
    struct {
        // QW0
        uint64_t bin4_min                 :16;	/* Boundary between bin 3 and bin 4 */
        uint64_t bin5_min                 :16;	/* Boundary between bin 4 and bin 5 */
        uint64_t bin6_min                 :16;	/* Boundary between bin 5 and bin 6 */
        uint64_t bin7_min                 :16;	/* Boundary between bin 6 and bin 7 */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_net_rsp_hist_2_desc_t;

typedef union ar_nic_orb_cfg_net_rsp_hist_ovf_desc {
    struct {
        // QW0
        uint64_t bin0_ovf                 : 1;	/* Indicates the 32-bit bin 0 has overflowed */
        uint64_t bin1_ovf                 : 1;	/* Indicates the 32-bit bin 1 has overflowed */
        uint64_t bin2_ovf                 : 1;	/* Indicates the 32-bit bin 2 has overflowed */
        uint64_t bin3_ovf                 : 1;	/* Indicates the 32-bit bin 3 has overflowed */
        uint64_t bin4_ovf                 : 1;	/* Indicates the 32-bit bin 4 has overflowed */
        uint64_t bin5_ovf                 : 1;	/* Indicates the 32-bit bin 5 has overflowed */
        uint64_t bin6_ovf                 : 1;	/* Indicates the 32-bit bin 6 has overflowed */
        uint64_t bin7_ovf                 : 1;	/* Indicates the 32-bit bin 7 has overflowed */
        uint64_t undefine_63_8            :56;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_net_rsp_hist_ovf_desc_t;

typedef union ar_nic_orb_cfg_flagged_rsp_desc {
    struct {
        // QW0
        uint64_t fr_flg                   :32;	/* 32-bit flag inserted into GET responses generated by the FMA when the fr bit is set */
        uint64_t undefine_63_32           :32;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_flagged_rsp_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_comp_0_desc {
    struct {
        // QW0
        uint64_t dst                      :16;	/* Destination Endpoint */
        uint64_t dstid                    : 2;	/* Destination Core Identifier */
        uint64_t ptag                     : 8;	/* Protection Tag */
        uint64_t pkt_src                  : 2;	/* Packet Source */
        uint64_t reserved_33_28           : 6;	/* Reserved[33:28] */
        uint64_t ntt                      : 1;	/* Node Translation Table Enable */
        uint64_t p0                       : 1;	/* Parity Bit 0 */
        uint64_t addr_33_6                :28;	/* Address[33:6] */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_comp_0_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_comp_1_desc {
    struct {
        // QW0
        uint64_t addr_39_34               : 6;	/* Address[39:34] */
        uint64_t uv                       : 1;	/* Upper Valid */
        uint64_t p1                       : 1;	/* Parity Bit 1 */
        uint64_t reqcmd                   : 9;	/* Request Command */
        uint64_t rc2                      : 1;	/* Routing Control Bit 2 */
        uint64_t mdh                      :12;	/* Memory Domain Handle */
        uint64_t reserved_41_30           :12;	/* Reserved[105:94] */
        uint64_t rc0                      : 1;	/* Routing Control Bit 0 */
        uint64_t p2                       : 1;	/* Parity Bit 2 */
        uint64_t cnt_bm                   : 4;	/* Count/Byte-mask */
        uint64_t addr_5_2                 : 4;	/* Address[5:2] */
        uint64_t ssid                     : 9;	/* Synchronization Sequence Identifier */
        uint64_t reserved_63_61           : 3;	/* Reserved[127:125] */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_comp_1_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_comp_2_desc {
    struct {
        // QW0
        uint64_t reserved_7_0             : 8;	/* Reserved[135:128] */
        uint64_t lstatus                  : 6;	/* Local Status */
        uint64_t rc1                      : 1;	/* Routing Control Bit 1 */
        uint64_t p3                       : 1;	/* Parity Bit 3 */
        uint64_t undefine_17_16           : 2;	/* undefined */
        uint64_t en                       : 1;	/* Enable performance tracking comparisons for SSID-to-ORB Local Address Flit or Request Header Flit */
        uint64_t undefine_63_19           :45;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_comp_2_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_mask_0_desc {
    struct {
        // QW0
        uint64_t dst                      :16;	/* Destination Endpoint Mask */
        uint64_t dstid_msk                : 2;	/* Destination Core Identifier Mask */
        uint64_t ptag_msk                 : 8;	/* Protection Tag Mask */
        uint64_t pkt_src_msk              : 2;	/* Packet Source Mask */
        uint64_t reserved_33_28           : 6;	/* Reserved[33:28] Mask */
        uint64_t ntt_msk                  : 1;	/* Node Translation Table Enable Mask */
        uint64_t p0_msk                   : 1;	/* Parity Bit 0 Mask */
        uint64_t addr_33_6_msk            :28;	/* Address[33:6] Mask */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_mask_0_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_mask_1_desc {
    struct {
        // QW0
        uint64_t addr_39_34_msk           : 6;	/* Address[39:34] Mask */
        uint64_t uv_msk                   : 1;	/* Upper Valid Mask */
        uint64_t p1_msk                   : 1;	/* Parity Bit 1 Mask */
        uint64_t reqcmd_msk               : 9;	/* Request Command Mask */
        uint64_t rc2_msk                  : 1;	/* Routing Control Bit 2 Mask */
        uint64_t mdh_msk                  :12;	/* Memory Domain Handle Mask */
        uint64_t reserved_41_30           :12;	/* Reserved[105:94] Mask */
        uint64_t rc0_msk                  : 1;	/* Routing Control Bit 0 Mask */
        uint64_t p2_msk                   : 1;	/* Parity Bit 2 Mask */
        uint64_t cnt_bm_msk               : 4;	/* Count/Byte-mask Mask */
        uint64_t addr_5_2_msk             : 4;	/* Address[5:2] Mask */
        uint64_t ssid_msk                 : 9;	/* Synchronization Sequence Identifier Mask */
        uint64_t reserved_63_61           : 3;	/* Reserved[127:125] Mask */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_mask_1_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_mask_2_desc {
    struct {
        // QW0
        uint64_t reserved_7_0             : 8;	/* Reserved[135:128] Mask */
        uint64_t lstatus_msk              : 6;	/* Local Status Mask */
        uint64_t rc1_msk                  : 1;	/* Routing Control Bit 1 Mask */
        uint64_t p3_msk                   : 1;	/* Parity Bit 3 Mask */
        uint64_t undefine_63_16           :48;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_mask_2_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_comp_3_desc {
    struct {
        // QW0
        uint64_t reserved_17_0            :18;	/* Reserved[17:0] */
        uint64_t lptag                    : 8;	/* Local Protection Tag */
        uint64_t reserved_35_26           :10;	/* Reserved[35:26] */
        uint64_t laddr_27_0               :28;	/* Local Address[27:0] */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_comp_3_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_comp_4_desc {
    struct {
        // QW0
        uint64_t ecc0                     : 8;	/* Error Correction Code 0 */
        uint64_t reserved_17_8            :10;	/* Reserved[81:72] */
        uint64_t lmdh                     :12;	/* Local Memory Domain Handle */
        uint64_t laddr_39_28              :12;	/* Local Address[39:28] */
        uint64_t fr                       : 1;	/* Flagged Response */
        uint64_t reserved_43              : 1;	/* Reserved[107] */
        uint64_t lcnt                     : 4;	/* Local 32-bit Word Count  */
        uint64_t reserved_63_48           :16;	/* Reserved[127:112] */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_comp_4_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_comp_5_desc {
    struct {
        // QW0
        uint64_t reserved_6_0             : 7;	/* Reserved[134:128] */
        uint64_t lwc                      : 1;	/* Write Combine */
        uint64_t ecc1                     : 8;	/* Error Correction Code 1 */
        uint64_t undefine_17_16           : 2;	/* undefined */
        uint64_t en                       : 1;	/* Enable performance tracking comparisons for SSID-to-ORB Local Address Flit or Request Header Flit */
        uint64_t undefine_63_19           :45;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_comp_5_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_mask_3_desc {
    struct {
        // QW0
        uint64_t reserved_17_0            :18;	/* Reserved[17:0] Mask */
        uint64_t lptag_msk                : 8;	/* Local Protection Tag Mask */
        uint64_t reserved_35_26           :10;	/* Reserved[35:26] Mask */
        uint64_t laddr_27_0_msk           :28;	/* Local Address[27:0] Mask */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_mask_3_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_mask_4_desc {
    struct {
        // QW0
        uint64_t ecc0_msk                 : 8;	/* Error Correction Code 0 Mask */
        uint64_t reserved_17_8            :10;	/* Reserved[81:72] Mask */
        uint64_t lmdh_msk                 :12;	/* Local Memory Domain Handle Mask */
        uint64_t laddr_39_28_msk          :12;	/* Local Address[39:28] Mask */
        uint64_t fr_msk                   : 1;	/* Flagged Response Mask */
        uint64_t reserved_43              : 1;	/* Reserved[107] Mask */
        uint64_t lcnt_msk                 : 4;	/* Local 32-bit Word Count  */
        uint64_t reserved_63_48           :16;	/* Reserved[127:112] Mask */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_mask_4_desc_t;

typedef union ar_nic_orb_cfg_prf_trk_mask_5_desc {
    struct {
        // QW0
        uint64_t reserved_6_0             : 7;	/* Reserved[134:128] Mask */
        uint64_t lwc_msk                  : 1;	/* Write Combine */
        uint64_t ecc1_msk                 : 8;	/* Error Correction Code 1 Mask */
        uint64_t undefine_63_16           :48;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_prf_trk_mask_5_desc_t;

typedef union ar_nic_orb_dbg_ord_ram_access_desc {
    struct {
        // QW0
        uint64_t idx                      :10;	/*  */
        uint64_t read0_write1             : 1;	/* If this bit is set to zero when this MMR is written, the contents of A_NIC_ORB_DBG_ORD_RAM_LO and A_NIC_ORB_DBG_ORD_RAM_UP are updated with the state of the ORB Outstanding Request Data RAM as indexed by bits 9:0 of the MMR */
        uint64_t undefine_63_11           :53;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_ram_access_desc_t;

typedef union ar_nic_orb_dbg_ord_ram_lo_desc {
    struct {
        // QW0
        uint64_t timecnt                  :16;	/* Time Count */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t trk_rsp                  : 1;	/* Track Response */
        uint64_t mdh                      :12;	/* MDH for PUTs or lMDH for GETs or Fetching AMOs */
        uint64_t ssid                     : 9;	/* Synchronization Sequence Identifier */
        uint64_t undefine_62_41           :22;	/* undefined */
        uint64_t mbe_detected             : 1;	/* The previous write to the A_NIC_ORB_DBG_ORD_RAM_ACCESS MMR with READ0_WRITE1 set to 1'b0 resulted in an MBE when data was read from the ORB Data RAM */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_ram_lo_desc_t;

typedef union ar_nic_orb_dbg_ord_ram_up_desc {
    struct {
        // QW0 - OVERLOADED FIELDS
        union {
            struct {
                uint64_t lcnt                     : 4;	/* Local 32-bit Word Count Minus One */
                uint64_t addr_get_39_0            :40;	/* GET Address bits 39:0 */
                uint64_t lptag                    : 8;	/* Local Protection Tag */
                uint64_t fr_err                   : 1;	/* Flagged Response Error */
                uint64_t fr                       : 1;	/* Flagged Response */
                uint64_t wc                       : 1;	/* Write Combine */
                uint64_t undefine_62_55           : 8;	/* undefined */
                uint64_t mbe_detected             : 1;	/* The previous write to the A_NIC_ORB_DBG_ORD_RAM_ACCESS MMR with READ0_WRITE1 set to 1'b0 resulted in an MBE when data was read from the ORB Data RAM */
            };
            struct {
                uint64_t dst                      :16;	/* Destination */
                uint64_t addr_put_39_12           :28;	/* PUT Address bits 39:12 */
                uint64_t dstid                    : 2;	/* Destination Core Identifier */
                uint64_t ntt                      : 1;	/* Node Translation Table Lookup Enable */
                uint64_t f                        : 1;	/* First Request in Message */
                uint64_t void_54_48               : 7;	/* Unused */
                uint64_t undefine_q0_f1_63_55     : 9;	/* undefined */
            };
        };
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_ram_up_desc_t;

typedef union ar_nic_orb_dbg_crdt_params_desc {
    struct {
        // QW0
        uint64_t orb_to_nl_crdts_in_use   : 8;	/* The register provides the current number of flit credits that are being used on the ORB-to-NL interface */
        uint64_t orb_to_rat_crdts_in_use  : 8;	/* The register provides the current number of flit credits that are being used on the ORB-to-RAT interface */
        uint64_t undefine_63_16           :48;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_crdt_params_desc_t;

typedef union ar_nic_orb_dbg_errinj_ord_desc {
    struct {
        // QW0
        uint64_t enable                   : 1;	/* Enable Error Injection */
        uint64_t mode                     : 2;	/* Mode 0: Inject error once Mode 1: Inject error always Mode 2: Inject error once if address matches Mode 3: Inject error always if address matches */
        uint64_t triggered                : 1;	/* This status bit should be clear when the MMR is written by software */
        uint64_t undefine_15_4            :12;	/* undefined */
        uint64_t checkbits                : 8;	/* When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome for the memory address read to be inverted */
        uint64_t undefine_31_24           : 8;	/* undefined */
        uint64_t address                  :10;	/* This field indicates the address within the memory for which error injection is to occur */
        uint64_t undefine_63_42           :22;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_errinj_ord_desc_t;

typedef union ar_nic_orb_dbg_errinj_rsp_pipe_desc {
    struct {
        // QW0
        uint64_t enable                   : 1;	/* Enable Error Injection for Response Pipeline */
        uint64_t mode                     : 1;	/* Mode 0: Inject error in Nth flit of one packet Mode 1: Inject error in Nth flit of all packets */
        uint64_t undefine_2_2             : 1;	/* undefined */
        uint64_t triggered                : 1;	/* This status bit should be clear when the MMR is written by software */
        uint64_t count                    : 3;	/* Flit in which to inject the error */
        uint64_t undefine_11_7            : 5;	/* undefined */
        uint64_t parity                   : 2;	/* When an error is injected, each bit that is set to one in this field causes the corresponding bit of the parity in the header to be inverted */
        uint64_t undefine_15_14           : 2;	/* undefined */
        uint64_t checkbitslo              : 8;	/* When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome for data bits 63:0 to be inverted */
        uint64_t checkbitsup              : 8;	/* When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome for data bits 135:72 to be inverted */
        uint64_t undefine_63_32           :32;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_errinj_rsp_pipe_desc_t;

typedef union ar_nic_orb_dbg_errinj_req_pipe_desc {
    struct {
        // QW0
        uint64_t enable                   : 1;	/* Enable Error Injection for Request Pipeline */
        uint64_t mode                     : 1;	/* Mode 0: Inject error in Nth flit of one packet Mode 1: Inject error in Nth flit of all packets */
        uint64_t undefine_2_2             : 1;	/* undefined */
        uint64_t triggered                : 1;	/* This status bit should be clear when the MMR is written by software */
        uint64_t count                    : 3;	/* Flit in which to inject the error */
        uint64_t undefine_11_7            : 5;	/* undefined */
        uint64_t parity                   : 4;	/* When an error is injected, each bit that is set to one in this field causes the corresponding bit of the parity in the header to be inverted */
        uint64_t checkbitslo              : 8;	/* When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome for data bits 63:0 to be inverted */
        uint64_t checkbitsup              : 8;	/* When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome for data bits 135:72 to be inverted */
        uint64_t undefine_63_32           :32;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_errinj_req_pipe_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_0_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_0_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_1_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_1_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_2_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_2_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_3_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_3_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_4_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_4_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_5_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_5_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_6_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_6_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_7_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_7_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_8_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_8_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_9_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_9_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_10_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_10_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_11_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_11_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_12_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_12_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_13_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_13_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_14_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_14_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_15_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_15_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_16_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_16_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_17_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_17_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_18_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_18_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_19_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_19_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_20_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_20_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_21_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_21_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_22_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_22_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_23_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_23_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_24_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_24_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_25_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_25_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_26_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_26_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_27_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_27_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_28_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_28_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_29_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_29_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_30_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_30_desc_t;

typedef union ar_nic_orb_dbg_ord_vectors_31_desc {
    struct {
        // QW0
        uint64_t ord_full_vector          :32;	/* This field gives the value of a 32-bit range of the ORD Full Vector */
        uint64_t ord_check_vector         :32;	/* This field gives the value of a 32-bit range of the ORB Scrubber Check Vector */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_vectors_31_desc_t;

typedef union ar_nic_orb_dbg_ord_ent_cnt_desc {
    struct {
        // QW0
        uint64_t ord_ents                 :11;	/* Number of packets in the ORD RAM */
        uint64_t undefine_63_11           :53;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_ord_ent_cnt_desc_t;

typedef union ar_nic_orb_dbg_scrub_notify_cnt_desc {
    struct {
        // QW0
        uint64_t current_cnt              :11;	/* Number of packets setting the ORD_TIMEOUT flag on the last pass through the ORD scrubber */
        uint64_t undefine_11_11           : 1;	/* undefined */
        uint64_t previous_cnt             :11;	/* The pevious value of CURRENT_CNT */
        uint64_t undefine_63_23           :41;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_scrub_notify_cnt_desc_t;

typedef union ar_nic_orb_sts_rsp_fifo_status_desc {
    struct {
        // QW0
        uint64_t rsp_fifo_wrptr           :10;	/* Write pointer for of the Response FIFO */
        uint64_t rsp_fifo_rdptr           :10;	/* Read pointer for of the Response FIFO */
        uint64_t rsp_fifo_ents            :11;	/* Number of packets in the Response FIFO */
        uint64_t undefine_63_31           :33;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_sts_rsp_fifo_status_desc_t;

typedef union ar_nic_orb_err_flg_desc {
    struct {
        // QW0
        uint64_t diag_only                : 1;	/* Reserved for the purpose of inserting a  */
        uint64_t no_entry_in_ord          : 1;	/* Set when a response packet comes into the Response FIFO for which there is no corresponding request in the ORD RAM */
        uint64_t cmd_mismatch             : 1;	/* Set when a response packet comes into the Response FIFO that does not have the same type of command (GET, PUT, or Fetching AMO) as the corresponding request entry in the ORD and the remote status (rstatus) does not indicate an invalid command */
        uint64_t illegal_rsp_pid          : 1;	/* Set when the upper two bits of the packet ID (pktID) value of an incoming response packet is not set to 2'b00 */
        uint64_t illegal_rsp_lstat        : 1;	/* Set when there is a local status of an incoming response packet not set to 6'b0 */
        uint64_t rsp_fifo_ovf             : 1;	/* Set when an overflow in the Response FIFO occurs */
        uint64_t rsp_spkt                 : 1;	/* Set when there is a super packet (a header flit followed by more than four data flits) coming into the Response FIFO */
        uint64_t rsp_pe                   : 1;	/* Set when a Parity Error occurs on a header flit in the Response FIFO */
        uint64_t rsp_sbe                  : 1;	/* Set when a Single Bit Error occurs on a data flit in the Response FIFO */
        uint64_t rsp_mbe                  : 1;	/* Set when a Multi-bit Error occurs on a data flit in the Response FIFO */
        uint64_t rsp_flit_cnt             : 1;	/* Set when the number of flits in a response packet does not match the number of expected flits (based on the byte count stored in the ORB Data RAM) */
        uint64_t ord_scrub                : 1;	/* Set when an entry in the ORD RAM times out due to lack of a response */
        uint64_t ord_timeout              : 1;	/* Set when an entry in the ORD RAM times out due to a lack of a response */
        uint64_t ord_mbe                  : 1;	/* Set when there is a multi-bit error in the ORD RAM */
        uint64_t ord_sbe                  : 1;	/* Set when there is a single bit error in the ORD RAM */
        uint64_t req_fifo_ovf             : 1;	/* Set when an overflow in the Request FIFO occurs */
        uint64_t req_unf                  : 1;	/* Set when an underflow in the Request FIFO occurs */
        uint64_t req_spkt                 : 1;	/* Set when there is a super packet (a header flit followed by more than four data flits) coming into the Request Control Logic */
        uint64_t req_pe                   : 1;	/* Set when a Parity Error occurs on a header flit in the Request FIFO */
        uint64_t req_sbe                  : 1;	/* Set when a Single Bit Error occurs on a data flit in the Request FIFO */
        uint64_t req_mbe                  : 1;	/* Set when a Multi-bit Error occurs on a data flit in the Request FIFO */
        uint64_t nl_crdt_unf              : 1;	/* Set when there is an underflow in the credits between the ORB (sender) and NL (receiver) */
        uint64_t tail_on_head             : 1;	/* Set when there is a tail bit set on a header for a request packet */
        uint64_t fr_chk                   : 1;	/* Set when the Flagged Response bit of an FMA request is set and the address is not dword aligned or when the Flagged Response bit of an FMA request is set and the amount of data crosses a cache line boundary */
        uint64_t sbe_ntt                  : 1;	/* NTT Single Bit Error Flag */
        uint64_t mbe_ntt                  : 1;	/* NTT Multiple Bit Error Flag */
        uint64_t sbe_ptt                  : 1;	/* PTT Single Bit Error Flag */
        uint64_t mbe_ptt                  : 1;	/* PTT Multiple Bit Error Flag */
        uint64_t undefine_63_28           :36;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_flg_desc_t;

typedef union ar_nic_orb_err_clr_desc {
    struct {
        // QW0
        uint64_t diag_only                : 1;	/* Reserved for the purpose of inserting a  */
        uint64_t no_entry_in_ord          : 1;	/* Set when a response packet comes into the Response FIFO for which there is no corresponding request in the ORD RAM */
        uint64_t cmd_mismatch             : 1;	/* Set when a response packet comes into the Response FIFO that does not have the same type of command (GET, PUT, or Fetching AMO) as the corresponding request entry in the ORD and the remote status (rstatus) does not indicate an invalid command */
        uint64_t illegal_rsp_pid          : 1;	/* Set when the upper two bits of the packet ID (pktID) value of an incoming response packet is not set to 2'b00 */
        uint64_t illegal_rsp_lstat        : 1;	/* Set when there is a local status of an incoming response packet not set to 6'b0 */
        uint64_t rsp_fifo_ovf             : 1;	/* Set when an overflow in the Response FIFO occurs */
        uint64_t rsp_spkt                 : 1;	/* Set when there is a super packet (a header flit followed by more than four data flits) coming into the Response FIFO */
        uint64_t rsp_pe                   : 1;	/* Set when a Parity Error occurs on a header flit in the Response FIFO */
        uint64_t rsp_sbe                  : 1;	/* Set when a Single Bit Error occurs on a data flit in the Response FIFO */
        uint64_t rsp_mbe                  : 1;	/* Set when a Multi-bit Error occurs on a data flit in the Response FIFO */
        uint64_t rsp_flit_cnt             : 1;	/* Set when the number of flits in a response packet does not match the number of expected flits (based on the byte count stored in the ORB Data RAM) */
        uint64_t ord_scrub                : 1;	/* Set when an entry in the ORD RAM times out due to lack of a response */
        uint64_t ord_timeout              : 1;	/* Set when an entry in the ORD RAM times out due to a lack of a response */
        uint64_t ord_mbe                  : 1;	/* Set when there is a multi-bit error in the ORD RAM */
        uint64_t ord_sbe                  : 1;	/* Set when there is a single bit error in the ORD RAM */
        uint64_t req_fifo_ovf             : 1;	/* Set when an overflow in the Request FIFO occurs */
        uint64_t req_unf                  : 1;	/* Set when an underflow in the Request FIFO occurs */
        uint64_t req_spkt                 : 1;	/* Set when there is a super packet (a header flit followed by more than four data flits) coming into the Request Control Logic */
        uint64_t req_pe                   : 1;	/* Set when a Parity Error occurs on a header flit in the Request FIFO */
        uint64_t req_sbe                  : 1;	/* Set when a Single Bit Error occurs on a data flit in the Request FIFO */
        uint64_t req_mbe                  : 1;	/* Set when a Multi-bit Error occurs on a data flit in the Request FIFO */
        uint64_t nl_crdt_unf              : 1;	/* Set when there is an underflow in the credits between the ORB (sender) and NL (receiver) */
        uint64_t tail_on_head             : 1;	/* Set when there is a tail bit set on a header for a request packet */
        uint64_t fr_chk                   : 1;	/* Set when the Flagged Response bit of an FMA request is set and the address is not dword aligned or when the Flagged Response bit of an FMA request is set and the amount of data crosses a cache line boundary */
        uint64_t sbe_ntt                  : 1;	/* NTT Single Bit Error Flag */
        uint64_t mbe_ntt                  : 1;	/* NTT Multiple Bit Error Flag */
        uint64_t sbe_ptt                  : 1;	/* PTT Single Bit Error Flag */
        uint64_t mbe_ptt                  : 1;	/* PTT Multiple Bit Error Flag */
        uint64_t undefine_63_28           :36;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_clr_desc_t;

typedef union ar_nic_orb_err_hss_msk_desc {
    struct {
        // QW0
        uint64_t diag_only                : 1;	/* 0:0 */
        uint64_t no_entry_in_ord          : 1;	/* 1:1 */
        uint64_t cmd_mismatch             : 1;	/* 2:2 */
        uint64_t illegal_rsp_pid          : 1;	/* 3:3 */
        uint64_t illegal_rsp_lstat        : 1;	/* 4:4 */
        uint64_t rsp_fifo_ovf             : 1;	/* 5:5 */
        uint64_t rsp_spkt                 : 1;	/* 6:6 */
        uint64_t rsp_pe                   : 1;	/* 7:7 */
        uint64_t rsp_sbe                  : 1;	/* 8:8 */
        uint64_t rsp_mbe                  : 1;	/* 9:9 */
        uint64_t rsp_flit_cnt             : 1;	/* 10:10 */
        uint64_t ord_scrub                : 1;	/* 11:11 */
        uint64_t ord_timeout              : 1;	/* 12:12 */
        uint64_t ord_mbe                  : 1;	/* 13:13 */
        uint64_t ord_sbe                  : 1;	/* 14:14 */
        uint64_t req_fifo_ovf             : 1;	/* 15:15 */
        uint64_t req_unf                  : 1;	/* 16:16 */
        uint64_t req_spkt                 : 1;	/* 17:17 */
        uint64_t req_pe                   : 1;	/* 18:18 */
        uint64_t req_sbe                  : 1;	/* 19:19 */
        uint64_t req_mbe                  : 1;	/* 20:20 */
        uint64_t nl_crdt_unf              : 1;	/* 21:21 */
        uint64_t tail_on_head             : 1;	/* 22:22 */
        uint64_t fr_chk                   : 1;	/* 23:23 */
        uint64_t sbe_ntt                  : 1;	/* 24:24 */
        uint64_t mbe_ntt                  : 1;	/* 25:25 */
        uint64_t sbe_ptt                  : 1;	/* 26:26 */
        uint64_t mbe_ptt                  : 1;	/* 27:27 */
        uint64_t undefine_63_28           :36;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_hss_msk_desc_t;

typedef union ar_nic_orb_err_os_msk_desc {
    struct {
        // QW0
        uint64_t diag_only                : 1;	/* 0:0 */
        uint64_t no_entry_in_ord          : 1;	/* 1:1 */
        uint64_t cmd_mismatch             : 1;	/* 2:2 */
        uint64_t illegal_rsp_pid          : 1;	/* 3:3 */
        uint64_t illegal_rsp_lstat        : 1;	/* 4:4 */
        uint64_t rsp_fifo_ovf             : 1;	/* 5:5 */
        uint64_t rsp_spkt                 : 1;	/* 6:6 */
        uint64_t rsp_pe                   : 1;	/* 7:7 */
        uint64_t rsp_sbe                  : 1;	/* 8:8 */
        uint64_t rsp_mbe                  : 1;	/* 9:9 */
        uint64_t rsp_flit_cnt             : 1;	/* 10:10 */
        uint64_t ord_scrub                : 1;	/* 11:11 */
        uint64_t ord_timeout              : 1;	/* 12:12 */
        uint64_t ord_mbe                  : 1;	/* 13:13 */
        uint64_t ord_sbe                  : 1;	/* 14:14 */
        uint64_t req_fifo_ovf             : 1;	/* 15:15 */
        uint64_t req_unf                  : 1;	/* 16:16 */
        uint64_t req_spkt                 : 1;	/* 17:17 */
        uint64_t req_pe                   : 1;	/* 18:18 */
        uint64_t req_sbe                  : 1;	/* 19:19 */
        uint64_t req_mbe                  : 1;	/* 20:20 */
        uint64_t nl_crdt_unf              : 1;	/* 21:21 */
        uint64_t tail_on_head             : 1;	/* 22:22 */
        uint64_t fr_chk                   : 1;	/* 23:23 */
        uint64_t sbe_ntt                  : 1;	/* 24:24 */
        uint64_t mbe_ntt                  : 1;	/* 25:25 */
        uint64_t sbe_ptt                  : 1;	/* 26:26 */
        uint64_t mbe_ptt                  : 1;	/* 27:27 */
        uint64_t undefine_63_28           :36;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_os_msk_desc_t;

typedef union ar_nic_orb_err_first_flg_desc {
    struct {
        // QW0
        uint64_t diag_only                : 1;	/* 0:0 */
        uint64_t no_entry_in_ord          : 1;	/* 1:1 */
        uint64_t cmd_mismatch             : 1;	/* 2:2 */
        uint64_t illegal_rsp_pid          : 1;	/* 3:3 */
        uint64_t illegal_rsp_lstat        : 1;	/* 4:4 */
        uint64_t rsp_fifo_ovf             : 1;	/* 5:5 */
        uint64_t rsp_spkt                 : 1;	/* 6:6 */
        uint64_t rsp_pe                   : 1;	/* 7:7 */
        uint64_t rsp_sbe                  : 1;	/* 8:8 */
        uint64_t rsp_mbe                  : 1;	/* 9:9 */
        uint64_t rsp_flit_cnt             : 1;	/* 10:10 */
        uint64_t ord_scrub                : 1;	/* 11:11 */
        uint64_t ord_timeout              : 1;	/* 12:12 */
        uint64_t ord_mbe                  : 1;	/* 13:13 */
        uint64_t ord_sbe                  : 1;	/* 14:14 */
        uint64_t req_fifo_ovf             : 1;	/* 15:15 */
        uint64_t req_unf                  : 1;	/* 16:16 */
        uint64_t req_spkt                 : 1;	/* 17:17 */
        uint64_t req_pe                   : 1;	/* 18:18 */
        uint64_t req_sbe                  : 1;	/* 19:19 */
        uint64_t req_mbe                  : 1;	/* 20:20 */
        uint64_t nl_crdt_unf              : 1;	/* 21:21 */
        uint64_t tail_on_head             : 1;	/* 22:22 */
        uint64_t fr_chk                   : 1;	/* 23:23 */
        uint64_t sbe_ntt                  : 1;	/* 24:24 */
        uint64_t mbe_ntt                  : 1;	/* 25:25 */
        uint64_t sbe_ptt                  : 1;	/* 26:26 */
        uint64_t mbe_ptt                  : 1;	/* 27:27 */
        uint64_t undefine_63_28           :36;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_first_flg_desc_t;

typedef union ar_nic_orb_err_info_hss_msk_desc {
    struct {
        // QW0
        uint64_t diag                     : 1;	/* Reserved for diagnostics */
        uint64_t no_entry_in_ord          : 1;	/* Masks updates to A_NIC_ORB_ERR_INFO_HSS_DROP_RSP */
        uint64_t cmd_mismatch             : 1;	/* Masks updates to A_NIC_ORB_ERR_INFO_HSS_DROP_RSP */
        uint64_t illegal_rsp_pid          : 1;	/* Masks updates to A_NIC_ORB_ERR_INFO_HSS_DROP_RSP */
        uint64_t illegal_rsp_lstat        : 1;	/* Masks updates to A_NIC_ORB_ERR_INFO_HSS_DROP_RSP */
        uint64_t msk_void                 :23;	/* Unused mask bits */
        uint64_t undefine_63_28           :36;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_hss_msk_desc_t;

typedef union ar_nic_orb_err_info_os_msk_desc {
    struct {
        // QW0
        uint64_t diag                     : 1;	/* Reserved for diagnostics */
        uint64_t no_entry_in_ord          : 1;	/* Masks updates to A_NIC_ORB_ERR_INFO_OS_DROP_RSP */
        uint64_t cmd_mismatch             : 1;	/* Masks updates to A_NIC_ORB_ERR_INFO_OS_DROP_RSP */
        uint64_t illegal_rsp_pid          : 1;	/* Masks updates to A_NIC_ORB_ERR_INFO_OS_DROP_RSP */
        uint64_t illegal_rsp_lstat        : 1;	/* Masks updates to A_NIC_ORB_ERR_INFO_OS_DROP_RSP */
        uint64_t msk_void                 :23;	/* Unused mask bits */
        uint64_t undefine_63_28           :36;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_os_msk_desc_t;

typedef union ar_nic_orb_err_info_hss_drop_rsp_desc {
    struct {
        // QW0
        uint64_t dst                      :16;	/* Destination */
        uint64_t dstid                    : 2;	/* Destination Core Identifier */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t pktid                    :12;	/* Packet Identifier */
        uint64_t portid                   : 3;	/* Port Identifier */
        uint64_t lb                       : 1;	/* Packet Generated by Local Block */
        uint64_t lstatus                  : 6;	/* Local Status */
        uint64_t rstatus                  : 6;	/* Remote Status */
        uint64_t rc                       : 3;	/* Routing Control */
        uint64_t err_encoding             : 4;	/* 4'bxxx1 - NO_ENTRY_IN_ORD 4'bxx1x - CMD_MISMATCH 4'bx1xx - ILLEGAL_RSP_PID 4'b1xxx - ILLEGAL_RSP_LSTAT */
        uint64_t undefine_63_56           : 8;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_hss_drop_rsp_desc_t;

typedef union ar_nic_orb_err_info_os_drop_rsp_desc {
    struct {
        // QW0
        uint64_t dst                      :16;	/* Destination */
        uint64_t dstid                    : 2;	/* Destination Core Identifier */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t pktid                    :12;	/* Packet Identifier */
        uint64_t portid                   : 3;	/* Port Identifier */
        uint64_t lb                       : 1;	/* Packet Generated by Local Block */
        uint64_t lstatus                  : 6;	/* Local Status */
        uint64_t rstatus                  : 6;	/* Remote Status */
        uint64_t rc                       : 3;	/* Routing Control */
        uint64_t err_encoding             : 4;	/* 4'bxxx1 - NO_ENTRY_IN_ORD 4'bxx1x - CMD_MISMATCH 4'bx1xx - ILLEGAL_RSP_PID 4'b1xxx - ILLEGAL_RSP_LSTAT */
        uint64_t undefine_63_56           : 8;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_os_drop_rsp_desc_t;

typedef union ar_nic_orb_err_info_rsp_spkt_desc {
    struct {
        // QW0
        uint64_t dst                      :16;	/* Destination */
        uint64_t dstid                    : 2;	/* Destination Core Identifier */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t pktid                    :12;	/* Packet Identifier - Bits 32:21 always read as zero if the previous write access was by hardware */
        uint64_t portid                   : 3;	/* Port Identifier */
        uint64_t lb                       : 1;	/* Packet Generated by Local Block */
        uint64_t lstatus                  : 6;	/* Local Status - Always read as zero if the previous write access was by hardware */
        uint64_t rstatus                  : 6;	/* Remote Status */
        uint64_t rc                       : 3;	/* Routing Control */
        uint64_t undefine_63_52           :12;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_rsp_spkt_desc_t;

typedef union ar_nic_orb_err_info_rsp_pe_desc {
    struct {
        // QW0
        uint64_t undefine_19_0            :20;	/* undefined */
        uint64_t dst                      :16;	/* Destination */
        uint64_t dstid                    : 2;	/* Destination Core Identifier */
        uint64_t rstatus                  : 6;	/* Remote Status */
        uint64_t pktid                    :10;	/* Packet Identifier */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t undefine_63_57           : 7;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_rsp_pe_desc_t;

typedef union ar_nic_orb_err_info_rsp_sbe_desc {
    struct {
        // QW0
        uint64_t syndrome                 : 8;	/* SBE Syndrome */
        uint64_t undefine_19_8            :12;	/* undefined */
        uint64_t dst                      :16;	/* Destination */
        uint64_t dstid                    : 2;	/* Destination Core Identifier */
        uint64_t rstatus                  : 6;	/* Remote Status */
        uint64_t pktid                    :10;	/* Packet Identifier */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t err_msk                  : 2;	/* 2'bx1: Error in bits 63:0 2'b1x: Error in bits 135:72 */
        uint64_t data_flit                : 2;	/* 2'b00: SBE in Data Flit 0 2'b01: SBE in Data Flit 1 2'b10: SBE in Data Flit 2 2'b11: SBE in Data Flit 3  If multiple Data Flits contain bit errors, this field indicates the lowest value */
        uint64_t undefine_63_61           : 3;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_rsp_sbe_desc_t;

typedef union ar_nic_orb_err_info_rsp_mbe_desc {
    struct {
        // QW0
        uint64_t syndrome                 : 8;	/* MBE Syndrome */
        uint64_t undefine_19_8            :12;	/* undefined */
        uint64_t dst                      :16;	/* Destination */
        uint64_t dstid                    : 2;	/* Destination Core Identifier */
        uint64_t rstatus                  : 6;	/* Remote Status */
        uint64_t pktid                    :10;	/* Packet Identifier */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t err_msk                  : 2;	/* 2'bx1: Error in bits 63:0 2'b1x: Error in bits 135:72 */
        uint64_t data_flit                : 2;	/* 2'b00: MBE in Data Flit 0 2'b01: MBE in Data Flit 1 2'b10: MBE in Data Flit 2 2'b11: MBE in Data Flit 3  If multiple Data Flits contain bit errors, this field indicates the lowest value */
        uint64_t undefine_63_61           : 3;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_rsp_mbe_desc_t;

typedef union ar_nic_orb_err_info_ord_scrub_lo_desc {
    struct {
        // QW0
        uint64_t timecnt                  :16;	/* Time Count */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t trk_rsp                  : 1;	/* Track Response */
        uint64_t mdh                      :12;	/* Memory Domain Handle for PUTs or lMDH for GETs or Fetching AMOs */
        uint64_t ssid                     : 9;	/* Synchronization Sequence Identifier */
        uint64_t pktid                    :10;	/* Packet ID */
        uint64_t undefine_63_51           :13;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_ord_scrub_lo_desc_t;

typedef union ar_nic_orb_err_info_ord_scrub_up_desc {
    struct {
        // QW0 - OVERLOADED FIELDS
        union {
            struct {
                uint64_t lcnt                     : 4;	/* Local 32-bit Word Count Minus One */
                uint64_t addr_get_39_0            :40;	/* GET Address bits 39:0 */
                uint64_t lptag                    : 8;	/* Local Protection Tag */
                uint64_t fr_err                   : 1;	/* Flagged Response Error */
                uint64_t fr                       : 1;	/* Flagged Response */
                uint64_t wc                       : 1;	/* Write Combine */
                uint64_t undefine_q0_f0_63_55     : 9;	/* undefined */
            };
            struct {
                uint64_t dst                      :16;	/* Destination */
                uint64_t addr_put_39_12           :28;	/* PUT Address bits 39:12 */
                uint64_t dstid                    : 2;	/* Destination Core Identifier */
                uint64_t ntt                      : 1;	/* Node Translation Table Lookup Enable */
                uint64_t f                        : 1;	/* First Request in Message */
                uint64_t void_54_48               : 7;	/* Unused for GET Requests */
                uint64_t undefine_q0_f1_63_55     : 9;	/* undefined */
            };
        };
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_ord_scrub_up_desc_t;

typedef union ar_nic_orb_err_info_ord_mbe_lo_desc {
    struct {
        // QW0
        uint64_t timecnt                  :16;	/* Time Count */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t trk_rsp                  : 1;	/* Track Response */
        uint64_t mdh                      :12;	/* Memory Domain Handle for PUTs or lMDH for GETs or Fetching AMOs */
        uint64_t ssid                     : 9;	/* Synchronization Sequence Identifier */
        uint64_t pktid                    :10;	/* Packet ID */
        uint64_t mmr_detected             : 1;	/* MMR detected MBE */
        uint64_t undefine_63_52           :12;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_ord_mbe_lo_desc_t;

typedef union ar_nic_orb_err_info_ord_mbe_up_desc {
    struct {
        // QW0 - OVERLOADED FIELDS
        union {
            struct {
                uint64_t lcnt                     : 4;	/* Local 32-bit Word Count Minus One */
                uint64_t addr_get_39_0            :40;	/* GET Address bits 39:0 */
                uint64_t lptag                    : 8;	/* Local Protection Tag */
                uint64_t fr_err                   : 1;	/* Flagged Response Error */
                uint64_t fr                       : 1;	/* Flagged Response */
                uint64_t wc                       : 1;	/* Write Combine */
                uint64_t undefine_55_55           : 1;	/* undefined */
                uint64_t syndrome                 : 8;	/* Syndrome */
            };
            struct {
                uint64_t dst                      :16;	/* Destination */
                uint64_t addr_put_39_12           :28;	/* PUT Address bits 39:12 */
                uint64_t dstid                    : 2;	/* Destination Core Identifier */
                uint64_t ntt                      : 1;	/* Node Translation Table Lookup Enable */
                uint64_t f                        : 1;	/* First Request in Message */
                uint64_t void_54_48               : 7;	/* Unused for GET Requests */
                uint64_t undefine_q0_f1_63_55     : 9;	/* undefined */
            };
        };
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_ord_mbe_up_desc_t;

typedef union ar_nic_orb_err_info_ord_sbe_lo_desc {
    struct {
        // QW0
        uint64_t timecnt                  :16;	/* Time Count */
        uint64_t rspcmd                   : 3;	/* Response Command */
        uint64_t trk_rsp                  : 1;	/* Track Response */
        uint64_t mdh                      :12;	/* Memory Domain Handle for PUTs or lMDH for GETs or Fetching AMOs */
        uint64_t ssid                     : 9;	/* Synchronization Sequence Identifier */
        uint64_t pktid                    :10;	/* Packet ID */
        uint64_t mmr_detected             : 1;	/* MMR detected SBE */
        uint64_t undefine_63_52           :12;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_ord_sbe_lo_desc_t;

typedef union ar_nic_orb_err_info_ord_sbe_up_desc {
    struct {
        // QW0 - OVERLOADED FIELDS
        union {
            struct {
                uint64_t lcnt                     : 4;	/* Local 32-bit Word Count Minus One */
                uint64_t addr_get_39_0            :40;	/* GET Address bits 39:0 */
                uint64_t lptag                    : 8;	/* Local Protection Tag */
                uint64_t fr_err                   : 1;	/* Flagged Response Error */
                uint64_t fr                       : 1;	/* Flagged Response */
                uint64_t wc                       : 1;	/* Write Combine */
                uint64_t undefine_55_55           : 1;	/* undefined */
                uint64_t syndrome                 : 8;	/* Syndrome */
            };
            struct {
                uint64_t dst                      :16;	/* Destination */
                uint64_t addr_put_39_12           :28;	/* PUT Address bits 39:12 */
                uint64_t dstid                    : 2;	/* Destination Core Identifier */
                uint64_t ntt                      : 1;	/* Node Translation Table Lookup Enable */
                uint64_t f                        : 1;	/* First Request in Message */
                uint64_t void_54_48               : 7;	/* Unused for GET Requests */
                uint64_t undefine_q0_f1_63_55     : 9;	/* undefined */
            };
        };
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_ord_sbe_up_desc_t;

typedef union ar_nic_orb_err_info_req_pe_desc {
    struct {
        // QW0
        uint64_t dst                      :16;	/* Destination */
        uint64_t dstid                    : 2;	/* Destination Core Identifier */
        uint64_t pkt_src                  : 2;	/* Packet Source */
        uint64_t reqcmd                   : 9;	/* Request Command */
        uint64_t undefine_35_29           : 7;	/* undefined */
        uint64_t ssid                     : 9;	/* SSID */
        uint64_t undefine_51_45           : 7;	/* undefined */
        uint64_t mdh                      :12;	/* Memory Domain Handle */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_req_pe_desc_t;

typedef union ar_nic_orb_err_info_req_sbe_desc {
    struct {
        // QW0
        uint64_t syndrome0                : 8;	/* Syndrome for bits 63:0 */
        uint64_t syndrome1                : 8;	/* Syndrome for bits 135:72 */
        uint64_t ptag                     : 8;	/* Protection Tag */
        uint64_t mdh                      :12;	/* Memory Domain Handle */
        uint64_t ssid                     : 9;	/* SSID */
        uint64_t undefine_47_45           : 3;	/* undefined */
        uint64_t err_msk                  : 2;	/* 2'bx1: Error in bits 63:0 2'b1x: Error in bits 135:72 */
        uint64_t undefine_63_50           :14;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_req_sbe_desc_t;

typedef union ar_nic_orb_err_info_req_mbe_desc {
    struct {
        // QW0
        uint64_t syndrome0                : 8;	/* Syndrome for bits 63:0 */
        uint64_t syndrome1                : 8;	/* Syndrome for bits 135:72 */
        uint64_t ptag                     : 8;	/* Protection Tag */
        uint64_t mdh                      :12;	/* Memory Domain Handle */
        uint64_t ssid                     : 9;	/* SSID */
        uint64_t undefine_47_45           : 3;	/* undefined */
        uint64_t err_msk                  : 2;	/* 2'bx1: Error in bits 63:0 2'b1x: Error in bits 135:72 */
        uint64_t undefine_63_50           :14;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_req_mbe_desc_t;

typedef union ar_nic_orb_prf_net_rsp_track_1_desc {
    struct {
        // QW0
        uint64_t min_rsp_time             :16;	/* Tracks the minimum response time for an outstanding request to the Aries Network */
        uint64_t max_rsp_time             :16;	/* Tracks the maximum response time for an outstanding request to the Aries Network */
        uint64_t undefine_63_32           :32;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_net_rsp_track_1_desc_t;

typedef union ar_nic_orb_prf_net_rsp_track_2_desc {
    struct {
        // QW0
        uint64_t sum_rsp_time_count       ;	/* Tracks the sum of all response times for outstanding requests to the Aries Network */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_net_rsp_track_2_desc_t;

typedef union ar_nic_orb_prf_net_rsp_hist_bin01_desc {
    struct {
        // QW0
        uint64_t bin0_count               :32;	/* Bin 0 count */
        uint64_t bin1_count               :32;	/* Bin 1 count */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_net_rsp_hist_bin01_desc_t;

typedef union ar_nic_orb_prf_net_rsp_hist_bin23_desc {
    struct {
        // QW0
        uint64_t bin2_count               :32;	/* Bin 2 count */
        uint64_t bin3_count               :32;	/* Bin 3 count */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_net_rsp_hist_bin23_desc_t;

typedef union ar_nic_orb_prf_net_rsp_hist_bin45_desc {
    struct {
        // QW0
        uint64_t bin4_count               :32;	/* Bin 4 count */
        uint64_t bin5_count               :32;	/* Bin 5 count */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_net_rsp_hist_bin45_desc_t;

typedef union ar_nic_orb_prf_net_rsp_hist_bin67_desc {
    struct {
        // QW0
        uint64_t bin6_count               :32;	/* Bin 6 count */
        uint64_t bin7_count               :32;	/* Bin 7 count */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_net_rsp_hist_bin67_desc_t;

typedef union ar_nic_orb_prf_req_bytes_sent_desc {
    struct {
        // QW0
        uint64_t byte_cnt                 ;	/* Count of the number of bytes sent to the network */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_req_bytes_sent_desc_t;

typedef union ar_nic_orb_prf_rsp_bytes_rcvd_desc {
    struct {
        // QW0
        uint64_t byte_cnt                 ;	/* Count of the number of bytes received from the network */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_rsp_bytes_rcvd_desc_t;

typedef union ar_nic_orb_prf_stall_duration_en_desc {
    struct {
        // QW0
        uint64_t enable_crdts             : 1;	/* Set to enable A_NIC_ORB_PRF_REQ_CRDTS_STALL_DURATION */
        uint64_t enable_pktid             : 1;	/* Set to enable A_NIC_ORB_PRF_REQ_PKTID_STALL_DURATION */
        uint64_t undefine_63_2            :62;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_stall_duration_en_desc_t;

typedef union ar_nic_orb_prf_req_pktid_stall_duration_desc {
    struct {
        // QW0
        uint64_t value                    :48;	/* The maximum duration */
        uint64_t undefine_63_48           :16;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_req_pktid_stall_duration_desc_t;

typedef union ar_nic_orb_prf_req_crdts_stall_duration_desc {
    struct {
        // QW0
        uint64_t value                    :48;	/* The maximum duration */
        uint64_t undefine_63_48           :16;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_prf_req_crdts_stall_duration_desc_t;

typedef union ar_nic_orb_cfg_ntt_table_desc {
    struct {
        // QW0
        uint64_t blk_nic                  : 2;	/* Entry n, Physical NIC */
        uint64_t blk_phys_adr             :16;	/* Entry n, Physical Network Address */
        uint64_t undefine_19_18           : 2;	/* undefined */
        uint64_t rplc_nic                 : 2;	/* Entry n, Replacement Physical NIC */
        uint64_t rplc_phy_adr             :16;	/* Entry n, Replacement Physical Address */
        uint64_t undefine_39_38           : 2;	/* undefined */
        uint64_t rplc_size                : 3;	/* 's': Replacement block size = 2s 0 - 11 - 22 - 43 - 84 - 165 - 326 - invalid7 - invalid  RPLC_SIZE should be less than GRANULARITY */
        uint64_t undefine_43_43           : 1;	/* undefined */
        uint64_t checkbits                : 7;	/* Corrected Check Bits */
        uint64_t undefine_51_51           : 1;	/* undefined */
        uint64_t syndrome                 : 7;	/* Syndrome, returned because these bits are available */
        uint64_t undefine_63_59           : 5;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_ntt_table_desc_t;

typedef union ar_nic_orb_cfg_ntt_config_desc {
    struct {
        // QW0
        uint64_t granularity              : 4;	/* 'k': Mapping granularity = 2k 0 - Invalid 1 - 2 2 - 4 3 - 8 4 - 16 5 - 32 6 - 64 7 or greater - Invalid */
        uint64_t disable_err              : 1;	/* Disable the fatal translation error signal to ORB request logic, preventing reads of NTT, that generate bit errors, from request packets from being processed */
        uint64_t mem_en                   : 1;	/* If this bit is set to 1'b1, the NTT RAM is always enabled */
        uint64_t undefine_63_6            :58;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_ntt_config_desc_t;

typedef union ar_nic_orb_err_info_ntt_desc {
    struct {
        // QW0
        uint64_t undefine_1_0             : 2;	/* undefined */
        uint64_t mmr_detected_sbe         : 1;	/* MMR read detected the SBE */
        uint64_t mmr_detected_mbe         : 1;	/* MMR read detected the MBE */
        uint64_t sbe_syndrome             : 7;	/* SBE Syndrome */
        uint64_t undefine_11_11           : 1;	/* undefined */
        uint64_t sbe_address              :12;	/* SBE Address Virtual Node ID shifted by granularity */
        uint64_t mbe_syndrome             : 7;	/* MBE Syndrome */
        uint64_t undefine_31_31           : 1;	/* undefined */
        uint64_t mbe_address              :12;	/* MBE Address Virtual Node ID shifted by granularity */
        uint64_t ptag                     : 8;	/* Protection Tag of the request that caused the error (MBE Only) */
        uint64_t mdh                      :12;	/* Memory Domain Handle of the request that caused the error (MBE Only) */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_ntt_desc_t;

typedef union ar_nic_orb_dbg_errinj_ntt_desc {
    struct {
        // QW0
        uint64_t enable                   : 1;	/* Enable Error Injection */
        uint64_t mode                     : 2;	/* Mode 0: Inject error once Mode 1: Inject error always Mode 2 : Inject error once if address matches Mode 3: Inject error always if address matches */
        uint64_t triggered                : 1;	/*  */
        uint64_t undefine_19_4            :16;	/* undefined */
        uint64_t checkbits                : 7;	/* When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome to be inverted */
        uint64_t undefine_31_27           : 5;	/* undefined */
        uint64_t address                  :16;	/* BIts 43:32 are the NTT address to match */
        uint64_t undefine_63_48           :16;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_errinj_ntt_desc_t;

typedef union ar_nic_orb_cfg_ptt_table_desc {
    struct {
        // QW0
        uint64_t pkey_0                   :16;	/* PKey N+0 */
        uint64_t pkey_1                   :16;	/* PKey N+1 */
        uint64_t pkey_2                   :16;	/* PKey N+2 */
        uint64_t pkey_3                   :16;	/* PKey N+3 */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_ptt_table_desc_t;

typedef union ar_nic_orb_cfg_ptt_config_desc {
    struct {
        // QW0
        uint64_t disable                  : 1;	/* If set, disables PTT translation */
        uint64_t disable_err              : 1;	/* Disable the fatal translation error signal to ORB request logic, preventing reads of PTT, that generate bit errors, from request packets from being processed */
        uint64_t mem_en                   : 1;	/* If this bit is set to 1'b1, the PTT RAM is always enabled */
        uint64_t undefine_63_3            :61;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_cfg_ptt_config_desc_t;

typedef union ar_nic_orb_err_info_ptt_desc {
    struct {
        // QW0
        uint64_t undefine_1_0             : 2;	/* undefined */
        uint64_t mmr_detected_sbe         : 1;	/* MMR read detected the SBE */
        uint64_t mmr_detected_mbe         : 1;	/* MMR read detected the MBE */
        uint64_t sbe_syndrome             : 8;	/* SBE Syndrome */
        uint64_t sbe_address              :12;	/* SBE Address (PTAG) */
        uint64_t mbe_syndrome             : 8;	/* MBE Syndrome */
        uint64_t mbe_address              :12;	/* MBE Address (PTAG) */
        uint64_t ptag                     : 8;	/* Protection Tag of the request that caused the error (MBE Only) */
        uint64_t mdh                      :12;	/* Memory Domain Handle of the request that caused the error (MBE Only) */
    };
    uint64_t qwords[1];
} ar_nic_orb_err_info_ptt_desc_t;

typedef union ar_nic_orb_dbg_errinj_ptt_desc {
    struct {
        // QW0
        uint64_t enable                   : 1;	/* Enable Error Injection */
        uint64_t mode                     : 2;	/* Mode 0: Inject error once Mode 1: Inject error always Mode 2 : Inject error once if address matches Mode 3: Inject error always if address matches */
        uint64_t triggered                : 1;	/*  */
        uint64_t undefine_19_4            :16;	/* undefined */
        uint64_t checkbits                : 8;	/* When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome to be inverted */
        uint64_t undefine_31_28           : 4;	/* undefined */
        uint64_t address                  :16;	/* Bits 39:32 are the PTAG to match */
        uint64_t undefine_63_48           :16;	/* undefined */
    };
    uint64_t qwords[1];
} ar_nic_orb_dbg_errinj_ptt_desc_t;


#endif
