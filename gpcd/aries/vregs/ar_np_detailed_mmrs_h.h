/******************************************************************************
 * COPYRIGHT CRAY INC. ar_np_detailed_mmrs_h.h
 * FILE: ar_np_detailed_mmrs_h.h
 * Created by v2h.c on Wed Oct  8 14:39:01 2014
 ******************************************************************************/
/**
 * @file ar_np_detailed_mmrs_h.h
 * @author v2h.c on Wed Oct  8 14:39:01 2014
 * @section overview Overview:
 *	    Sets up ar_detailed_mmr_t and ar_detailed_mmrd_t structs for each MMR/MMR subfield with constants
 *	    found in ar_np_mmr_values.h and ar_np_defs.h. Then puts each ar_detailed_mmr_t set up
 *	    into an array. Used by the Cray MMR Access Library.
 */

#include "ar_np_mmr_values.h"

#ifndef _AR_NP_DETAILED_MMRS_H_H_
#define _AR_NP_DETAILED_MMRS_H_H_

#ifndef _CMMR_FR_T_
#define _CMMR_FR_T_
/**
 * @struct cmmr_fr_s
 * Gemini Detailed MMR Field Descriptor
 * @see cmmr_br_s
 *
 * The Detailed MMR Field Descriptor contains information about individual
 * fields of a MMR in an ASIC. Used by the Cray MMR Access Library.
 *
 */
typedef struct cmmr_fr_s{
	char* _name;		/**< Field name */
	uint32_t _bpos;		/**< Field bit postion relative to QW */
	uint64_t _mask;		/**< Field bit mask relative to QW */
	uint64_t _rval;		/**< Reset data relative to QW */
	uint64_t _type_bitmsk;	/**< Field Type Bit Mask */
	int _index;		/**< QW Index */
	char* _desc;		/**< Field Description */
	char* _access;		/**< Field Access */
} cmmr_fr_t; /**< cmmr_fr_s */
#endif

#ifndef _CMMR_BR_T_
#define _CMMR_BR_T_
/**
 * @struct cmmr_br_s
 * Gemini Detailed MMR Descriptor
 * @see cmmr_fr_s
 *
 * The Detailed MMR contains information about a individual MMR in an ASIC.
 * Used by the Cray MMR Access Library.
 *
 */
typedef struct cmmr_br_s{
	char* _name;			/**< MMR name */
	uint64_t _addr;			/**< MMR address */
	uint64_t _type_bitmsk;		/**< MMR Type Bit Mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rval;	/**< Reset data */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rmsk;	/**< Reset mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _wrmsk;	/**< Write mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rdmsk;	/**< Read mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _xsmsk;	/**< XState mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _wsemsk;	/**< Write only with side effects */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rsemsk;	/**< Read only with side effects */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _w1smsk;	/**< Write okay but only 1's stick */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _w1cmsk;	/**< Write of 1 clears bit */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _wrstmsk;	/**< Warm Reset Mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _hwwmsk;	/**< Hardware Write Mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _hwrmsk;	/**< Hardware Read Mask */
	int _nqw;			/**< Number of QW */
	int _size;			/**< Size in bytes of MMR */
	int _incr;			/**< Increment between table entries */
	int _depth;			/**< Number of MMR instances */
	const cmmr_fr_t *_info;	/**< MMR detail */
} cmmr_br_t; /**< cmmr_br_s */
#endif

static const cmmr_br_t* __ar_np_mmrs[];	/* NP Array */

/*
 *  AR NP MMR DETAIL DECLARATIONS
 */
static const cmmr_fr_t __ar_np_cfg_detail[] = {
    { ._name = "RST_RAM_CTRL",
      ._bpos = AR_NP_CFG_RST_RAM_CTRL_BP,
      ._mask = AR_NP_CFG_RST_RAM_CTRL_MASK,
      ._rval = AR_NP_CFG_RSTDATA & AR_NP_CFG_RST_RAM_CTRL_MASK,
      ._index = AR_NP_CFG_RST_RAM_CTRL_QW,
      ._desc = "Set to 1 to reset all ram controllers",
      ._type_bitmsk = 0x0000000000002000ull,
      ._access = "RW,HRO"
    },
    { ._name = "RST_SFR",
      ._bpos = AR_NP_CFG_RST_SFR_BP,
      ._mask = AR_NP_CFG_RST_SFR_MASK,
      ._rval = AR_NP_CFG_RSTDATA & AR_NP_CFG_RST_SFR_MASK,
      ._index = AR_NP_CFG_RST_SFR_QW,
      ._desc = "Set to 1 to reset the SFR interface",
      ._type_bitmsk = 0x0000000000002000ull,
      ._access = "RW,HRO"
    },
    { ._name = "RST_PROC",
      ._bpos = AR_NP_CFG_RST_PROC_BP,
      ._mask = AR_NP_CFG_RST_PROC_MASK,
      ._rval = AR_NP_CFG_RSTDATA & AR_NP_CFG_RST_PROC_MASK,
      ._index = AR_NP_CFG_RST_PROC_QW,
      ._desc = "Set to 1 to reset the 8051 processor, write to 1 then stay at one for at least 64 LCLK cycles, then set to 0, the 8051 processor will start executing firmware at address 0",
      ._type_bitmsk = 0x0000000000002000ull,
      ._access = "RW,HRO"
    },
    { ._name = "STOP_SBUS_SPICO",
      ._bpos = AR_NP_CFG_STOP_SBUS_SPICO_BP,
      ._mask = AR_NP_CFG_STOP_SBUS_SPICO_MASK,
      ._rval = AR_NP_CFG_RSTDATA & AR_NP_CFG_STOP_SBUS_SPICO_MASK,
      ._index = AR_NP_CFG_STOP_SBUS_SPICO_QW,
      ._desc = "Set to 1 to stop the SPICO clock for the SBus Master",
      ._type_bitmsk = 0x0000000000002000ull,
      ._access = "RW,HRO"
    },
    { ._name = "CLKGEN_SPICO",
      ._bpos = AR_NP_CFG_CLKGEN_SPICO_BP,
      ._mask = AR_NP_CFG_CLKGEN_SPICO_MASK,
      ._rval = AR_NP_CFG_RSTDATA & AR_NP_CFG_CLKGEN_SPICO_MASK,
      ._index = AR_NP_CFG_CLKGEN_SPICO_QW,
      ._desc = "SPICO clock generation configuration, divided LCLK by 2(00), 4(01), 8(10), 16(11)",
      ._type_bitmsk = 0x0000000000002000ull,
      ._access = "RW,HRO"
    },
    { ._name = "CLKGEN_CBUS_OUT",
      ._bpos = AR_NP_CFG_CLKGEN_CBUS_OUT_BP,
      ._mask = AR_NP_CFG_CLKGEN_CBUS_OUT_MASK,
      ._rval = AR_NP_CFG_RSTDATA & AR_NP_CFG_CLKGEN_CBUS_OUT_MASK,
      ._index = AR_NP_CFG_CLKGEN_CBUS_OUT_QW,
      ._desc = "CBus ring clock configuration, divided LCLK by 16(00), 32(01), 64(10), and 128(11)",
      ._type_bitmsk = 0x0000000000002000ull,
      ._access = "RW,HRO"
    },
    { ._name = "CLKGEN_CBUS",
      ._bpos = AR_NP_CFG_CLKGEN_CBUS_BP,
      ._mask = AR_NP_CFG_CLKGEN_CBUS_MASK,
      ._rval = AR_NP_CFG_RSTDATA & AR_NP_CFG_CLKGEN_CBUS_MASK,
      ._index = AR_NP_CFG_CLKGEN_CBUS_QW,
      ._desc = "CBus clock configuration, divide LCLK by 2(00), 4(01), 8(10), and 16(11)",
      ._type_bitmsk = 0x0000000000002000ull,
      ._access = "RW,HRO"
    },
    { ._name = "CLKGEN_PROC",
      ._bpos = AR_NP_CFG_CLKGEN_PROC_BP,
      ._mask = AR_NP_CFG_CLKGEN_PROC_MASK,
      ._rval = AR_NP_CFG_RSTDATA & AR_NP_CFG_CLKGEN_PROC_MASK,
      ._index = AR_NP_CFG_CLKGEN_PROC_QW,
      ._desc = "Processor clock configuration, divide LCLK by 2(00), 4(01),8(10) and 16(11)",
      ._type_bitmsk = 0x0000000000002000ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_dbg_sfr_access_detail[] = {
    { ._name = "SFR_REQ_DATA_VALID",
      ._bpos = AR_NP_DBG_SFR_ACCESS_SFR_REQ_DATA_VALID_BP,
      ._mask = AR_NP_DBG_SFR_ACCESS_SFR_REQ_DATA_VALID_MASK,
      ._rval = AR_NP_DBG_SFR_ACCESS_RSTDATA & AR_NP_DBG_SFR_ACCESS_SFR_REQ_DATA_VALID_MASK,
      ._index = AR_NP_DBG_SFR_ACCESS_SFR_REQ_DATA_VALID_QW,
      ._desc = "Toggle to indicates RD_DATA(read data)is valid",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SFR_REQ",
      ._bpos = AR_NP_DBG_SFR_ACCESS_SFR_REQ_BP,
      ._mask = AR_NP_DBG_SFR_ACCESS_SFR_REQ_MASK,
      ._rval = AR_NP_DBG_SFR_ACCESS_RSTDATA & AR_NP_DBG_SFR_ACCESS_SFR_REQ_MASK,
      ._index = AR_NP_DBG_SFR_ACCESS_SFR_REQ_QW,
      ._desc = "Toggle to indicates a new request",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "SFR_WT_ENA",
      ._bpos = AR_NP_DBG_SFR_ACCESS_SFR_WT_ENA_BP,
      ._mask = AR_NP_DBG_SFR_ACCESS_SFR_WT_ENA_MASK,
      ._rval = AR_NP_DBG_SFR_ACCESS_RSTDATA & AR_NP_DBG_SFR_ACCESS_SFR_WT_ENA_MASK,
      ._index = AR_NP_DBG_SFR_ACCESS_SFR_WT_ENA_QW,
      ._desc = "Set to 1 to indicate a write request, otherwise it is a read request",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "SFR_WT_DATA",
      ._bpos = AR_NP_DBG_SFR_ACCESS_SFR_WT_DATA_BP,
      ._mask = AR_NP_DBG_SFR_ACCESS_SFR_WT_DATA_MASK,
      ._rval = AR_NP_DBG_SFR_ACCESS_RSTDATA & AR_NP_DBG_SFR_ACCESS_SFR_WT_DATA_MASK,
      ._index = AR_NP_DBG_SFR_ACCESS_SFR_WT_DATA_QW,
      ._desc = "Data to be written",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "SFR_RD_DATA",
      ._bpos = AR_NP_DBG_SFR_ACCESS_SFR_RD_DATA_BP,
      ._mask = AR_NP_DBG_SFR_ACCESS_SFR_RD_DATA_MASK,
      ._rval = AR_NP_DBG_SFR_ACCESS_RSTDATA & AR_NP_DBG_SFR_ACCESS_SFR_RD_DATA_MASK,
      ._index = AR_NP_DBG_SFR_ACCESS_SFR_RD_DATA_QW,
      ._desc = "Data from a read operation, it is valid when SFR_REQ_DATA_VALID is set",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SFR_ADDR",
      ._bpos = AR_NP_DBG_SFR_ACCESS_SFR_ADDR_BP,
      ._mask = AR_NP_DBG_SFR_ACCESS_SFR_ADDR_MASK,
      ._rval = AR_NP_DBG_SFR_ACCESS_RSTDATA & AR_NP_DBG_SFR_ACCESS_SFR_ADDR_MASK,
      ._index = AR_NP_DBG_SFR_ACCESS_SFR_ADDR_QW,
      ._desc = "Address field for read/write",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_dbg_processor_detail[] = {
    { ._name = "DEBUGACS",
      ._bpos = AR_NP_DBG_PROCESSOR_DEBUGACS_BP,
      ._mask = AR_NP_DBG_PROCESSOR_DEBUGACS_MASK,
      ._rval = AR_NP_DBG_PROCESSOR_RSTDATA & AR_NP_DBG_PROCESSOR_DEBUGACS_MASK,
      ._index = AR_NP_DBG_PROCESSOR_DEBUGACS_QW,
      ._desc = "1 indicates debugger is active",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CODERUN",
      ._bpos = AR_NP_DBG_PROCESSOR_CODERUN_BP,
      ._mask = AR_NP_DBG_PROCESSOR_CODERUN_MASK,
      ._rval = AR_NP_DBG_PROCESSOR_RSTDATA & AR_NP_DBG_PROCESSOR_CODERUN_MASK,
      ._index = AR_NP_DBG_PROCESSOR_CODERUN_QW,
      ._desc = "1 indicates code is running",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "HALT_PROC_CLK",
      ._bpos = AR_NP_DBG_PROCESSOR_HALT_PROC_CLK_BP,
      ._mask = AR_NP_DBG_PROCESSOR_HALT_PROC_CLK_MASK,
      ._rval = AR_NP_DBG_PROCESSOR_RSTDATA & AR_NP_DBG_PROCESSOR_HALT_PROC_CLK_MASK,
      ._index = AR_NP_DBG_PROCESSOR_HALT_PROC_CLK_QW,
      ._desc = "1 to halt the clock, 0 to resume",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "ENA_INT",
      ._bpos = AR_NP_DBG_PROCESSOR_ENA_INT_BP,
      ._mask = AR_NP_DBG_PROCESSOR_ENA_INT_MASK,
      ._rval = AR_NP_DBG_PROCESSOR_RSTDATA & AR_NP_DBG_PROCESSOR_ENA_INT_MASK,
      ._index = AR_NP_DBG_PROCESSOR_ENA_INT_QW,
      ._desc = "Enable the MMR access to INT",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "INTS",
      ._bpos = AR_NP_DBG_PROCESSOR_INTS_BP,
      ._mask = AR_NP_DBG_PROCESSOR_INTS_MASK,
      ._rval = AR_NP_DBG_PROCESSOR_RSTDATA & AR_NP_DBG_PROCESSOR_INTS_MASK,
      ._index = AR_NP_DBG_PROCESSOR_INTS_QW,
      ._desc = "Processor Interrupts, connects to the 7 interrupt pins on the 8051",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_cfg_req_sbus_detail[] = {
    { ._name = "EXE",
      ._bpos = AR_NP_CFG_REQ_SBUS_EXE_BP,
      ._mask = AR_NP_CFG_REQ_SBUS_EXE_MASK,
      ._rval = AR_NP_CFG_REQ_SBUS_RSTDATA & AR_NP_CFG_REQ_SBUS_EXE_MASK,
      ._index = AR_NP_CFG_REQ_SBUS_EXE_QW,
      ._desc = "Signal used to initiates the SBus request",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "DATA",
      ._bpos = AR_NP_CFG_REQ_SBUS_DATA_BP,
      ._mask = AR_NP_CFG_REQ_SBUS_DATA_MASK,
      ._rval = AR_NP_CFG_REQ_SBUS_RSTDATA & AR_NP_CFG_REQ_SBUS_DATA_MASK,
      ._index = AR_NP_CFG_REQ_SBUS_DATA_QW,
      ._desc = "SBus data input (write)",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "CMD",
      ._bpos = AR_NP_CFG_REQ_SBUS_CMD_BP,
      ._mask = AR_NP_CFG_REQ_SBUS_CMD_MASK,
      ._rval = AR_NP_CFG_REQ_SBUS_RSTDATA & AR_NP_CFG_REQ_SBUS_CMD_MASK,
      ._index = AR_NP_CFG_REQ_SBUS_CMD_QW,
      ._desc = "SBus Command",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "DATA_ADDR",
      ._bpos = AR_NP_CFG_REQ_SBUS_DATA_ADDR_BP,
      ._mask = AR_NP_CFG_REQ_SBUS_DATA_ADDR_MASK,
      ._rval = AR_NP_CFG_REQ_SBUS_RSTDATA & AR_NP_CFG_REQ_SBUS_DATA_ADDR_MASK,
      ._index = AR_NP_CFG_REQ_SBUS_DATA_ADDR_QW,
      ._desc = "Data Address within the targeted SBus Receiver (RX)",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "RCV_ADDR",
      ._bpos = AR_NP_CFG_REQ_SBUS_RCV_ADDR_BP,
      ._mask = AR_NP_CFG_REQ_SBUS_RCV_ADDR_MASK,
      ._rval = AR_NP_CFG_REQ_SBUS_RSTDATA & AR_NP_CFG_REQ_SBUS_RCV_ADDR_MASK,
      ._index = AR_NP_CFG_REQ_SBUS_RCV_ADDR_QW,
      ._desc = "Address of the destination SBus RX",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_cfg_rsp_sbus_detail[] = {
    { ._name = "DATA_VLD_MODE_PROC",
      ._bpos = AR_NP_CFG_RSP_SBUS_DATA_VLD_MODE_PROC_BP,
      ._mask = AR_NP_CFG_RSP_SBUS_DATA_VLD_MODE_PROC_MASK,
      ._rval = AR_NP_CFG_RSP_SBUS_RSTDATA & AR_NP_CFG_RSP_SBUS_DATA_VLD_MODE_PROC_MASK,
      ._index = AR_NP_CFG_RSP_SBUS_DATA_VLD_MODE_PROC_QW,
      ._desc = "0: level mode, 1 toggle mode",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "DATA_VLD_MODE_MMR",
      ._bpos = AR_NP_CFG_RSP_SBUS_DATA_VLD_MODE_MMR_BP,
      ._mask = AR_NP_CFG_RSP_SBUS_DATA_VLD_MODE_MMR_MASK,
      ._rval = AR_NP_CFG_RSP_SBUS_RSTDATA & AR_NP_CFG_RSP_SBUS_DATA_VLD_MODE_MMR_MASK,
      ._index = AR_NP_CFG_RSP_SBUS_DATA_VLD_MODE_MMR_QW,
      ._desc = "Same as above",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "DONE",
      ._bpos = AR_NP_CFG_RSP_SBUS_DONE_BP,
      ._mask = AR_NP_CFG_RSP_SBUS_DONE_MASK,
      ._rval = AR_NP_CFG_RSP_SBUS_RSTDATA & AR_NP_CFG_RSP_SBUS_DONE_MASK,
      ._index = AR_NP_CFG_RSP_SBUS_DONE_QW,
      ._desc = "Handshake signal from the SBus Master to indicate the request has been received",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "DATA_OUT",
      ._bpos = AR_NP_CFG_RSP_SBUS_DATA_OUT_BP,
      ._mask = AR_NP_CFG_RSP_SBUS_DATA_OUT_MASK,
      ._rval = AR_NP_CFG_RSP_SBUS_RSTDATA & AR_NP_CFG_RSP_SBUS_DATA_OUT_MASK,
      ._index = AR_NP_CFG_RSP_SBUS_DATA_OUT_QW,
      ._desc = "SBus data output(read)",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "RCV_DATA_VALID",
      ._bpos = AR_NP_CFG_RSP_SBUS_RCV_DATA_VALID_BP,
      ._mask = AR_NP_CFG_RSP_SBUS_RCV_DATA_VALID_MASK,
      ._rval = AR_NP_CFG_RSP_SBUS_RSTDATA & AR_NP_CFG_RSP_SBUS_RCV_DATA_VALID_MASK,
      ._index = AR_NP_CFG_RSP_SBUS_RCV_DATA_VALID_QW,
      ._desc = "Indicating that the result code and result data are valid",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "RESULT_CODE",
      ._bpos = AR_NP_CFG_RSP_SBUS_RESULT_CODE_BP,
      ._mask = AR_NP_CFG_RSP_SBUS_RESULT_CODE_MASK,
      ._rval = AR_NP_CFG_RSP_SBUS_RSTDATA & AR_NP_CFG_RSP_SBUS_RESULT_CODE_MASK,
      ._index = AR_NP_CFG_RSP_SBUS_RESULT_CODE_QW,
      ._desc = "Result code from the SBus request",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_cfg_req_cbus_detail[] = {
    { ._name = "EXE",
      ._bpos = AR_NP_CFG_REQ_CBUS_EXE_BP,
      ._mask = AR_NP_CFG_REQ_CBUS_EXE_MASK,
      ._rval = AR_NP_CFG_REQ_CBUS_RSTDATA & AR_NP_CFG_REQ_CBUS_EXE_MASK,
      ._index = AR_NP_CFG_REQ_CBUS_EXE_QW,
      ._desc = "Signal used to initiates the CBus request",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "DATA",
      ._bpos = AR_NP_CFG_REQ_CBUS_DATA_BP,
      ._mask = AR_NP_CFG_REQ_CBUS_DATA_MASK,
      ._rval = AR_NP_CFG_REQ_CBUS_RSTDATA & AR_NP_CFG_REQ_CBUS_DATA_MASK,
      ._index = AR_NP_CFG_REQ_CBUS_DATA_QW,
      ._desc = "CBus data input (write)",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "CMD",
      ._bpos = AR_NP_CFG_REQ_CBUS_CMD_BP,
      ._mask = AR_NP_CFG_REQ_CBUS_CMD_MASK,
      ._rval = AR_NP_CFG_REQ_CBUS_RSTDATA & AR_NP_CFG_REQ_CBUS_CMD_MASK,
      ._index = AR_NP_CFG_REQ_CBUS_CMD_QW,
      ._desc = "CBus Command",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "DATA_ADDR",
      ._bpos = AR_NP_CFG_REQ_CBUS_DATA_ADDR_BP,
      ._mask = AR_NP_CFG_REQ_CBUS_DATA_ADDR_MASK,
      ._rval = AR_NP_CFG_REQ_CBUS_RSTDATA & AR_NP_CFG_REQ_CBUS_DATA_ADDR_MASK,
      ._index = AR_NP_CFG_REQ_CBUS_DATA_ADDR_QW,
      ._desc = "Data Address within the targeted CBus RX",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "RCV_ADDR",
      ._bpos = AR_NP_CFG_REQ_CBUS_RCV_ADDR_BP,
      ._mask = AR_NP_CFG_REQ_CBUS_RCV_ADDR_MASK,
      ._rval = AR_NP_CFG_REQ_CBUS_RSTDATA & AR_NP_CFG_REQ_CBUS_RCV_ADDR_MASK,
      ._index = AR_NP_CFG_REQ_CBUS_RCV_ADDR_QW,
      ._desc = "Address of the destination CBus RX",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_cfg_rsp_cbus_detail[] = {
    { ._name = "DATA_VLD_MODE_PROC",
      ._bpos = AR_NP_CFG_RSP_CBUS_DATA_VLD_MODE_PROC_BP,
      ._mask = AR_NP_CFG_RSP_CBUS_DATA_VLD_MODE_PROC_MASK,
      ._rval = AR_NP_CFG_RSP_CBUS_RSTDATA & AR_NP_CFG_RSP_CBUS_DATA_VLD_MODE_PROC_MASK,
      ._index = AR_NP_CFG_RSP_CBUS_DATA_VLD_MODE_PROC_QW,
      ._desc = "0: level mode, 1 toggle mode",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "DATA_VLD_MODE_MMR",
      ._bpos = AR_NP_CFG_RSP_CBUS_DATA_VLD_MODE_MMR_BP,
      ._mask = AR_NP_CFG_RSP_CBUS_DATA_VLD_MODE_MMR_MASK,
      ._rval = AR_NP_CFG_RSP_CBUS_RSTDATA & AR_NP_CFG_RSP_CBUS_DATA_VLD_MODE_MMR_MASK,
      ._index = AR_NP_CFG_RSP_CBUS_DATA_VLD_MODE_MMR_QW,
      ._desc = "Same as above",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "DONE",
      ._bpos = AR_NP_CFG_RSP_CBUS_DONE_BP,
      ._mask = AR_NP_CFG_RSP_CBUS_DONE_MASK,
      ._rval = AR_NP_CFG_RSP_CBUS_RSTDATA & AR_NP_CFG_RSP_CBUS_DONE_MASK,
      ._index = AR_NP_CFG_RSP_CBUS_DONE_QW,
      ._desc = "Handshake signal from the CBus Controller to indicate a new request has been received",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "DATA_OUT",
      ._bpos = AR_NP_CFG_RSP_CBUS_DATA_OUT_BP,
      ._mask = AR_NP_CFG_RSP_CBUS_DATA_OUT_MASK,
      ._rval = AR_NP_CFG_RSP_CBUS_RSTDATA & AR_NP_CFG_RSP_CBUS_DATA_OUT_MASK,
      ._index = AR_NP_CFG_RSP_CBUS_DATA_OUT_QW,
      ._desc = "Data output (read)",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "RCV_DATA_VALID",
      ._bpos = AR_NP_CFG_RSP_CBUS_RCV_DATA_VALID_BP,
      ._mask = AR_NP_CFG_RSP_CBUS_RCV_DATA_VALID_MASK,
      ._rval = AR_NP_CFG_RSP_CBUS_RSTDATA & AR_NP_CFG_RSP_CBUS_RCV_DATA_VALID_MASK,
      ._index = AR_NP_CFG_RSP_CBUS_RCV_DATA_VALID_QW,
      ._desc = "Indicates that the result code and data are valid",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "RESULT_CODE",
      ._bpos = AR_NP_CFG_RSP_CBUS_RESULT_CODE_BP,
      ._mask = AR_NP_CFG_RSP_CBUS_RESULT_CODE_MASK,
      ._rval = AR_NP_CFG_RSP_CBUS_RSTDATA & AR_NP_CFG_RSP_CBUS_RESULT_CODE_MASK,
      ._index = AR_NP_CFG_RSP_CBUS_RESULT_CODE_QW,
      ._desc = "Result code from CBus request",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_sts_therm_sensor_req_detail[] = {
    { ._name = "VOLTMODE",
      ._bpos = AR_NP_STS_THERM_SENSOR_REQ_VOLTMODE_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_REQ_VOLTMODE_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_REQ_RSTDATA & AR_NP_STS_THERM_SENSOR_REQ_VOLTMODE_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_REQ_VOLTMODE_QW,
      ._desc = "This signal switches the sensor between temperature or voltage conversion mode",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "WRITE",
      ._bpos = AR_NP_STS_THERM_SENSOR_REQ_WRITE_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_REQ_WRITE_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_REQ_RSTDATA & AR_NP_STS_THERM_SENSOR_REQ_WRITE_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_REQ_WRITE_QW,
      ._desc = "When asserted, the data on SENSOR_DATA_IN is written into the memory address selected by SENSOR_ADDR",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "START",
      ._bpos = AR_NP_STS_THERM_SENSOR_REQ_START_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_REQ_START_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_REQ_RSTDATA & AR_NP_STS_THERM_SENSOR_REQ_START_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_REQ_START_QW,
      ._desc = "Active high signal that when asserted will cause the sensor to start a measurement",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "RESET",
      ._bpos = AR_NP_STS_THERM_SENSOR_REQ_RESET_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_REQ_RESET_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_REQ_RSTDATA & AR_NP_STS_THERM_SENSOR_REQ_RESET_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_REQ_RESET_QW,
      ._desc = "Active high signal that when asserted will cause the controllers state machine and internal memory locations to reset to their default voltage or temperature settings depending on the value of SENSOR_VOLT_MODE",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "READ",
      ._bpos = AR_NP_STS_THERM_SENSOR_REQ_READ_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_REQ_READ_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_REQ_RSTDATA & AR_NP_STS_THERM_SENSOR_REQ_READ_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_REQ_READ_QW,
      ._desc = "Active high signal that when asserted will cause data from the memory location SENSOR_ADDR to be placed on SENSOR_DATA_OUT",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "ADDR",
      ._bpos = AR_NP_STS_THERM_SENSOR_REQ_ADDR_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_REQ_ADDR_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_REQ_RSTDATA & AR_NP_STS_THERM_SENSOR_REQ_ADDR_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_REQ_ADDR_QW,
      ._desc = "Memory address used for selecting memory locations for read and writes to the memory block",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "DATA_IN",
      ._bpos = AR_NP_STS_THERM_SENSOR_REQ_DATA_IN_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_REQ_DATA_IN_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_REQ_RSTDATA & AR_NP_STS_THERM_SENSOR_REQ_DATA_IN_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_REQ_DATA_IN_QW,
      ._desc = "Data to be written into the memory block during a memory write operation",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_sts_therm_sensor_rsp_detail[] = {
    { ._name = "WRITE_ACK",
      ._bpos = AR_NP_STS_THERM_SENSOR_RSP_WRITE_ACK_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_RSP_WRITE_ACK_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_RSP_RSTDATA & AR_NP_STS_THERM_SENSOR_RSP_WRITE_ACK_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_RSP_WRITE_ACK_QW,
      ._desc = "Write acknowledge signal indicating that the memory write operation has been completed",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "VALID",
      ._bpos = AR_NP_STS_THERM_SENSOR_RSP_VALID_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_RSP_VALID_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_RSP_RSTDATA & AR_NP_STS_THERM_SENSOR_RSP_VALID_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_RSP_VALID_QW,
      ._desc = "This signal indicates the SENSOR_VALUE bus is valid for reading",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "READ_ACK",
      ._bpos = AR_NP_STS_THERM_SENSOR_RSP_READ_ACK_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_RSP_READ_ACK_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_RSP_RSTDATA & AR_NP_STS_THERM_SENSOR_RSP_READ_ACK_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_RSP_READ_ACK_QW,
      ._desc = "Read acknowledge signal indicating that the memory data on SENSOR_DATA_OUT is valid",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "VALUE",
      ._bpos = AR_NP_STS_THERM_SENSOR_RSP_VALUE_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_RSP_VALUE_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_RSP_RSTDATA & AR_NP_STS_THERM_SENSOR_RSP_VALUE_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_RSP_VALUE_QW,
      ._desc = "In temperature mode: twos complement temperature result in degrees Celsius",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "DATA_OUT",
      ._bpos = AR_NP_STS_THERM_SENSOR_RSP_DATA_OUT_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_RSP_DATA_OUT_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_RSP_RSTDATA & AR_NP_STS_THERM_SENSOR_RSP_DATA_OUT_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_RSP_DATA_OUT_QW,
      ._desc = "Data from the memory block during a memory read operation",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_dbg_errinj_ecc_detail[] = {
    { ._name = "CLR_ERR",
      ._bpos = AR_NP_DBG_ERRINJ_ECC_CLR_ERR_BP,
      ._mask = AR_NP_DBG_ERRINJ_ECC_CLR_ERR_MASK,
      ._rval = AR_NP_DBG_ERRINJ_ECC_RSTDATA & AR_NP_DBG_ERRINJ_ECC_CLR_ERR_MASK,
      ._index = AR_NP_DBG_ERRINJ_ECC_CLR_ERR_QW,
      ._desc = "When asserted, clear all the error counters, Error Info is not clear by this",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HRO"
    },
    { ._name = "ADDRESS",
      ._bpos = AR_NP_DBG_ERRINJ_ECC_ADDRESS_BP,
      ._mask = AR_NP_DBG_ERRINJ_ECC_ADDRESS_MASK,
      ._rval = AR_NP_DBG_ERRINJ_ECC_RSTDATA & AR_NP_DBG_ERRINJ_ECC_ADDRESS_MASK,
      ._index = AR_NP_DBG_ERRINJ_ECC_ADDRESS_QW,
      ._desc = "This field indicates the address for which error injection is to occur",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HRO"
    },
    { ._name = "CHECKBYTE",
      ._bpos = AR_NP_DBG_ERRINJ_ECC_CHECKBYTE_BP,
      ._mask = AR_NP_DBG_ERRINJ_ECC_CHECKBYTE_MASK,
      ._rval = AR_NP_DBG_ERRINJ_ECC_RSTDATA & AR_NP_DBG_ERRINJ_ECC_CHECKBYTE_MASK,
      ._index = AR_NP_DBG_ERRINJ_ECC_CHECKBYTE_QW,
      ._desc = "When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome for the memory address read to be inverted",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HRO"
    },
    { ._name = "RAMSELECT",
      ._bpos = AR_NP_DBG_ERRINJ_ECC_RAMSELECT_BP,
      ._mask = AR_NP_DBG_ERRINJ_ECC_RAMSELECT_MASK,
      ._rval = AR_NP_DBG_ERRINJ_ECC_RSTDATA & AR_NP_DBG_ERRINJ_ECC_RAMSELECT_MASK,
      ._index = AR_NP_DBG_ERRINJ_ECC_RAMSELECT_QW,
      ._desc = "2'b01: IRAM 2'b10: DRAM 2'b11: IDRAM",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HRO"
    },
    { ._name = "MODE",
      ._bpos = AR_NP_DBG_ERRINJ_ECC_MODE_BP,
      ._mask = AR_NP_DBG_ERRINJ_ECC_MODE_MASK,
      ._rval = AR_NP_DBG_ERRINJ_ECC_RSTDATA & AR_NP_DBG_ERRINJ_ECC_MODE_MASK,
      ._index = AR_NP_DBG_ERRINJ_ECC_MODE_QW,
      ._desc = "Mode 0: Inject error once, clear enable to rerun Mode 1: Inject error always Mode 2: Inject error once if address matches, clear enable to rerun Mode 3: Inject error always if address matches",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE",
      ._bpos = AR_NP_DBG_ERRINJ_ECC_ENABLE_BP,
      ._mask = AR_NP_DBG_ERRINJ_ECC_ENABLE_MASK,
      ._rval = AR_NP_DBG_ERRINJ_ECC_RSTDATA & AR_NP_DBG_ERRINJ_ECC_ENABLE_MASK,
      ._index = AR_NP_DBG_ERRINJ_ECC_ENABLE_QW,
      ._desc = "Enable Error Injection",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_info_iram_detail[] = {
    { ._name = "MBE_SYND",
      ._bpos = AR_NP_ERR_INFO_IRAM_MBE_SYND_BP,
      ._mask = AR_NP_ERR_INFO_IRAM_MBE_SYND_MASK,
      ._rval = AR_NP_ERR_INFO_IRAM_RSTDATA & AR_NP_ERR_INFO_IRAM_MBE_SYND_MASK,
      ._index = AR_NP_ERR_INFO_IRAM_MBE_SYND_QW,
      ._desc = "MBE Syndrome",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "SBE_SYND",
      ._bpos = AR_NP_ERR_INFO_IRAM_SBE_SYND_BP,
      ._mask = AR_NP_ERR_INFO_IRAM_SBE_SYND_MASK,
      ._rval = AR_NP_ERR_INFO_IRAM_RSTDATA & AR_NP_ERR_INFO_IRAM_SBE_SYND_MASK,
      ._index = AR_NP_ERR_INFO_IRAM_SBE_SYND_QW,
      ._desc = "SBE syndrome",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "MMR_CREATED_MBE",
      ._bpos = AR_NP_ERR_INFO_IRAM_MMR_CREATED_MBE_BP,
      ._mask = AR_NP_ERR_INFO_IRAM_MMR_CREATED_MBE_MASK,
      ._rval = AR_NP_ERR_INFO_IRAM_RSTDATA & AR_NP_ERR_INFO_IRAM_MMR_CREATED_MBE_MASK,
      ._index = AR_NP_ERR_INFO_IRAM_MMR_CREATED_MBE_QW,
      ._desc = "indicates MBE occured due to MMR error injection",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "MMR_CREATED_SBE",
      ._bpos = AR_NP_ERR_INFO_IRAM_MMR_CREATED_SBE_BP,
      ._mask = AR_NP_ERR_INFO_IRAM_MMR_CREATED_SBE_MASK,
      ._rval = AR_NP_ERR_INFO_IRAM_RSTDATA & AR_NP_ERR_INFO_IRAM_MMR_CREATED_SBE_MASK,
      ._index = AR_NP_ERR_INFO_IRAM_MMR_CREATED_SBE_QW,
      ._desc = "indicates SBE occured due to MMR error injection",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "MBE",
      ._bpos = AR_NP_ERR_INFO_IRAM_MBE_BP,
      ._mask = AR_NP_ERR_INFO_IRAM_MBE_MASK,
      ._rval = AR_NP_ERR_INFO_IRAM_RSTDATA & AR_NP_ERR_INFO_IRAM_MBE_MASK,
      ._index = AR_NP_ERR_INFO_IRAM_MBE_QW,
      ._desc = "indicates MBE occured",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "SBE",
      ._bpos = AR_NP_ERR_INFO_IRAM_SBE_BP,
      ._mask = AR_NP_ERR_INFO_IRAM_SBE_MASK,
      ._rval = AR_NP_ERR_INFO_IRAM_RSTDATA & AR_NP_ERR_INFO_IRAM_SBE_MASK,
      ._index = AR_NP_ERR_INFO_IRAM_SBE_QW,
      ._desc = "indicates SBE occured",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_info_dram_detail[] = {
    { ._name = "MBE_SYND",
      ._bpos = AR_NP_ERR_INFO_DRAM_MBE_SYND_BP,
      ._mask = AR_NP_ERR_INFO_DRAM_MBE_SYND_MASK,
      ._rval = AR_NP_ERR_INFO_DRAM_RSTDATA & AR_NP_ERR_INFO_DRAM_MBE_SYND_MASK,
      ._index = AR_NP_ERR_INFO_DRAM_MBE_SYND_QW,
      ._desc = "MBE Syndrome",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "SBE_SYND",
      ._bpos = AR_NP_ERR_INFO_DRAM_SBE_SYND_BP,
      ._mask = AR_NP_ERR_INFO_DRAM_SBE_SYND_MASK,
      ._rval = AR_NP_ERR_INFO_DRAM_RSTDATA & AR_NP_ERR_INFO_DRAM_SBE_SYND_MASK,
      ._index = AR_NP_ERR_INFO_DRAM_SBE_SYND_QW,
      ._desc = "SBE syndrome",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "MMR_CREATED_MBE",
      ._bpos = AR_NP_ERR_INFO_DRAM_MMR_CREATED_MBE_BP,
      ._mask = AR_NP_ERR_INFO_DRAM_MMR_CREATED_MBE_MASK,
      ._rval = AR_NP_ERR_INFO_DRAM_RSTDATA & AR_NP_ERR_INFO_DRAM_MMR_CREATED_MBE_MASK,
      ._index = AR_NP_ERR_INFO_DRAM_MMR_CREATED_MBE_QW,
      ._desc = "indicates MBE occured due to MMR error injection",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "MMR_CREATED_SBE",
      ._bpos = AR_NP_ERR_INFO_DRAM_MMR_CREATED_SBE_BP,
      ._mask = AR_NP_ERR_INFO_DRAM_MMR_CREATED_SBE_MASK,
      ._rval = AR_NP_ERR_INFO_DRAM_RSTDATA & AR_NP_ERR_INFO_DRAM_MMR_CREATED_SBE_MASK,
      ._index = AR_NP_ERR_INFO_DRAM_MMR_CREATED_SBE_QW,
      ._desc = "indicates SBE occured due to MMR error injection",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "MBE",
      ._bpos = AR_NP_ERR_INFO_DRAM_MBE_BP,
      ._mask = AR_NP_ERR_INFO_DRAM_MBE_MASK,
      ._rval = AR_NP_ERR_INFO_DRAM_RSTDATA & AR_NP_ERR_INFO_DRAM_MBE_MASK,
      ._index = AR_NP_ERR_INFO_DRAM_MBE_QW,
      ._desc = "indicates MBE occured",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "SBE",
      ._bpos = AR_NP_ERR_INFO_DRAM_SBE_BP,
      ._mask = AR_NP_ERR_INFO_DRAM_SBE_MASK,
      ._rval = AR_NP_ERR_INFO_DRAM_RSTDATA & AR_NP_ERR_INFO_DRAM_SBE_MASK,
      ._index = AR_NP_ERR_INFO_DRAM_SBE_QW,
      ._desc = "indicates SBE occured",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_info_idram_detail[] = {
    { ._name = "MBE_SYND",
      ._bpos = AR_NP_ERR_INFO_IDRAM_MBE_SYND_BP,
      ._mask = AR_NP_ERR_INFO_IDRAM_MBE_SYND_MASK,
      ._rval = AR_NP_ERR_INFO_IDRAM_RSTDATA & AR_NP_ERR_INFO_IDRAM_MBE_SYND_MASK,
      ._index = AR_NP_ERR_INFO_IDRAM_MBE_SYND_QW,
      ._desc = "MBE Syndrome",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "SBE_SYND",
      ._bpos = AR_NP_ERR_INFO_IDRAM_SBE_SYND_BP,
      ._mask = AR_NP_ERR_INFO_IDRAM_SBE_SYND_MASK,
      ._rval = AR_NP_ERR_INFO_IDRAM_RSTDATA & AR_NP_ERR_INFO_IDRAM_SBE_SYND_MASK,
      ._index = AR_NP_ERR_INFO_IDRAM_SBE_SYND_QW,
      ._desc = "SBE syndrome",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "MMR_CREATED_MBE",
      ._bpos = AR_NP_ERR_INFO_IDRAM_MMR_CREATED_MBE_BP,
      ._mask = AR_NP_ERR_INFO_IDRAM_MMR_CREATED_MBE_MASK,
      ._rval = AR_NP_ERR_INFO_IDRAM_RSTDATA & AR_NP_ERR_INFO_IDRAM_MMR_CREATED_MBE_MASK,
      ._index = AR_NP_ERR_INFO_IDRAM_MMR_CREATED_MBE_QW,
      ._desc = "indicates MBE occured due to MMR error injection",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "MMR_CREATED_SBE",
      ._bpos = AR_NP_ERR_INFO_IDRAM_MMR_CREATED_SBE_BP,
      ._mask = AR_NP_ERR_INFO_IDRAM_MMR_CREATED_SBE_MASK,
      ._rval = AR_NP_ERR_INFO_IDRAM_RSTDATA & AR_NP_ERR_INFO_IDRAM_MMR_CREATED_SBE_MASK,
      ._index = AR_NP_ERR_INFO_IDRAM_MMR_CREATED_SBE_QW,
      ._desc = "indicates SBE occured due to MMR error injection",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "MBE",
      ._bpos = AR_NP_ERR_INFO_IDRAM_MBE_BP,
      ._mask = AR_NP_ERR_INFO_IDRAM_MBE_MASK,
      ._rval = AR_NP_ERR_INFO_IDRAM_RSTDATA & AR_NP_ERR_INFO_IDRAM_MBE_MASK,
      ._index = AR_NP_ERR_INFO_IDRAM_MBE_QW,
      ._desc = "indicates MBE occured",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = "SBE",
      ._bpos = AR_NP_ERR_INFO_IDRAM_SBE_BP,
      ._mask = AR_NP_ERR_INFO_IDRAM_SBE_MASK,
      ._rval = AR_NP_ERR_INFO_IDRAM_RSTDATA & AR_NP_ERR_INFO_IDRAM_SBE_MASK,
      ._index = AR_NP_ERR_INFO_IDRAM_SBE_QW,
      ._desc = "indicates SBE occured",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_info_cnt_iram_detail[] = {
    { ._name = "MBE_COUNT",
      ._bpos = AR_NP_ERR_INFO_CNT_IRAM_MBE_COUNT_BP,
      ._mask = AR_NP_ERR_INFO_CNT_IRAM_MBE_COUNT_MASK,
      ._rval = AR_NP_ERR_INFO_CNT_IRAM_RSTDATA & AR_NP_ERR_INFO_CNT_IRAM_MBE_COUNT_MASK,
      ._index = AR_NP_ERR_INFO_CNT_IRAM_MBE_COUNT_QW,
      ._desc = "Number of MBE error",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW"
    },
    { ._name = "SBE_COUNT",
      ._bpos = AR_NP_ERR_INFO_CNT_IRAM_SBE_COUNT_BP,
      ._mask = AR_NP_ERR_INFO_CNT_IRAM_SBE_COUNT_MASK,
      ._rval = AR_NP_ERR_INFO_CNT_IRAM_RSTDATA & AR_NP_ERR_INFO_CNT_IRAM_SBE_COUNT_MASK,
      ._index = AR_NP_ERR_INFO_CNT_IRAM_SBE_COUNT_QW,
      ._desc = "Number of SBE Error",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_info_cnt_dram_detail[] = {
    { ._name = "MBE_COUNT",
      ._bpos = AR_NP_ERR_INFO_CNT_DRAM_MBE_COUNT_BP,
      ._mask = AR_NP_ERR_INFO_CNT_DRAM_MBE_COUNT_MASK,
      ._rval = AR_NP_ERR_INFO_CNT_DRAM_RSTDATA & AR_NP_ERR_INFO_CNT_DRAM_MBE_COUNT_MASK,
      ._index = AR_NP_ERR_INFO_CNT_DRAM_MBE_COUNT_QW,
      ._desc = "Number of MBE error",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW"
    },
    { ._name = "SBE_COUNT",
      ._bpos = AR_NP_ERR_INFO_CNT_DRAM_SBE_COUNT_BP,
      ._mask = AR_NP_ERR_INFO_CNT_DRAM_SBE_COUNT_MASK,
      ._rval = AR_NP_ERR_INFO_CNT_DRAM_RSTDATA & AR_NP_ERR_INFO_CNT_DRAM_SBE_COUNT_MASK,
      ._index = AR_NP_ERR_INFO_CNT_DRAM_SBE_COUNT_QW,
      ._desc = "Number of SBE Error",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_info_cnt_idram_detail[] = {
    { ._name = "MBE_COUNT",
      ._bpos = AR_NP_ERR_INFO_CNT_IDRAM_MBE_COUNT_BP,
      ._mask = AR_NP_ERR_INFO_CNT_IDRAM_MBE_COUNT_MASK,
      ._rval = AR_NP_ERR_INFO_CNT_IDRAM_RSTDATA & AR_NP_ERR_INFO_CNT_IDRAM_MBE_COUNT_MASK,
      ._index = AR_NP_ERR_INFO_CNT_IDRAM_MBE_COUNT_QW,
      ._desc = "Number of MBE error",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW"
    },
    { ._name = "SBE_COUNT",
      ._bpos = AR_NP_ERR_INFO_CNT_IDRAM_SBE_COUNT_BP,
      ._mask = AR_NP_ERR_INFO_CNT_IDRAM_SBE_COUNT_MASK,
      ._rval = AR_NP_ERR_INFO_CNT_IDRAM_RSTDATA & AR_NP_ERR_INFO_CNT_IDRAM_SBE_COUNT_MASK,
      ._index = AR_NP_ERR_INFO_CNT_IDRAM_SBE_COUNT_QW,
      ._desc = "Number of SBE Error",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_deb_mon_sfr0_detail[] = {
    { ._name = "CBUS_DATA0",
      ._bpos = AR_NP_DEB_MON_SFR0_CBUS_DATA0_BP,
      ._mask = AR_NP_DEB_MON_SFR0_CBUS_DATA0_MASK,
      ._rval = AR_NP_DEB_MON_SFR0_RSTDATA & AR_NP_DEB_MON_SFR0_CBUS_DATA0_MASK,
      ._index = AR_NP_DEB_MON_SFR0_CBUS_DATA0_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_DATA1",
      ._bpos = AR_NP_DEB_MON_SFR0_CBUS_DATA1_BP,
      ._mask = AR_NP_DEB_MON_SFR0_CBUS_DATA1_MASK,
      ._rval = AR_NP_DEB_MON_SFR0_RSTDATA & AR_NP_DEB_MON_SFR0_CBUS_DATA1_MASK,
      ._index = AR_NP_DEB_MON_SFR0_CBUS_DATA1_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_DATA2",
      ._bpos = AR_NP_DEB_MON_SFR0_CBUS_DATA2_BP,
      ._mask = AR_NP_DEB_MON_SFR0_CBUS_DATA2_MASK,
      ._rval = AR_NP_DEB_MON_SFR0_RSTDATA & AR_NP_DEB_MON_SFR0_CBUS_DATA2_MASK,
      ._index = AR_NP_DEB_MON_SFR0_CBUS_DATA2_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_DATA3",
      ._bpos = AR_NP_DEB_MON_SFR0_CBUS_DATA3_BP,
      ._mask = AR_NP_DEB_MON_SFR0_CBUS_DATA3_MASK,
      ._rval = AR_NP_DEB_MON_SFR0_RSTDATA & AR_NP_DEB_MON_SFR0_CBUS_DATA3_MASK,
      ._index = AR_NP_DEB_MON_SFR0_CBUS_DATA3_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_DADDR",
      ._bpos = AR_NP_DEB_MON_SFR0_CBUS_DADDR_BP,
      ._mask = AR_NP_DEB_MON_SFR0_CBUS_DADDR_MASK,
      ._rval = AR_NP_DEB_MON_SFR0_RSTDATA & AR_NP_DEB_MON_SFR0_CBUS_DADDR_MASK,
      ._index = AR_NP_DEB_MON_SFR0_CBUS_DADDR_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_RADDR",
      ._bpos = AR_NP_DEB_MON_SFR0_CBUS_RADDR_BP,
      ._mask = AR_NP_DEB_MON_SFR0_CBUS_RADDR_MASK,
      ._rval = AR_NP_DEB_MON_SFR0_RSTDATA & AR_NP_DEB_MON_SFR0_CBUS_RADDR_MASK,
      ._index = AR_NP_DEB_MON_SFR0_CBUS_RADDR_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_COMMD",
      ._bpos = AR_NP_DEB_MON_SFR0_CBUS_COMMD_BP,
      ._mask = AR_NP_DEB_MON_SFR0_CBUS_COMMD_MASK,
      ._rval = AR_NP_DEB_MON_SFR0_RSTDATA & AR_NP_DEB_MON_SFR0_CBUS_COMMD_MASK,
      ._index = AR_NP_DEB_MON_SFR0_CBUS_COMMD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_MISCS",
      ._bpos = AR_NP_DEB_MON_SFR0_CBUS_MISCS_BP,
      ._mask = AR_NP_DEB_MON_SFR0_CBUS_MISCS_MASK,
      ._rval = AR_NP_DEB_MON_SFR0_RSTDATA & AR_NP_DEB_MON_SFR0_CBUS_MISCS_MASK,
      ._index = AR_NP_DEB_MON_SFR0_CBUS_MISCS_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_deb_mon_sfr1_detail[] = {
    { ._name = "SBUS_DATA0",
      ._bpos = AR_NP_DEB_MON_SFR1_SBUS_DATA0_BP,
      ._mask = AR_NP_DEB_MON_SFR1_SBUS_DATA0_MASK,
      ._rval = AR_NP_DEB_MON_SFR1_RSTDATA & AR_NP_DEB_MON_SFR1_SBUS_DATA0_MASK,
      ._index = AR_NP_DEB_MON_SFR1_SBUS_DATA0_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_DATA1",
      ._bpos = AR_NP_DEB_MON_SFR1_SBUS_DATA1_BP,
      ._mask = AR_NP_DEB_MON_SFR1_SBUS_DATA1_MASK,
      ._rval = AR_NP_DEB_MON_SFR1_RSTDATA & AR_NP_DEB_MON_SFR1_SBUS_DATA1_MASK,
      ._index = AR_NP_DEB_MON_SFR1_SBUS_DATA1_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_DATA2",
      ._bpos = AR_NP_DEB_MON_SFR1_SBUS_DATA2_BP,
      ._mask = AR_NP_DEB_MON_SFR1_SBUS_DATA2_MASK,
      ._rval = AR_NP_DEB_MON_SFR1_RSTDATA & AR_NP_DEB_MON_SFR1_SBUS_DATA2_MASK,
      ._index = AR_NP_DEB_MON_SFR1_SBUS_DATA2_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_DATA3",
      ._bpos = AR_NP_DEB_MON_SFR1_SBUS_DATA3_BP,
      ._mask = AR_NP_DEB_MON_SFR1_SBUS_DATA3_MASK,
      ._rval = AR_NP_DEB_MON_SFR1_RSTDATA & AR_NP_DEB_MON_SFR1_SBUS_DATA3_MASK,
      ._index = AR_NP_DEB_MON_SFR1_SBUS_DATA3_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_DADDR",
      ._bpos = AR_NP_DEB_MON_SFR1_SBUS_DADDR_BP,
      ._mask = AR_NP_DEB_MON_SFR1_SBUS_DADDR_MASK,
      ._rval = AR_NP_DEB_MON_SFR1_RSTDATA & AR_NP_DEB_MON_SFR1_SBUS_DADDR_MASK,
      ._index = AR_NP_DEB_MON_SFR1_SBUS_DADDR_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_RADDR",
      ._bpos = AR_NP_DEB_MON_SFR1_SBUS_RADDR_BP,
      ._mask = AR_NP_DEB_MON_SFR1_SBUS_RADDR_MASK,
      ._rval = AR_NP_DEB_MON_SFR1_RSTDATA & AR_NP_DEB_MON_SFR1_SBUS_RADDR_MASK,
      ._index = AR_NP_DEB_MON_SFR1_SBUS_RADDR_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_COMMD",
      ._bpos = AR_NP_DEB_MON_SFR1_SBUS_COMMD_BP,
      ._mask = AR_NP_DEB_MON_SFR1_SBUS_COMMD_MASK,
      ._rval = AR_NP_DEB_MON_SFR1_RSTDATA & AR_NP_DEB_MON_SFR1_SBUS_COMMD_MASK,
      ._index = AR_NP_DEB_MON_SFR1_SBUS_COMMD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_MISCS",
      ._bpos = AR_NP_DEB_MON_SFR1_SBUS_MISCS_BP,
      ._mask = AR_NP_DEB_MON_SFR1_SBUS_MISCS_MASK,
      ._rval = AR_NP_DEB_MON_SFR1_RSTDATA & AR_NP_DEB_MON_SFR1_SBUS_MISCS_MASK,
      ._index = AR_NP_DEB_MON_SFR1_SBUS_MISCS_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_deb_mon_sfr2_detail[] = {
    { ._name = "TMP08",
      ._bpos = AR_NP_DEB_MON_SFR2_TMP08_BP,
      ._mask = AR_NP_DEB_MON_SFR2_TMP08_MASK,
      ._rval = AR_NP_DEB_MON_SFR2_RSTDATA & AR_NP_DEB_MON_SFR2_TMP08_MASK,
      ._index = AR_NP_DEB_MON_SFR2_TMP08_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP07",
      ._bpos = AR_NP_DEB_MON_SFR2_TMP07_BP,
      ._mask = AR_NP_DEB_MON_SFR2_TMP07_MASK,
      ._rval = AR_NP_DEB_MON_SFR2_RSTDATA & AR_NP_DEB_MON_SFR2_TMP07_MASK,
      ._index = AR_NP_DEB_MON_SFR2_TMP07_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP06",
      ._bpos = AR_NP_DEB_MON_SFR2_TMP06_BP,
      ._mask = AR_NP_DEB_MON_SFR2_TMP06_MASK,
      ._rval = AR_NP_DEB_MON_SFR2_RSTDATA & AR_NP_DEB_MON_SFR2_TMP06_MASK,
      ._index = AR_NP_DEB_MON_SFR2_TMP06_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP05",
      ._bpos = AR_NP_DEB_MON_SFR2_TMP05_BP,
      ._mask = AR_NP_DEB_MON_SFR2_TMP05_MASK,
      ._rval = AR_NP_DEB_MON_SFR2_RSTDATA & AR_NP_DEB_MON_SFR2_TMP05_MASK,
      ._index = AR_NP_DEB_MON_SFR2_TMP05_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP04",
      ._bpos = AR_NP_DEB_MON_SFR2_TMP04_BP,
      ._mask = AR_NP_DEB_MON_SFR2_TMP04_MASK,
      ._rval = AR_NP_DEB_MON_SFR2_RSTDATA & AR_NP_DEB_MON_SFR2_TMP04_MASK,
      ._index = AR_NP_DEB_MON_SFR2_TMP04_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP03",
      ._bpos = AR_NP_DEB_MON_SFR2_TMP03_BP,
      ._mask = AR_NP_DEB_MON_SFR2_TMP03_MASK,
      ._rval = AR_NP_DEB_MON_SFR2_RSTDATA & AR_NP_DEB_MON_SFR2_TMP03_MASK,
      ._index = AR_NP_DEB_MON_SFR2_TMP03_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP02",
      ._bpos = AR_NP_DEB_MON_SFR2_TMP02_BP,
      ._mask = AR_NP_DEB_MON_SFR2_TMP02_MASK,
      ._rval = AR_NP_DEB_MON_SFR2_RSTDATA & AR_NP_DEB_MON_SFR2_TMP02_MASK,
      ._index = AR_NP_DEB_MON_SFR2_TMP02_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP01",
      ._bpos = AR_NP_DEB_MON_SFR2_TMP01_BP,
      ._mask = AR_NP_DEB_MON_SFR2_TMP01_MASK,
      ._rval = AR_NP_DEB_MON_SFR2_RSTDATA & AR_NP_DEB_MON_SFR2_TMP01_MASK,
      ._index = AR_NP_DEB_MON_SFR2_TMP01_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_deb_mon_sfr3_detail[] = {
    { ._name = "TMP16",
      ._bpos = AR_NP_DEB_MON_SFR3_TMP16_BP,
      ._mask = AR_NP_DEB_MON_SFR3_TMP16_MASK,
      ._rval = AR_NP_DEB_MON_SFR3_RSTDATA & AR_NP_DEB_MON_SFR3_TMP16_MASK,
      ._index = AR_NP_DEB_MON_SFR3_TMP16_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP15",
      ._bpos = AR_NP_DEB_MON_SFR3_TMP15_BP,
      ._mask = AR_NP_DEB_MON_SFR3_TMP15_MASK,
      ._rval = AR_NP_DEB_MON_SFR3_RSTDATA & AR_NP_DEB_MON_SFR3_TMP15_MASK,
      ._index = AR_NP_DEB_MON_SFR3_TMP15_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP14",
      ._bpos = AR_NP_DEB_MON_SFR3_TMP14_BP,
      ._mask = AR_NP_DEB_MON_SFR3_TMP14_MASK,
      ._rval = AR_NP_DEB_MON_SFR3_RSTDATA & AR_NP_DEB_MON_SFR3_TMP14_MASK,
      ._index = AR_NP_DEB_MON_SFR3_TMP14_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP13",
      ._bpos = AR_NP_DEB_MON_SFR3_TMP13_BP,
      ._mask = AR_NP_DEB_MON_SFR3_TMP13_MASK,
      ._rval = AR_NP_DEB_MON_SFR3_RSTDATA & AR_NP_DEB_MON_SFR3_TMP13_MASK,
      ._index = AR_NP_DEB_MON_SFR3_TMP13_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP12",
      ._bpos = AR_NP_DEB_MON_SFR3_TMP12_BP,
      ._mask = AR_NP_DEB_MON_SFR3_TMP12_MASK,
      ._rval = AR_NP_DEB_MON_SFR3_RSTDATA & AR_NP_DEB_MON_SFR3_TMP12_MASK,
      ._index = AR_NP_DEB_MON_SFR3_TMP12_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP11",
      ._bpos = AR_NP_DEB_MON_SFR3_TMP11_BP,
      ._mask = AR_NP_DEB_MON_SFR3_TMP11_MASK,
      ._rval = AR_NP_DEB_MON_SFR3_RSTDATA & AR_NP_DEB_MON_SFR3_TMP11_MASK,
      ._index = AR_NP_DEB_MON_SFR3_TMP11_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP10",
      ._bpos = AR_NP_DEB_MON_SFR3_TMP10_BP,
      ._mask = AR_NP_DEB_MON_SFR3_TMP10_MASK,
      ._rval = AR_NP_DEB_MON_SFR3_RSTDATA & AR_NP_DEB_MON_SFR3_TMP10_MASK,
      ._index = AR_NP_DEB_MON_SFR3_TMP10_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP09",
      ._bpos = AR_NP_DEB_MON_SFR3_TMP09_BP,
      ._mask = AR_NP_DEB_MON_SFR3_TMP09_MASK,
      ._rval = AR_NP_DEB_MON_SFR3_RSTDATA & AR_NP_DEB_MON_SFR3_TMP09_MASK,
      ._index = AR_NP_DEB_MON_SFR3_TMP09_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_deb_mon_sfr4_detail[] = {
    { ._name = "CBUS_MISCS_RD",
      ._bpos = AR_NP_DEB_MON_SFR4_CBUS_MISCS_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR4_CBUS_MISCS_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR4_RSTDATA & AR_NP_DEB_MON_SFR4_CBUS_MISCS_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR4_CBUS_MISCS_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_MISCS_RD",
      ._bpos = AR_NP_DEB_MON_SFR4_SBUS_MISCS_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR4_SBUS_MISCS_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR4_RSTDATA & AR_NP_DEB_MON_SFR4_SBUS_MISCS_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR4_SBUS_MISCS_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "PORT3",
      ._bpos = AR_NP_DEB_MON_SFR4_PORT3_BP,
      ._mask = AR_NP_DEB_MON_SFR4_PORT3_MASK,
      ._rval = AR_NP_DEB_MON_SFR4_RSTDATA & AR_NP_DEB_MON_SFR4_PORT3_MASK,
      ._index = AR_NP_DEB_MON_SFR4_PORT3_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "PORT2",
      ._bpos = AR_NP_DEB_MON_SFR4_PORT2_BP,
      ._mask = AR_NP_DEB_MON_SFR4_PORT2_MASK,
      ._rval = AR_NP_DEB_MON_SFR4_RSTDATA & AR_NP_DEB_MON_SFR4_PORT2_MASK,
      ._index = AR_NP_DEB_MON_SFR4_PORT2_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "PORT1",
      ._bpos = AR_NP_DEB_MON_SFR4_PORT1_BP,
      ._mask = AR_NP_DEB_MON_SFR4_PORT1_MASK,
      ._rval = AR_NP_DEB_MON_SFR4_RSTDATA & AR_NP_DEB_MON_SFR4_PORT1_MASK,
      ._index = AR_NP_DEB_MON_SFR4_PORT1_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "PORT0",
      ._bpos = AR_NP_DEB_MON_SFR4_PORT0_BP,
      ._mask = AR_NP_DEB_MON_SFR4_PORT0_MASK,
      ._rval = AR_NP_DEB_MON_SFR4_RSTDATA & AR_NP_DEB_MON_SFR4_PORT0_MASK,
      ._index = AR_NP_DEB_MON_SFR4_PORT0_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP18",
      ._bpos = AR_NP_DEB_MON_SFR4_TMP18_BP,
      ._mask = AR_NP_DEB_MON_SFR4_TMP18_MASK,
      ._rval = AR_NP_DEB_MON_SFR4_RSTDATA & AR_NP_DEB_MON_SFR4_TMP18_MASK,
      ._index = AR_NP_DEB_MON_SFR4_TMP18_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "TMP17",
      ._bpos = AR_NP_DEB_MON_SFR4_TMP17_BP,
      ._mask = AR_NP_DEB_MON_SFR4_TMP17_MASK,
      ._rval = AR_NP_DEB_MON_SFR4_RSTDATA & AR_NP_DEB_MON_SFR4_TMP17_MASK,
      ._index = AR_NP_DEB_MON_SFR4_TMP17_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_deb_mon_sfr5_detail[] = {
    { ._name = "CBUS_DATA3_RD",
      ._bpos = AR_NP_DEB_MON_SFR5_CBUS_DATA3_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR5_CBUS_DATA3_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR5_RSTDATA & AR_NP_DEB_MON_SFR5_CBUS_DATA3_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR5_CBUS_DATA3_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_DATA2_RD",
      ._bpos = AR_NP_DEB_MON_SFR5_CBUS_DATA2_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR5_CBUS_DATA2_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR5_RSTDATA & AR_NP_DEB_MON_SFR5_CBUS_DATA2_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR5_CBUS_DATA2_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_DATA1_RD",
      ._bpos = AR_NP_DEB_MON_SFR5_CBUS_DATA1_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR5_CBUS_DATA1_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR5_RSTDATA & AR_NP_DEB_MON_SFR5_CBUS_DATA1_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR5_CBUS_DATA1_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CBUS_DATA0_RD",
      ._bpos = AR_NP_DEB_MON_SFR5_CBUS_DATA0_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR5_CBUS_DATA0_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR5_RSTDATA & AR_NP_DEB_MON_SFR5_CBUS_DATA0_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR5_CBUS_DATA0_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_DATA3_RD",
      ._bpos = AR_NP_DEB_MON_SFR5_SBUS_DATA3_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR5_SBUS_DATA3_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR5_RSTDATA & AR_NP_DEB_MON_SFR5_SBUS_DATA3_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR5_SBUS_DATA3_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_DATA2_RD",
      ._bpos = AR_NP_DEB_MON_SFR5_SBUS_DATA2_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR5_SBUS_DATA2_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR5_RSTDATA & AR_NP_DEB_MON_SFR5_SBUS_DATA2_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR5_SBUS_DATA2_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_DATA1_RD",
      ._bpos = AR_NP_DEB_MON_SFR5_SBUS_DATA1_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR5_SBUS_DATA1_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR5_RSTDATA & AR_NP_DEB_MON_SFR5_SBUS_DATA1_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR5_SBUS_DATA1_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_DATA0_RD",
      ._bpos = AR_NP_DEB_MON_SFR5_SBUS_DATA0_RD_BP,
      ._mask = AR_NP_DEB_MON_SFR5_SBUS_DATA0_RD_MASK,
      ._rval = AR_NP_DEB_MON_SFR5_RSTDATA & AR_NP_DEB_MON_SFR5_SBUS_DATA0_RD_MASK,
      ._index = AR_NP_DEB_MON_SFR5_SBUS_DATA0_RD_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_deb_mon_heatbeat_cnt_detail[] = {
    { ._name = "RESET_SBUS_CBUS_CMD_CNT",
      ._bpos = AR_NP_DEB_MON_HEATBEAT_CNT_RESET_SBUS_CBUS_CMD_CNT_BP,
      ._mask = AR_NP_DEB_MON_HEATBEAT_CNT_RESET_SBUS_CBUS_CMD_CNT_MASK,
      ._rval = AR_NP_DEB_MON_HEATBEAT_CNT_RSTDATA & AR_NP_DEB_MON_HEATBEAT_CNT_RESET_SBUS_CBUS_CMD_CNT_MASK,
      ._index = AR_NP_DEB_MON_HEATBEAT_CNT_RESET_SBUS_CBUS_CMD_CNT_QW,
      ._desc = "When written 1'b1, SBUS_CBUS_CMD_CNT is in reset, when 1'b0, counter is active",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "RESET_PRG_ADDR_CHNANGE_CNT",
      ._bpos = AR_NP_DEB_MON_HEATBEAT_CNT_RESET_PRG_ADDR_CHNANGE_CNT_BP,
      ._mask = AR_NP_DEB_MON_HEATBEAT_CNT_RESET_PRG_ADDR_CHNANGE_CNT_MASK,
      ._rval = AR_NP_DEB_MON_HEATBEAT_CNT_RSTDATA & AR_NP_DEB_MON_HEATBEAT_CNT_RESET_PRG_ADDR_CHNANGE_CNT_MASK,
      ._index = AR_NP_DEB_MON_HEATBEAT_CNT_RESET_PRG_ADDR_CHNANGE_CNT_QW,
      ._desc = "When written 1'b1, PRG_ADDR_CHANGE_CNT is in reset, when written 1'b0, counter is active",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = "PRG_ADDR_CHANGE_CNT",
      ._bpos = AR_NP_DEB_MON_HEATBEAT_CNT_PRG_ADDR_CHANGE_CNT_BP,
      ._mask = AR_NP_DEB_MON_HEATBEAT_CNT_PRG_ADDR_CHANGE_CNT_MASK,
      ._rval = AR_NP_DEB_MON_HEATBEAT_CNT_RSTDATA & AR_NP_DEB_MON_HEATBEAT_CNT_PRG_ADDR_CHANGE_CNT_MASK,
      ._index = AR_NP_DEB_MON_HEATBEAT_CNT_PRG_ADDR_CHANGE_CNT_QW,
      ._desc = "This counter is used to keep track of the time laps when program memory address changes",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "SBUS_CBUS_CMD_CNT",
      ._bpos = AR_NP_DEB_MON_HEATBEAT_CNT_SBUS_CBUS_CMD_CNT_BP,
      ._mask = AR_NP_DEB_MON_HEATBEAT_CNT_SBUS_CBUS_CMD_CNT_MASK,
      ._rval = AR_NP_DEB_MON_HEATBEAT_CNT_RSTDATA & AR_NP_DEB_MON_HEATBEAT_CNT_SBUS_CBUS_CMD_CNT_MASK,
      ._index = AR_NP_DEB_MON_HEATBEAT_CNT_SBUS_CBUS_CMD_CNT_QW,
      ._desc = "This counter is to record the time laps between 2 consecutive SBus/CBus command issued by processor",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_sts_therm_sensor_cfg_detail[] = {
    { ._name = "CLK_DIVIDE",
      ._bpos = AR_NP_STS_THERM_SENSOR_CFG_CLK_DIVIDE_BP,
      ._mask = AR_NP_STS_THERM_SENSOR_CFG_CLK_DIVIDE_MASK,
      ._rval = AR_NP_STS_THERM_SENSOR_CFG_RSTDATA & AR_NP_STS_THERM_SENSOR_CFG_CLK_DIVIDE_MASK,
      ._index = AR_NP_STS_THERM_SENSOR_CFG_CLK_DIVIDE_QW,
      ._desc = "Clock divider configuration",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_flg_detail[] = {
    { ._name = "IDRAM_MBE",
      ._bpos = AR_NP_ERR_FLG_IDRAM_MBE_BP,
      ._mask = AR_NP_ERR_FLG_IDRAM_MBE_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_IDRAM_MBE_MASK,
      ._index = AR_NP_ERR_FLG_IDRAM_MBE_QW,
      ._desc = "internal data RAM MBE",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "IDRAM_SBE",
      ._bpos = AR_NP_ERR_FLG_IDRAM_SBE_BP,
      ._mask = AR_NP_ERR_FLG_IDRAM_SBE_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_IDRAM_SBE_MASK,
      ._index = AR_NP_ERR_FLG_IDRAM_SBE_QW,
      ._desc = "internal data RAM SBE",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "EDRAM_MBE",
      ._bpos = AR_NP_ERR_FLG_EDRAM_MBE_BP,
      ._mask = AR_NP_ERR_FLG_EDRAM_MBE_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_EDRAM_MBE_MASK,
      ._index = AR_NP_ERR_FLG_EDRAM_MBE_QW,
      ._desc = "external data RAM MBE",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "EDRAM_SBE",
      ._bpos = AR_NP_ERR_FLG_EDRAM_SBE_BP,
      ._mask = AR_NP_ERR_FLG_EDRAM_SBE_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_EDRAM_SBE_MASK,
      ._index = AR_NP_ERR_FLG_EDRAM_SBE_QW,
      ._desc = "external data RAM SBE",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "IRAM_MBE",
      ._bpos = AR_NP_ERR_FLG_IRAM_MBE_BP,
      ._mask = AR_NP_ERR_FLG_IRAM_MBE_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_IRAM_MBE_MASK,
      ._index = AR_NP_ERR_FLG_IRAM_MBE_QW,
      ._desc = "Instruction RAM MBE",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "IRAM_SBE",
      ._bpos = AR_NP_ERR_FLG_IRAM_SBE_BP,
      ._mask = AR_NP_ERR_FLG_IRAM_SBE_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_IRAM_SBE_MASK,
      ._index = AR_NP_ERR_FLG_IRAM_SBE_QW,
      ._desc = "Instruction RAM SBE",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "HEARTBEAT_PC_IDLE",
      ._bpos = AR_NP_ERR_FLG_HEARTBEAT_PC_IDLE_BP,
      ._mask = AR_NP_ERR_FLG_HEARTBEAT_PC_IDLE_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_HEARTBEAT_PC_IDLE_MASK,
      ._index = AR_NP_ERR_FLG_HEARTBEAT_PC_IDLE_QW,
      ._desc = "set if PC for the 8051 not making forward progress",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "HEARTBEAT_BUS_CMD",
      ._bpos = AR_NP_ERR_FLG_HEARTBEAT_BUS_CMD_BP,
      ._mask = AR_NP_ERR_FLG_HEARTBEAT_BUS_CMD_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_HEARTBEAT_BUS_CMD_MASK,
      ._index = AR_NP_ERR_FLG_HEARTBEAT_BUS_CMD_QW,
      ._desc = "set if bus command timeout seen by the 8051",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "NP_LANE",
      ._bpos = AR_NP_ERR_FLG_NP_LANE_BP,
      ._mask = AR_NP_ERR_FLG_NP_LANE_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_NP_LANE_MASK,
      ._index = AR_NP_ERR_FLG_NP_LANE_QW,
      ._desc = "set by 8051 firmware, lane error",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "NP_TUNING",
      ._bpos = AR_NP_ERR_FLG_NP_TUNING_BP,
      ._mask = AR_NP_ERR_FLG_NP_TUNING_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_NP_TUNING_MASK,
      ._index = AR_NP_ERR_FLG_NP_TUNING_QW,
      ._desc = "set by 8051 firmware, tuning error",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "NP_SBUS_RD",
      ._bpos = AR_NP_ERR_FLG_NP_SBUS_RD_BP,
      ._mask = AR_NP_ERR_FLG_NP_SBUS_RD_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_NP_SBUS_RD_MASK,
      ._index = AR_NP_ERR_FLG_NP_SBUS_RD_QW,
      ._desc = "set by 8051 firmware, SBUS RD error",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "NP_SBUS_WR",
      ._bpos = AR_NP_ERR_FLG_NP_SBUS_WR_BP,
      ._mask = AR_NP_ERR_FLG_NP_SBUS_WR_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_NP_SBUS_WR_MASK,
      ._index = AR_NP_ERR_FLG_NP_SBUS_WR_QW,
      ._desc = "set by 8051 firmware, SBUS WR error",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "NP_CBUS_RD",
      ._bpos = AR_NP_ERR_FLG_NP_CBUS_RD_BP,
      ._mask = AR_NP_ERR_FLG_NP_CBUS_RD_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_NP_CBUS_RD_MASK,
      ._index = AR_NP_ERR_FLG_NP_CBUS_RD_QW,
      ._desc = "set by 8051 firmware, CBUS RD error",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "NP_CBUS_WR",
      ._bpos = AR_NP_ERR_FLG_NP_CBUS_WR_BP,
      ._mask = AR_NP_ERR_FLG_NP_CBUS_WR_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_NP_CBUS_WR_MASK,
      ._index = AR_NP_ERR_FLG_NP_CBUS_WR_QW,
      ._desc = "set by 8051 firmware, CBUS WR error",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "NP_SPICO",
      ._bpos = AR_NP_ERR_FLG_NP_SPICO_BP,
      ._mask = AR_NP_ERR_FLG_NP_SPICO_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_NP_SPICO_MASK,
      ._index = AR_NP_ERR_FLG_NP_SPICO_QW,
      ._desc = "set by 8051 firmware, SPICO error",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "NP_CHECKSUM",
      ._bpos = AR_NP_ERR_FLG_NP_CHECKSUM_BP,
      ._mask = AR_NP_ERR_FLG_NP_CHECKSUM_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_NP_CHECKSUM_MASK,
      ._index = AR_NP_ERR_FLG_NP_CHECKSUM_QW,
      ._desc = "set by 8051 firmware, checksum error",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_NP_ERR_FLG_DIAG_ONLY_BP,
      ._mask = AR_NP_ERR_FLG_DIAG_ONLY_MASK,
      ._rval = AR_NP_ERR_FLG_RSTDATA & AR_NP_ERR_FLG_DIAG_ONLY_MASK,
      ._index = AR_NP_ERR_FLG_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000000011ull,
      ._access = "RW1,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_clr_detail[] = {
    { ._name = "IDRAM_MBE",
      ._bpos = AR_NP_ERR_CLR_IDRAM_MBE_BP,
      ._mask = AR_NP_ERR_CLR_IDRAM_MBE_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_IDRAM_MBE_MASK,
      ._index = AR_NP_ERR_CLR_IDRAM_MBE_QW,
      ._desc = "internal data RAM MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "IDRAM_SBE",
      ._bpos = AR_NP_ERR_CLR_IDRAM_SBE_BP,
      ._mask = AR_NP_ERR_CLR_IDRAM_SBE_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_IDRAM_SBE_MASK,
      ._index = AR_NP_ERR_CLR_IDRAM_SBE_QW,
      ._desc = "internal data RAM SBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "EDRAM_MBE",
      ._bpos = AR_NP_ERR_CLR_EDRAM_MBE_BP,
      ._mask = AR_NP_ERR_CLR_EDRAM_MBE_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_EDRAM_MBE_MASK,
      ._index = AR_NP_ERR_CLR_EDRAM_MBE_QW,
      ._desc = "external data RAM MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "EDRAM_SBE",
      ._bpos = AR_NP_ERR_CLR_EDRAM_SBE_BP,
      ._mask = AR_NP_ERR_CLR_EDRAM_SBE_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_EDRAM_SBE_MASK,
      ._index = AR_NP_ERR_CLR_EDRAM_SBE_QW,
      ._desc = "external data RAM SBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "IRAM_MBE",
      ._bpos = AR_NP_ERR_CLR_IRAM_MBE_BP,
      ._mask = AR_NP_ERR_CLR_IRAM_MBE_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_IRAM_MBE_MASK,
      ._index = AR_NP_ERR_CLR_IRAM_MBE_QW,
      ._desc = "Instruction RAM MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "IRAM_SBE",
      ._bpos = AR_NP_ERR_CLR_IRAM_SBE_BP,
      ._mask = AR_NP_ERR_CLR_IRAM_SBE_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_IRAM_SBE_MASK,
      ._index = AR_NP_ERR_CLR_IRAM_SBE_QW,
      ._desc = "Instruction RAM SBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "HEARTBEAT_PC_IDLE",
      ._bpos = AR_NP_ERR_CLR_HEARTBEAT_PC_IDLE_BP,
      ._mask = AR_NP_ERR_CLR_HEARTBEAT_PC_IDLE_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_HEARTBEAT_PC_IDLE_MASK,
      ._index = AR_NP_ERR_CLR_HEARTBEAT_PC_IDLE_QW,
      ._desc = "set if PC for the 8051 not making forward progress",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "HEARTBEAT_BUS_CMD",
      ._bpos = AR_NP_ERR_CLR_HEARTBEAT_BUS_CMD_BP,
      ._mask = AR_NP_ERR_CLR_HEARTBEAT_BUS_CMD_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_HEARTBEAT_BUS_CMD_MASK,
      ._index = AR_NP_ERR_CLR_HEARTBEAT_BUS_CMD_QW,
      ._desc = "set if bus command timeout seen by the 8051",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "NP_LANE",
      ._bpos = AR_NP_ERR_CLR_NP_LANE_BP,
      ._mask = AR_NP_ERR_CLR_NP_LANE_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_NP_LANE_MASK,
      ._index = AR_NP_ERR_CLR_NP_LANE_QW,
      ._desc = "set by 8051 firmware, lane error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "NP_TUNING",
      ._bpos = AR_NP_ERR_CLR_NP_TUNING_BP,
      ._mask = AR_NP_ERR_CLR_NP_TUNING_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_NP_TUNING_MASK,
      ._index = AR_NP_ERR_CLR_NP_TUNING_QW,
      ._desc = "set by 8051 firmware, tuning error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "NP_SBUS_RD",
      ._bpos = AR_NP_ERR_CLR_NP_SBUS_RD_BP,
      ._mask = AR_NP_ERR_CLR_NP_SBUS_RD_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_NP_SBUS_RD_MASK,
      ._index = AR_NP_ERR_CLR_NP_SBUS_RD_QW,
      ._desc = "set by 8051 firmware, SBUS RD error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "NP_SBUS_WR",
      ._bpos = AR_NP_ERR_CLR_NP_SBUS_WR_BP,
      ._mask = AR_NP_ERR_CLR_NP_SBUS_WR_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_NP_SBUS_WR_MASK,
      ._index = AR_NP_ERR_CLR_NP_SBUS_WR_QW,
      ._desc = "set by 8051 firmware, SBUS WR error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "NP_CBUS_RD",
      ._bpos = AR_NP_ERR_CLR_NP_CBUS_RD_BP,
      ._mask = AR_NP_ERR_CLR_NP_CBUS_RD_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_NP_CBUS_RD_MASK,
      ._index = AR_NP_ERR_CLR_NP_CBUS_RD_QW,
      ._desc = "set by 8051 firmware, CBUS RD error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "NP_CBUS_WR",
      ._bpos = AR_NP_ERR_CLR_NP_CBUS_WR_BP,
      ._mask = AR_NP_ERR_CLR_NP_CBUS_WR_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_NP_CBUS_WR_MASK,
      ._index = AR_NP_ERR_CLR_NP_CBUS_WR_QW,
      ._desc = "set by 8051 firmware, CBUS WR error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "NP_SPICO",
      ._bpos = AR_NP_ERR_CLR_NP_SPICO_BP,
      ._mask = AR_NP_ERR_CLR_NP_SPICO_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_NP_SPICO_MASK,
      ._index = AR_NP_ERR_CLR_NP_SPICO_QW,
      ._desc = "set by 8051 firmware, SPICO error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "NP_CHECKSUM",
      ._bpos = AR_NP_ERR_CLR_NP_CHECKSUM_BP,
      ._mask = AR_NP_ERR_CLR_NP_CHECKSUM_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_NP_CHECKSUM_MASK,
      ._index = AR_NP_ERR_CLR_NP_CHECKSUM_QW,
      ._desc = "set by 8051 firmware, checksum error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_NP_ERR_CLR_DIAG_ONLY_BP,
      ._mask = AR_NP_ERR_CLR_DIAG_ONLY_MASK,
      ._rval = AR_NP_ERR_CLR_RSTDATA & AR_NP_ERR_CLR_DIAG_ONLY_MASK,
      ._index = AR_NP_ERR_CLR_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_hss_msk_detail[] = {
    { ._name = "IDRAM_MBE",
      ._bpos = AR_NP_ERR_HSS_MSK_IDRAM_MBE_BP,
      ._mask = AR_NP_ERR_HSS_MSK_IDRAM_MBE_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_IDRAM_MBE_MASK,
      ._index = AR_NP_ERR_HSS_MSK_IDRAM_MBE_QW,
      ._desc = "internal data RAM MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "IDRAM_SBE",
      ._bpos = AR_NP_ERR_HSS_MSK_IDRAM_SBE_BP,
      ._mask = AR_NP_ERR_HSS_MSK_IDRAM_SBE_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_IDRAM_SBE_MASK,
      ._index = AR_NP_ERR_HSS_MSK_IDRAM_SBE_QW,
      ._desc = "internal data RAM SBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "EDRAM_MBE",
      ._bpos = AR_NP_ERR_HSS_MSK_EDRAM_MBE_BP,
      ._mask = AR_NP_ERR_HSS_MSK_EDRAM_MBE_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_EDRAM_MBE_MASK,
      ._index = AR_NP_ERR_HSS_MSK_EDRAM_MBE_QW,
      ._desc = "external data RAM MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "EDRAM_SBE",
      ._bpos = AR_NP_ERR_HSS_MSK_EDRAM_SBE_BP,
      ._mask = AR_NP_ERR_HSS_MSK_EDRAM_SBE_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_EDRAM_SBE_MASK,
      ._index = AR_NP_ERR_HSS_MSK_EDRAM_SBE_QW,
      ._desc = "external data RAM SBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "IRAM_MBE",
      ._bpos = AR_NP_ERR_HSS_MSK_IRAM_MBE_BP,
      ._mask = AR_NP_ERR_HSS_MSK_IRAM_MBE_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_IRAM_MBE_MASK,
      ._index = AR_NP_ERR_HSS_MSK_IRAM_MBE_QW,
      ._desc = "Instruction RAM MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "IRAM_SBE",
      ._bpos = AR_NP_ERR_HSS_MSK_IRAM_SBE_BP,
      ._mask = AR_NP_ERR_HSS_MSK_IRAM_SBE_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_IRAM_SBE_MASK,
      ._index = AR_NP_ERR_HSS_MSK_IRAM_SBE_QW,
      ._desc = "Instruction RAM SBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "HEARTBEAT_PC_IDLE",
      ._bpos = AR_NP_ERR_HSS_MSK_HEARTBEAT_PC_IDLE_BP,
      ._mask = AR_NP_ERR_HSS_MSK_HEARTBEAT_PC_IDLE_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_HEARTBEAT_PC_IDLE_MASK,
      ._index = AR_NP_ERR_HSS_MSK_HEARTBEAT_PC_IDLE_QW,
      ._desc = "set if PC for the 8051 not making forward progress",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "HEARTBEAT_BUS_CMD",
      ._bpos = AR_NP_ERR_HSS_MSK_HEARTBEAT_BUS_CMD_BP,
      ._mask = AR_NP_ERR_HSS_MSK_HEARTBEAT_BUS_CMD_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_HEARTBEAT_BUS_CMD_MASK,
      ._index = AR_NP_ERR_HSS_MSK_HEARTBEAT_BUS_CMD_QW,
      ._desc = "set if bus command timeout seen by the 8051",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_LANE",
      ._bpos = AR_NP_ERR_HSS_MSK_NP_LANE_BP,
      ._mask = AR_NP_ERR_HSS_MSK_NP_LANE_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_NP_LANE_MASK,
      ._index = AR_NP_ERR_HSS_MSK_NP_LANE_QW,
      ._desc = "set by 8051 firmware, lane error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_TUNING",
      ._bpos = AR_NP_ERR_HSS_MSK_NP_TUNING_BP,
      ._mask = AR_NP_ERR_HSS_MSK_NP_TUNING_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_NP_TUNING_MASK,
      ._index = AR_NP_ERR_HSS_MSK_NP_TUNING_QW,
      ._desc = "set by 8051 firmware, tuning error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_SBUS_RD",
      ._bpos = AR_NP_ERR_HSS_MSK_NP_SBUS_RD_BP,
      ._mask = AR_NP_ERR_HSS_MSK_NP_SBUS_RD_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_NP_SBUS_RD_MASK,
      ._index = AR_NP_ERR_HSS_MSK_NP_SBUS_RD_QW,
      ._desc = "set by 8051 firmware, SBUS RD error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_SBUS_WR",
      ._bpos = AR_NP_ERR_HSS_MSK_NP_SBUS_WR_BP,
      ._mask = AR_NP_ERR_HSS_MSK_NP_SBUS_WR_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_NP_SBUS_WR_MASK,
      ._index = AR_NP_ERR_HSS_MSK_NP_SBUS_WR_QW,
      ._desc = "set by 8051 firmware, SBUS WR error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_CBUS_RD",
      ._bpos = AR_NP_ERR_HSS_MSK_NP_CBUS_RD_BP,
      ._mask = AR_NP_ERR_HSS_MSK_NP_CBUS_RD_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_NP_CBUS_RD_MASK,
      ._index = AR_NP_ERR_HSS_MSK_NP_CBUS_RD_QW,
      ._desc = "set by 8051 firmware, CBUS RD error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_CBUS_WR",
      ._bpos = AR_NP_ERR_HSS_MSK_NP_CBUS_WR_BP,
      ._mask = AR_NP_ERR_HSS_MSK_NP_CBUS_WR_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_NP_CBUS_WR_MASK,
      ._index = AR_NP_ERR_HSS_MSK_NP_CBUS_WR_QW,
      ._desc = "set by 8051 firmware, CBUS WR error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_SPICO",
      ._bpos = AR_NP_ERR_HSS_MSK_NP_SPICO_BP,
      ._mask = AR_NP_ERR_HSS_MSK_NP_SPICO_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_NP_SPICO_MASK,
      ._index = AR_NP_ERR_HSS_MSK_NP_SPICO_QW,
      ._desc = "set by 8051 firmware, SPICO error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_CHECKSUM",
      ._bpos = AR_NP_ERR_HSS_MSK_NP_CHECKSUM_BP,
      ._mask = AR_NP_ERR_HSS_MSK_NP_CHECKSUM_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_NP_CHECKSUM_MASK,
      ._index = AR_NP_ERR_HSS_MSK_NP_CHECKSUM_QW,
      ._desc = "set by 8051 firmware, checksum error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_NP_ERR_HSS_MSK_DIAG_ONLY_BP,
      ._mask = AR_NP_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._rval = AR_NP_ERR_HSS_MSK_RSTDATA & AR_NP_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._index = AR_NP_ERR_HSS_MSK_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_err_first_flg_detail[] = {
    { ._name = "IDRAM_MBE",
      ._bpos = AR_NP_ERR_FIRST_FLG_IDRAM_MBE_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_IDRAM_MBE_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_IDRAM_MBE_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_IDRAM_MBE_QW,
      ._desc = "internal data RAM MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "IDRAM_SBE",
      ._bpos = AR_NP_ERR_FIRST_FLG_IDRAM_SBE_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_IDRAM_SBE_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_IDRAM_SBE_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_IDRAM_SBE_QW,
      ._desc = "internal data RAM SBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "EDRAM_MBE",
      ._bpos = AR_NP_ERR_FIRST_FLG_EDRAM_MBE_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_EDRAM_MBE_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_EDRAM_MBE_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_EDRAM_MBE_QW,
      ._desc = "external data RAM MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "EDRAM_SBE",
      ._bpos = AR_NP_ERR_FIRST_FLG_EDRAM_SBE_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_EDRAM_SBE_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_EDRAM_SBE_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_EDRAM_SBE_QW,
      ._desc = "external data RAM SBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "IRAM_MBE",
      ._bpos = AR_NP_ERR_FIRST_FLG_IRAM_MBE_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_IRAM_MBE_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_IRAM_MBE_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_IRAM_MBE_QW,
      ._desc = "Instruction RAM MBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "IRAM_SBE",
      ._bpos = AR_NP_ERR_FIRST_FLG_IRAM_SBE_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_IRAM_SBE_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_IRAM_SBE_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_IRAM_SBE_QW,
      ._desc = "Instruction RAM SBE",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "HEARTBEAT_PC_IDLE",
      ._bpos = AR_NP_ERR_FIRST_FLG_HEARTBEAT_PC_IDLE_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_HEARTBEAT_PC_IDLE_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_HEARTBEAT_PC_IDLE_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_HEARTBEAT_PC_IDLE_QW,
      ._desc = "set if PC for the 8051 not making forward progress",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "HEARTBEAT_BUS_CMD",
      ._bpos = AR_NP_ERR_FIRST_FLG_HEARTBEAT_BUS_CMD_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_HEARTBEAT_BUS_CMD_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_HEARTBEAT_BUS_CMD_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_HEARTBEAT_BUS_CMD_QW,
      ._desc = "set if bus command timeout seen by the 8051",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_LANE",
      ._bpos = AR_NP_ERR_FIRST_FLG_NP_LANE_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_NP_LANE_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_NP_LANE_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_NP_LANE_QW,
      ._desc = "set by 8051 firmware, lane error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_TUNING",
      ._bpos = AR_NP_ERR_FIRST_FLG_NP_TUNING_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_NP_TUNING_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_NP_TUNING_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_NP_TUNING_QW,
      ._desc = "set by 8051 firmware, tuning error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_SBUS_RD",
      ._bpos = AR_NP_ERR_FIRST_FLG_NP_SBUS_RD_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_NP_SBUS_RD_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_NP_SBUS_RD_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_NP_SBUS_RD_QW,
      ._desc = "set by 8051 firmware, SBUS RD error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_SBUS_WR",
      ._bpos = AR_NP_ERR_FIRST_FLG_NP_SBUS_WR_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_NP_SBUS_WR_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_NP_SBUS_WR_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_NP_SBUS_WR_QW,
      ._desc = "set by 8051 firmware, SBUS WR error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_CBUS_RD",
      ._bpos = AR_NP_ERR_FIRST_FLG_NP_CBUS_RD_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_NP_CBUS_RD_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_NP_CBUS_RD_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_NP_CBUS_RD_QW,
      ._desc = "set by 8051 firmware, CBUS RD error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_CBUS_WR",
      ._bpos = AR_NP_ERR_FIRST_FLG_NP_CBUS_WR_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_NP_CBUS_WR_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_NP_CBUS_WR_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_NP_CBUS_WR_QW,
      ._desc = "set by 8051 firmware, CBUS WR error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_SPICO",
      ._bpos = AR_NP_ERR_FIRST_FLG_NP_SPICO_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_NP_SPICO_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_NP_SPICO_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_NP_SPICO_QW,
      ._desc = "set by 8051 firmware, SPICO error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "NP_CHECKSUM",
      ._bpos = AR_NP_ERR_FIRST_FLG_NP_CHECKSUM_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_NP_CHECKSUM_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_NP_CHECKSUM_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_NP_CHECKSUM_QW,
      ._desc = "set by 8051 firmware, checksum error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_NP_ERR_FIRST_FLG_DIAG_ONLY_BP,
      ._mask = AR_NP_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._rval = AR_NP_ERR_FIRST_FLG_RSTDATA & AR_NP_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._index = AR_NP_ERR_FIRST_FLG_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_cfg_req_stream_ld_dp_iram_detail[] = {
    { ._name = "DATA_BYTE7",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE7_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE7_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE7_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE7_QW,
      ._desc = "Data Byte 7 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE6",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE6_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE6_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE6_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE6_QW,
      ._desc = "Data Byte 6 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE5",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE5_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE5_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE5_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE5_QW,
      ._desc = "Data Byte 5 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE4",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE4_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE4_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE4_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE4_QW,
      ._desc = "Data Byte 4 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE3",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE3_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE3_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE3_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE3_QW,
      ._desc = "Data Byte 3 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE2",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE2_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE2_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE2_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE2_QW,
      ._desc = "Data Byte 2 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE1",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE1_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE1_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE1_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE1_QW,
      ._desc = "Data Byte 1 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE0",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE0_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE0_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE0_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_DATA_BYTE0_QW,
      ._desc = "Data Byte 0 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_np_cfg_req_stream_ld_dp_dram_detail[] = {
    { ._name = "DATA_BYTE7",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE7_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE7_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE7_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE7_QW,
      ._desc = "Data Byte 7 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE6",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE6_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE6_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE6_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE6_QW,
      ._desc = "Data Byte 6 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE5",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE5_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE5_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE5_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE5_QW,
      ._desc = "Data Byte 5 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE4",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE4_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE4_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE4_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE4_QW,
      ._desc = "Data Byte 4 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE3",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE3_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE3_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE3_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE3_QW,
      ._desc = "Data Byte 3 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE2",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE2_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE2_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE2_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE2_QW,
      ._desc = "Data Byte 2 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE1",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE1_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE1_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE1_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE1_QW,
      ._desc = "Data Byte 1 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = "DATA_BYTE0",
      ._bpos = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE0_BP,
      ._mask = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE0_MASK,
      ._rval = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTDATA & AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE0_MASK,
      ._index = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_DATA_BYTE0_QW,
      ._desc = "Data Byte 0 to be written/read",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};

/*
 *  AR NP DESC MASK ARRAYS DECLARATIONS
 */

/*
 *  AR NP MMR DECLARATIONS
 */
static const cmmr_br_t __ar_np_cfg = {
    ._name = "AR_NP_CFG",
    ._addr = AR_NP_CFG,
    ._rval.val = AR_NP_CFG_RSTDATA,
    ._rmsk.val = AR_NP_CFG_RSTMASK,
    ._wrmsk.val = AR_NP_CFG_WRTMASK,
    ._rdmsk.val = AR_NP_CFG_RDMASK,
    ._xsmsk.val = AR_NP_CFG_XSMASK,
    ._wsemsk.val = AR_NP_CFG_WSEMASK,
    ._rsemsk.val = AR_NP_CFG_RSEMASK,
    ._w1smsk.val = AR_NP_CFG_W1SMASK,
    ._w1cmsk.val = AR_NP_CFG_W1CMASK,
    ._wrstmsk.val = AR_NP_CFG_WRSTMASK,
    ._hwwmsk.val = AR_NP_CFG_HWWMASK,
    ._hwrmsk.val = AR_NP_CFG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002000ull,
    ._info = __ar_np_cfg_detail
};
static const cmmr_br_t __ar_np_dbg_sfr_access = {
    ._name = "AR_NP_DBG_SFR_ACCESS",
    ._addr = AR_NP_DBG_SFR_ACCESS,
    ._rval.val = AR_NP_DBG_SFR_ACCESS_RSTDATA,
    ._rmsk.val = AR_NP_DBG_SFR_ACCESS_RSTMASK,
    ._wrmsk.val = AR_NP_DBG_SFR_ACCESS_WRTMASK,
    ._rdmsk.val = AR_NP_DBG_SFR_ACCESS_RDMASK,
    ._xsmsk.val = AR_NP_DBG_SFR_ACCESS_XSMASK,
    ._wsemsk.val = AR_NP_DBG_SFR_ACCESS_WSEMASK,
    ._rsemsk.val = AR_NP_DBG_SFR_ACCESS_RSEMASK,
    ._w1smsk.val = AR_NP_DBG_SFR_ACCESS_W1SMASK,
    ._w1cmsk.val = AR_NP_DBG_SFR_ACCESS_W1CMASK,
    ._wrstmsk.val = AR_NP_DBG_SFR_ACCESS_WRSTMASK,
    ._hwwmsk.val = AR_NP_DBG_SFR_ACCESS_HWWMASK,
    ._hwrmsk.val = AR_NP_DBG_SFR_ACCESS_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_dbg_sfr_access_detail
};
static const cmmr_br_t __ar_np_dbg_processor = {
    ._name = "AR_NP_DBG_PROCESSOR",
    ._addr = AR_NP_DBG_PROCESSOR,
    ._rval.val = AR_NP_DBG_PROCESSOR_RSTDATA,
    ._rmsk.val = AR_NP_DBG_PROCESSOR_RSTMASK,
    ._wrmsk.val = AR_NP_DBG_PROCESSOR_WRTMASK,
    ._rdmsk.val = AR_NP_DBG_PROCESSOR_RDMASK,
    ._xsmsk.val = AR_NP_DBG_PROCESSOR_XSMASK,
    ._wsemsk.val = AR_NP_DBG_PROCESSOR_WSEMASK,
    ._rsemsk.val = AR_NP_DBG_PROCESSOR_RSEMASK,
    ._w1smsk.val = AR_NP_DBG_PROCESSOR_W1SMASK,
    ._w1cmsk.val = AR_NP_DBG_PROCESSOR_W1CMASK,
    ._wrstmsk.val = AR_NP_DBG_PROCESSOR_WRSTMASK,
    ._hwwmsk.val = AR_NP_DBG_PROCESSOR_HWWMASK,
    ._hwrmsk.val = AR_NP_DBG_PROCESSOR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_dbg_processor_detail
};
static const cmmr_br_t __ar_np_cfg_req_sbus = {
    ._name = "AR_NP_CFG_REQ_SBUS",
    ._addr = AR_NP_CFG_REQ_SBUS,
    ._rval.val = AR_NP_CFG_REQ_SBUS_RSTDATA,
    ._rmsk.val = AR_NP_CFG_REQ_SBUS_RSTMASK,
    ._wrmsk.val = AR_NP_CFG_REQ_SBUS_WRTMASK,
    ._rdmsk.val = AR_NP_CFG_REQ_SBUS_RDMASK,
    ._xsmsk.val = AR_NP_CFG_REQ_SBUS_XSMASK,
    ._wsemsk.val = AR_NP_CFG_REQ_SBUS_WSEMASK,
    ._rsemsk.val = AR_NP_CFG_REQ_SBUS_RSEMASK,
    ._w1smsk.val = AR_NP_CFG_REQ_SBUS_W1SMASK,
    ._w1cmsk.val = AR_NP_CFG_REQ_SBUS_W1CMASK,
    ._wrstmsk.val = AR_NP_CFG_REQ_SBUS_WRSTMASK,
    ._hwwmsk.val = AR_NP_CFG_REQ_SBUS_HWWMASK,
    ._hwrmsk.val = AR_NP_CFG_REQ_SBUS_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_cfg_req_sbus_detail
};
static const cmmr_br_t __ar_np_cfg_rsp_sbus = {
    ._name = "AR_NP_CFG_RSP_SBUS",
    ._addr = AR_NP_CFG_RSP_SBUS,
    ._rval.val = AR_NP_CFG_RSP_SBUS_RSTDATA,
    ._rmsk.val = AR_NP_CFG_RSP_SBUS_RSTMASK,
    ._wrmsk.val = AR_NP_CFG_RSP_SBUS_WRTMASK,
    ._rdmsk.val = AR_NP_CFG_RSP_SBUS_RDMASK,
    ._xsmsk.val = AR_NP_CFG_RSP_SBUS_XSMASK,
    ._wsemsk.val = AR_NP_CFG_RSP_SBUS_WSEMASK,
    ._rsemsk.val = AR_NP_CFG_RSP_SBUS_RSEMASK,
    ._w1smsk.val = AR_NP_CFG_RSP_SBUS_W1SMASK,
    ._w1cmsk.val = AR_NP_CFG_RSP_SBUS_W1CMASK,
    ._wrstmsk.val = AR_NP_CFG_RSP_SBUS_WRSTMASK,
    ._hwwmsk.val = AR_NP_CFG_RSP_SBUS_HWWMASK,
    ._hwrmsk.val = AR_NP_CFG_RSP_SBUS_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_cfg_rsp_sbus_detail
};
static const cmmr_br_t __ar_np_cfg_req_cbus = {
    ._name = "AR_NP_CFG_REQ_CBUS",
    ._addr = AR_NP_CFG_REQ_CBUS,
    ._rval.val = AR_NP_CFG_REQ_CBUS_RSTDATA,
    ._rmsk.val = AR_NP_CFG_REQ_CBUS_RSTMASK,
    ._wrmsk.val = AR_NP_CFG_REQ_CBUS_WRTMASK,
    ._rdmsk.val = AR_NP_CFG_REQ_CBUS_RDMASK,
    ._xsmsk.val = AR_NP_CFG_REQ_CBUS_XSMASK,
    ._wsemsk.val = AR_NP_CFG_REQ_CBUS_WSEMASK,
    ._rsemsk.val = AR_NP_CFG_REQ_CBUS_RSEMASK,
    ._w1smsk.val = AR_NP_CFG_REQ_CBUS_W1SMASK,
    ._w1cmsk.val = AR_NP_CFG_REQ_CBUS_W1CMASK,
    ._wrstmsk.val = AR_NP_CFG_REQ_CBUS_WRSTMASK,
    ._hwwmsk.val = AR_NP_CFG_REQ_CBUS_HWWMASK,
    ._hwrmsk.val = AR_NP_CFG_REQ_CBUS_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_cfg_req_cbus_detail
};
static const cmmr_br_t __ar_np_cfg_rsp_cbus = {
    ._name = "AR_NP_CFG_RSP_CBUS",
    ._addr = AR_NP_CFG_RSP_CBUS,
    ._rval.val = AR_NP_CFG_RSP_CBUS_RSTDATA,
    ._rmsk.val = AR_NP_CFG_RSP_CBUS_RSTMASK,
    ._wrmsk.val = AR_NP_CFG_RSP_CBUS_WRTMASK,
    ._rdmsk.val = AR_NP_CFG_RSP_CBUS_RDMASK,
    ._xsmsk.val = AR_NP_CFG_RSP_CBUS_XSMASK,
    ._wsemsk.val = AR_NP_CFG_RSP_CBUS_WSEMASK,
    ._rsemsk.val = AR_NP_CFG_RSP_CBUS_RSEMASK,
    ._w1smsk.val = AR_NP_CFG_RSP_CBUS_W1SMASK,
    ._w1cmsk.val = AR_NP_CFG_RSP_CBUS_W1CMASK,
    ._wrstmsk.val = AR_NP_CFG_RSP_CBUS_WRSTMASK,
    ._hwwmsk.val = AR_NP_CFG_RSP_CBUS_HWWMASK,
    ._hwrmsk.val = AR_NP_CFG_RSP_CBUS_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_cfg_rsp_cbus_detail
};
static const cmmr_br_t __ar_np_sts_therm_sensor_req = {
    ._name = "AR_NP_STS_THERM_SENSOR_REQ",
    ._addr = AR_NP_STS_THERM_SENSOR_REQ,
    ._rval.val = AR_NP_STS_THERM_SENSOR_REQ_RSTDATA,
    ._rmsk.val = AR_NP_STS_THERM_SENSOR_REQ_RSTMASK,
    ._wrmsk.val = AR_NP_STS_THERM_SENSOR_REQ_WRTMASK,
    ._rdmsk.val = AR_NP_STS_THERM_SENSOR_REQ_RDMASK,
    ._xsmsk.val = AR_NP_STS_THERM_SENSOR_REQ_XSMASK,
    ._wsemsk.val = AR_NP_STS_THERM_SENSOR_REQ_WSEMASK,
    ._rsemsk.val = AR_NP_STS_THERM_SENSOR_REQ_RSEMASK,
    ._w1smsk.val = AR_NP_STS_THERM_SENSOR_REQ_W1SMASK,
    ._w1cmsk.val = AR_NP_STS_THERM_SENSOR_REQ_W1CMASK,
    ._wrstmsk.val = AR_NP_STS_THERM_SENSOR_REQ_WRSTMASK,
    ._hwwmsk.val = AR_NP_STS_THERM_SENSOR_REQ_HWWMASK,
    ._hwrmsk.val = AR_NP_STS_THERM_SENSOR_REQ_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_sts_therm_sensor_req_detail
};
static const cmmr_br_t __ar_np_sts_therm_sensor_rsp = {
    ._name = "AR_NP_STS_THERM_SENSOR_RSP",
    ._addr = AR_NP_STS_THERM_SENSOR_RSP,
    ._rval.val = AR_NP_STS_THERM_SENSOR_RSP_RSTDATA,
    ._rmsk.val = AR_NP_STS_THERM_SENSOR_RSP_RSTMASK,
    ._wrmsk.val = AR_NP_STS_THERM_SENSOR_RSP_WRTMASK,
    ._rdmsk.val = AR_NP_STS_THERM_SENSOR_RSP_RDMASK,
    ._xsmsk.val = AR_NP_STS_THERM_SENSOR_RSP_XSMASK,
    ._wsemsk.val = AR_NP_STS_THERM_SENSOR_RSP_WSEMASK,
    ._rsemsk.val = AR_NP_STS_THERM_SENSOR_RSP_RSEMASK,
    ._w1smsk.val = AR_NP_STS_THERM_SENSOR_RSP_W1SMASK,
    ._w1cmsk.val = AR_NP_STS_THERM_SENSOR_RSP_W1CMASK,
    ._wrstmsk.val = AR_NP_STS_THERM_SENSOR_RSP_WRSTMASK,
    ._hwwmsk.val = AR_NP_STS_THERM_SENSOR_RSP_HWWMASK,
    ._hwrmsk.val = AR_NP_STS_THERM_SENSOR_RSP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_sts_therm_sensor_rsp_detail
};
static const cmmr_br_t __ar_np_dbg_errinj_ecc = {
    ._name = "AR_NP_DBG_ERRINJ_ECC",
    ._addr = AR_NP_DBG_ERRINJ_ECC,
    ._rval.val = AR_NP_DBG_ERRINJ_ECC_RSTDATA,
    ._rmsk.val = AR_NP_DBG_ERRINJ_ECC_RSTMASK,
    ._wrmsk.val = AR_NP_DBG_ERRINJ_ECC_WRTMASK,
    ._rdmsk.val = AR_NP_DBG_ERRINJ_ECC_RDMASK,
    ._xsmsk.val = AR_NP_DBG_ERRINJ_ECC_XSMASK,
    ._wsemsk.val = AR_NP_DBG_ERRINJ_ECC_WSEMASK,
    ._rsemsk.val = AR_NP_DBG_ERRINJ_ECC_RSEMASK,
    ._w1smsk.val = AR_NP_DBG_ERRINJ_ECC_W1SMASK,
    ._w1cmsk.val = AR_NP_DBG_ERRINJ_ECC_W1CMASK,
    ._wrstmsk.val = AR_NP_DBG_ERRINJ_ECC_WRSTMASK,
    ._hwwmsk.val = AR_NP_DBG_ERRINJ_ECC_HWWMASK,
    ._hwrmsk.val = AR_NP_DBG_ERRINJ_ECC_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_dbg_errinj_ecc_detail
};
static const cmmr_br_t __ar_np_err_info_iram = {
    ._name = "AR_NP_ERR_INFO_IRAM",
    ._addr = AR_NP_ERR_INFO_IRAM,
    ._rval.val = AR_NP_ERR_INFO_IRAM_RSTDATA,
    ._rmsk.val = AR_NP_ERR_INFO_IRAM_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_INFO_IRAM_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_INFO_IRAM_RDMASK,
    ._xsmsk.val = AR_NP_ERR_INFO_IRAM_XSMASK,
    ._wsemsk.val = AR_NP_ERR_INFO_IRAM_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_INFO_IRAM_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_INFO_IRAM_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_INFO_IRAM_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_INFO_IRAM_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_INFO_IRAM_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_INFO_IRAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_err_info_iram_detail
};
static const cmmr_br_t __ar_np_err_info_dram = {
    ._name = "AR_NP_ERR_INFO_DRAM",
    ._addr = AR_NP_ERR_INFO_DRAM,
    ._rval.val = AR_NP_ERR_INFO_DRAM_RSTDATA,
    ._rmsk.val = AR_NP_ERR_INFO_DRAM_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_INFO_DRAM_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_INFO_DRAM_RDMASK,
    ._xsmsk.val = AR_NP_ERR_INFO_DRAM_XSMASK,
    ._wsemsk.val = AR_NP_ERR_INFO_DRAM_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_INFO_DRAM_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_INFO_DRAM_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_INFO_DRAM_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_INFO_DRAM_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_INFO_DRAM_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_INFO_DRAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_err_info_dram_detail
};
static const cmmr_br_t __ar_np_err_info_idram = {
    ._name = "AR_NP_ERR_INFO_IDRAM",
    ._addr = AR_NP_ERR_INFO_IDRAM,
    ._rval.val = AR_NP_ERR_INFO_IDRAM_RSTDATA,
    ._rmsk.val = AR_NP_ERR_INFO_IDRAM_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_INFO_IDRAM_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_INFO_IDRAM_RDMASK,
    ._xsmsk.val = AR_NP_ERR_INFO_IDRAM_XSMASK,
    ._wsemsk.val = AR_NP_ERR_INFO_IDRAM_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_INFO_IDRAM_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_INFO_IDRAM_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_INFO_IDRAM_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_INFO_IDRAM_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_INFO_IDRAM_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_INFO_IDRAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_err_info_idram_detail
};
static const cmmr_br_t __ar_np_err_info_cnt_iram = {
    ._name = "AR_NP_ERR_INFO_CNT_IRAM",
    ._addr = AR_NP_ERR_INFO_CNT_IRAM,
    ._rval.val = AR_NP_ERR_INFO_CNT_IRAM_RSTDATA,
    ._rmsk.val = AR_NP_ERR_INFO_CNT_IRAM_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_INFO_CNT_IRAM_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_INFO_CNT_IRAM_RDMASK,
    ._xsmsk.val = AR_NP_ERR_INFO_CNT_IRAM_XSMASK,
    ._wsemsk.val = AR_NP_ERR_INFO_CNT_IRAM_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_INFO_CNT_IRAM_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_INFO_CNT_IRAM_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_INFO_CNT_IRAM_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_INFO_CNT_IRAM_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_INFO_CNT_IRAM_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_INFO_CNT_IRAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_err_info_cnt_iram_detail
};
static const cmmr_br_t __ar_np_err_info_cnt_dram = {
    ._name = "AR_NP_ERR_INFO_CNT_DRAM",
    ._addr = AR_NP_ERR_INFO_CNT_DRAM,
    ._rval.val = AR_NP_ERR_INFO_CNT_DRAM_RSTDATA,
    ._rmsk.val = AR_NP_ERR_INFO_CNT_DRAM_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_INFO_CNT_DRAM_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_INFO_CNT_DRAM_RDMASK,
    ._xsmsk.val = AR_NP_ERR_INFO_CNT_DRAM_XSMASK,
    ._wsemsk.val = AR_NP_ERR_INFO_CNT_DRAM_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_INFO_CNT_DRAM_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_INFO_CNT_DRAM_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_INFO_CNT_DRAM_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_INFO_CNT_DRAM_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_INFO_CNT_DRAM_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_INFO_CNT_DRAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_err_info_cnt_dram_detail
};
static const cmmr_br_t __ar_np_err_info_cnt_idram = {
    ._name = "AR_NP_ERR_INFO_CNT_IDRAM",
    ._addr = AR_NP_ERR_INFO_CNT_IDRAM,
    ._rval.val = AR_NP_ERR_INFO_CNT_IDRAM_RSTDATA,
    ._rmsk.val = AR_NP_ERR_INFO_CNT_IDRAM_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_INFO_CNT_IDRAM_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_INFO_CNT_IDRAM_RDMASK,
    ._xsmsk.val = AR_NP_ERR_INFO_CNT_IDRAM_XSMASK,
    ._wsemsk.val = AR_NP_ERR_INFO_CNT_IDRAM_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_INFO_CNT_IDRAM_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_INFO_CNT_IDRAM_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_INFO_CNT_IDRAM_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_INFO_CNT_IDRAM_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_INFO_CNT_IDRAM_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_INFO_CNT_IDRAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_err_info_cnt_idram_detail
};
static const cmmr_br_t __ar_np_deb_mon_sfr0 = {
    ._name = "AR_NP_DEB_MON_SFR0",
    ._addr = AR_NP_DEB_MON_SFR0,
    ._rval.val = AR_NP_DEB_MON_SFR0_RSTDATA,
    ._rmsk.val = AR_NP_DEB_MON_SFR0_RSTMASK,
    ._wrmsk.val = AR_NP_DEB_MON_SFR0_WRTMASK,
    ._rdmsk.val = AR_NP_DEB_MON_SFR0_RDMASK,
    ._xsmsk.val = AR_NP_DEB_MON_SFR0_XSMASK,
    ._wsemsk.val = AR_NP_DEB_MON_SFR0_WSEMASK,
    ._rsemsk.val = AR_NP_DEB_MON_SFR0_RSEMASK,
    ._w1smsk.val = AR_NP_DEB_MON_SFR0_W1SMASK,
    ._w1cmsk.val = AR_NP_DEB_MON_SFR0_W1CMASK,
    ._wrstmsk.val = AR_NP_DEB_MON_SFR0_WRSTMASK,
    ._hwwmsk.val = AR_NP_DEB_MON_SFR0_HWWMASK,
    ._hwrmsk.val = AR_NP_DEB_MON_SFR0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_deb_mon_sfr0_detail
};
static const cmmr_br_t __ar_np_deb_mon_sfr1 = {
    ._name = "AR_NP_DEB_MON_SFR1",
    ._addr = AR_NP_DEB_MON_SFR1,
    ._rval.val = AR_NP_DEB_MON_SFR1_RSTDATA,
    ._rmsk.val = AR_NP_DEB_MON_SFR1_RSTMASK,
    ._wrmsk.val = AR_NP_DEB_MON_SFR1_WRTMASK,
    ._rdmsk.val = AR_NP_DEB_MON_SFR1_RDMASK,
    ._xsmsk.val = AR_NP_DEB_MON_SFR1_XSMASK,
    ._wsemsk.val = AR_NP_DEB_MON_SFR1_WSEMASK,
    ._rsemsk.val = AR_NP_DEB_MON_SFR1_RSEMASK,
    ._w1smsk.val = AR_NP_DEB_MON_SFR1_W1SMASK,
    ._w1cmsk.val = AR_NP_DEB_MON_SFR1_W1CMASK,
    ._wrstmsk.val = AR_NP_DEB_MON_SFR1_WRSTMASK,
    ._hwwmsk.val = AR_NP_DEB_MON_SFR1_HWWMASK,
    ._hwrmsk.val = AR_NP_DEB_MON_SFR1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_deb_mon_sfr1_detail
};
static const cmmr_br_t __ar_np_deb_mon_sfr2 = {
    ._name = "AR_NP_DEB_MON_SFR2",
    ._addr = AR_NP_DEB_MON_SFR2,
    ._rval.val = AR_NP_DEB_MON_SFR2_RSTDATA,
    ._rmsk.val = AR_NP_DEB_MON_SFR2_RSTMASK,
    ._wrmsk.val = AR_NP_DEB_MON_SFR2_WRTMASK,
    ._rdmsk.val = AR_NP_DEB_MON_SFR2_RDMASK,
    ._xsmsk.val = AR_NP_DEB_MON_SFR2_XSMASK,
    ._wsemsk.val = AR_NP_DEB_MON_SFR2_WSEMASK,
    ._rsemsk.val = AR_NP_DEB_MON_SFR2_RSEMASK,
    ._w1smsk.val = AR_NP_DEB_MON_SFR2_W1SMASK,
    ._w1cmsk.val = AR_NP_DEB_MON_SFR2_W1CMASK,
    ._wrstmsk.val = AR_NP_DEB_MON_SFR2_WRSTMASK,
    ._hwwmsk.val = AR_NP_DEB_MON_SFR2_HWWMASK,
    ._hwrmsk.val = AR_NP_DEB_MON_SFR2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_deb_mon_sfr2_detail
};
static const cmmr_br_t __ar_np_deb_mon_sfr3 = {
    ._name = "AR_NP_DEB_MON_SFR3",
    ._addr = AR_NP_DEB_MON_SFR3,
    ._rval.val = AR_NP_DEB_MON_SFR3_RSTDATA,
    ._rmsk.val = AR_NP_DEB_MON_SFR3_RSTMASK,
    ._wrmsk.val = AR_NP_DEB_MON_SFR3_WRTMASK,
    ._rdmsk.val = AR_NP_DEB_MON_SFR3_RDMASK,
    ._xsmsk.val = AR_NP_DEB_MON_SFR3_XSMASK,
    ._wsemsk.val = AR_NP_DEB_MON_SFR3_WSEMASK,
    ._rsemsk.val = AR_NP_DEB_MON_SFR3_RSEMASK,
    ._w1smsk.val = AR_NP_DEB_MON_SFR3_W1SMASK,
    ._w1cmsk.val = AR_NP_DEB_MON_SFR3_W1CMASK,
    ._wrstmsk.val = AR_NP_DEB_MON_SFR3_WRSTMASK,
    ._hwwmsk.val = AR_NP_DEB_MON_SFR3_HWWMASK,
    ._hwrmsk.val = AR_NP_DEB_MON_SFR3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_deb_mon_sfr3_detail
};
static const cmmr_br_t __ar_np_deb_mon_sfr4 = {
    ._name = "AR_NP_DEB_MON_SFR4",
    ._addr = AR_NP_DEB_MON_SFR4,
    ._rval.val = AR_NP_DEB_MON_SFR4_RSTDATA,
    ._rmsk.val = AR_NP_DEB_MON_SFR4_RSTMASK,
    ._wrmsk.val = AR_NP_DEB_MON_SFR4_WRTMASK,
    ._rdmsk.val = AR_NP_DEB_MON_SFR4_RDMASK,
    ._xsmsk.val = AR_NP_DEB_MON_SFR4_XSMASK,
    ._wsemsk.val = AR_NP_DEB_MON_SFR4_WSEMASK,
    ._rsemsk.val = AR_NP_DEB_MON_SFR4_RSEMASK,
    ._w1smsk.val = AR_NP_DEB_MON_SFR4_W1SMASK,
    ._w1cmsk.val = AR_NP_DEB_MON_SFR4_W1CMASK,
    ._wrstmsk.val = AR_NP_DEB_MON_SFR4_WRSTMASK,
    ._hwwmsk.val = AR_NP_DEB_MON_SFR4_HWWMASK,
    ._hwrmsk.val = AR_NP_DEB_MON_SFR4_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_deb_mon_sfr4_detail
};
static const cmmr_br_t __ar_np_deb_mon_sfr5 = {
    ._name = "AR_NP_DEB_MON_SFR5",
    ._addr = AR_NP_DEB_MON_SFR5,
    ._rval.val = AR_NP_DEB_MON_SFR5_RSTDATA,
    ._rmsk.val = AR_NP_DEB_MON_SFR5_RSTMASK,
    ._wrmsk.val = AR_NP_DEB_MON_SFR5_WRTMASK,
    ._rdmsk.val = AR_NP_DEB_MON_SFR5_RDMASK,
    ._xsmsk.val = AR_NP_DEB_MON_SFR5_XSMASK,
    ._wsemsk.val = AR_NP_DEB_MON_SFR5_WSEMASK,
    ._rsemsk.val = AR_NP_DEB_MON_SFR5_RSEMASK,
    ._w1smsk.val = AR_NP_DEB_MON_SFR5_W1SMASK,
    ._w1cmsk.val = AR_NP_DEB_MON_SFR5_W1CMASK,
    ._wrstmsk.val = AR_NP_DEB_MON_SFR5_WRSTMASK,
    ._hwwmsk.val = AR_NP_DEB_MON_SFR5_HWWMASK,
    ._hwrmsk.val = AR_NP_DEB_MON_SFR5_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_deb_mon_sfr5_detail
};
static const cmmr_br_t __ar_np_deb_mon_heatbeat_cnt = {
    ._name = "AR_NP_DEB_MON_HEATBEAT_CNT",
    ._addr = AR_NP_DEB_MON_HEATBEAT_CNT,
    ._rval.val = AR_NP_DEB_MON_HEATBEAT_CNT_RSTDATA,
    ._rmsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_RSTMASK,
    ._wrmsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_WRTMASK,
    ._rdmsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_RDMASK,
    ._xsmsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_XSMASK,
    ._wsemsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_WSEMASK,
    ._rsemsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_RSEMASK,
    ._w1smsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_W1SMASK,
    ._w1cmsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_W1CMASK,
    ._wrstmsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_WRSTMASK,
    ._hwwmsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_HWWMASK,
    ._hwrmsk.val = AR_NP_DEB_MON_HEATBEAT_CNT_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_deb_mon_heatbeat_cnt_detail
};
static const cmmr_br_t __ar_np_sts_therm_sensor_cfg = {
    ._name = "AR_NP_STS_THERM_SENSOR_CFG",
    ._addr = AR_NP_STS_THERM_SENSOR_CFG,
    ._rval.val = AR_NP_STS_THERM_SENSOR_CFG_RSTDATA,
    ._rmsk.val = AR_NP_STS_THERM_SENSOR_CFG_RSTMASK,
    ._wrmsk.val = AR_NP_STS_THERM_SENSOR_CFG_WRTMASK,
    ._rdmsk.val = AR_NP_STS_THERM_SENSOR_CFG_RDMASK,
    ._xsmsk.val = AR_NP_STS_THERM_SENSOR_CFG_XSMASK,
    ._wsemsk.val = AR_NP_STS_THERM_SENSOR_CFG_WSEMASK,
    ._rsemsk.val = AR_NP_STS_THERM_SENSOR_CFG_RSEMASK,
    ._w1smsk.val = AR_NP_STS_THERM_SENSOR_CFG_W1SMASK,
    ._w1cmsk.val = AR_NP_STS_THERM_SENSOR_CFG_W1CMASK,
    ._wrstmsk.val = AR_NP_STS_THERM_SENSOR_CFG_WRSTMASK,
    ._hwwmsk.val = AR_NP_STS_THERM_SENSOR_CFG_HWWMASK,
    ._hwrmsk.val = AR_NP_STS_THERM_SENSOR_CFG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_np_sts_therm_sensor_cfg_detail
};
static const cmmr_br_t __ar_np_err_flg = {
    ._name = "AR_NP_ERR_FLG",
    ._addr = AR_NP_ERR_FLG,
    ._rval.val = AR_NP_ERR_FLG_RSTDATA,
    ._rmsk.val = AR_NP_ERR_FLG_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_FLG_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_FLG_RDMASK,
    ._xsmsk.val = AR_NP_ERR_FLG_XSMASK,
    ._wsemsk.val = AR_NP_ERR_FLG_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_FLG_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_FLG_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_FLG_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_FLG_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_FLG_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000011ull,
    ._info = __ar_np_err_flg_detail
};
static const cmmr_br_t __ar_np_err_clr = {
    ._name = "AR_NP_ERR_CLR",
    ._addr = AR_NP_ERR_CLR,
    ._rval.val = AR_NP_ERR_CLR_RSTDATA,
    ._rmsk.val = AR_NP_ERR_CLR_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_CLR_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_CLR_RDMASK,
    ._xsmsk.val = AR_NP_ERR_CLR_XSMASK,
    ._wsemsk.val = AR_NP_ERR_CLR_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_CLR_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_CLR_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_CLR_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_CLR_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_CLR_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_CLR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000021ull,
    ._info = __ar_np_err_clr_detail
};
static const cmmr_br_t __ar_np_err_hss_msk = {
    ._name = "AR_NP_ERR_HSS_MSK",
    ._addr = AR_NP_ERR_HSS_MSK,
    ._rval.val = AR_NP_ERR_HSS_MSK_RSTDATA,
    ._rmsk.val = AR_NP_ERR_HSS_MSK_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_HSS_MSK_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_HSS_MSK_RDMASK,
    ._xsmsk.val = AR_NP_ERR_HSS_MSK_XSMASK,
    ._wsemsk.val = AR_NP_ERR_HSS_MSK_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_HSS_MSK_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_HSS_MSK_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_HSS_MSK_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_HSS_MSK_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_HSS_MSK_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_HSS_MSK_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000041ull,
    ._info = __ar_np_err_hss_msk_detail
};
static const cmmr_br_t __ar_np_err_first_flg = {
    ._name = "AR_NP_ERR_FIRST_FLG",
    ._addr = AR_NP_ERR_FIRST_FLG,
    ._rval.val = AR_NP_ERR_FIRST_FLG_RSTDATA,
    ._rmsk.val = AR_NP_ERR_FIRST_FLG_RSTMASK,
    ._wrmsk.val = AR_NP_ERR_FIRST_FLG_WRTMASK,
    ._rdmsk.val = AR_NP_ERR_FIRST_FLG_RDMASK,
    ._xsmsk.val = AR_NP_ERR_FIRST_FLG_XSMASK,
    ._wsemsk.val = AR_NP_ERR_FIRST_FLG_WSEMASK,
    ._rsemsk.val = AR_NP_ERR_FIRST_FLG_RSEMASK,
    ._w1smsk.val = AR_NP_ERR_FIRST_FLG_W1SMASK,
    ._w1cmsk.val = AR_NP_ERR_FIRST_FLG_W1CMASK,
    ._wrstmsk.val = AR_NP_ERR_FIRST_FLG_WRSTMASK,
    ._hwwmsk.val = AR_NP_ERR_FIRST_FLG_HWWMASK,
    ._hwrmsk.val = AR_NP_ERR_FIRST_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000401ull,
    ._info = __ar_np_err_first_flg_detail
};
static const cmmr_br_t __ar_np_cfg_req_stream_ld_dp_iram = {
    ._name = "AR_NP_CFG_REQ_STREAM_LD_DP_IRAM",
    ._addr = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM,
    ._rval.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTDATA,
    ._rmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSTMASK,
    ._wrmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_WRTMASK,
    ._rdmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RDMASK,
    ._xsmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_XSMASK,
    ._wsemsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_WSEMASK,
    ._rsemsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_RSEMASK,
    ._w1smsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_W1SMASK,
    ._w1cmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_W1CMASK,
    ._wrstmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_WRSTMASK,
    ._hwwmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_HWWMASK,
    ._hwrmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_IRAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 8,
    ._depth = 4096,
      ._type_bitmsk = 0x0000000000000008ull,
    ._info = __ar_np_cfg_req_stream_ld_dp_iram_detail
};
static const cmmr_br_t __ar_np_cfg_req_stream_ld_dp_dram = {
    ._name = "AR_NP_CFG_REQ_STREAM_LD_DP_DRAM",
    ._addr = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM,
    ._rval.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTDATA,
    ._rmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSTMASK,
    ._wrmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_WRTMASK,
    ._rdmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RDMASK,
    ._xsmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_XSMASK,
    ._wsemsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_WSEMASK,
    ._rsemsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_RSEMASK,
    ._w1smsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_W1SMASK,
    ._w1cmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_W1CMASK,
    ._wrstmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_WRSTMASK,
    ._hwwmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_HWWMASK,
    ._hwrmsk.val = AR_NP_CFG_REQ_STREAM_LD_DP_DRAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 8,
    ._depth = 2048,
      ._type_bitmsk = 0x0000000000000008ull,
    ._info = __ar_np_cfg_req_stream_ld_dp_dram_detail
};

/*
 *  INSTALL AR NP MMRS
 */
static const cmmr_br_t* __ar_np_mmrs[] = {
    &__ar_np_cfg,
    &__ar_np_dbg_sfr_access,
    &__ar_np_dbg_processor,
    &__ar_np_cfg_req_sbus,
    &__ar_np_cfg_rsp_sbus,
    &__ar_np_cfg_req_cbus,
    &__ar_np_cfg_rsp_cbus,
    &__ar_np_sts_therm_sensor_req,
    &__ar_np_sts_therm_sensor_rsp,
    &__ar_np_dbg_errinj_ecc,
    &__ar_np_err_info_iram,
    &__ar_np_err_info_dram,
    &__ar_np_err_info_idram,
    &__ar_np_err_info_cnt_iram,
    &__ar_np_err_info_cnt_dram,
    &__ar_np_err_info_cnt_idram,
    &__ar_np_deb_mon_sfr0,
    &__ar_np_deb_mon_sfr1,
    &__ar_np_deb_mon_sfr2,
    &__ar_np_deb_mon_sfr3,
    &__ar_np_deb_mon_sfr4,
    &__ar_np_deb_mon_sfr5,
    &__ar_np_deb_mon_heatbeat_cnt,
    &__ar_np_sts_therm_sensor_cfg,
    &__ar_np_err_flg,
    &__ar_np_err_clr,
    &__ar_np_err_hss_msk,
    &__ar_np_err_first_flg,
    &__ar_np_cfg_req_stream_ld_dp_iram,
    &__ar_np_cfg_req_stream_ld_dp_dram,
    NULL
};

/*
 *  INSTALL AR NP LM MUX SELECT ENCODINGS
 */
static const cmmr_br_t* __ar_np_enc_mmrs[] = {
    NULL
};

#endif
