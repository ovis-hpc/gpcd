/******************************************************************************
 * COPYRIGHT CRAY INC. ar_pi_ip_detailed_mmrs_h.h
 * FILE: ar_pi_ip_detailed_mmrs_h.h
 * Created by v2h.c on Wed Oct  8 14:39:03 2014
 ******************************************************************************/
/**
 * @file ar_pi_ip_detailed_mmrs_h.h
 * @author v2h.c on Wed Oct  8 14:39:03 2014
 * @section overview Overview:
 *	    Sets up ar_detailed_mmr_t and ar_detailed_mmrd_t structs for each MMR/MMR subfield with constants
 *	    found in ar_pi_ip_mmr_values.h and ar_pi_ip_defs.h. Then puts each ar_detailed_mmr_t set up
 *	    into an array. Used by the Cray MMR Access Library.
 */

#include "ar_pi_ip_mmr_values.h"

#ifndef _AR_PI_IP_DETAILED_MMRS_H_H_
#define _AR_PI_IP_DETAILED_MMRS_H_H_

#ifndef _CMMR_FR_T_
#define _CMMR_FR_T_
/**
 * @struct cmmr_fr_s
 * Gemini Detailed MMR Field Descriptor
 * @see cmmr_br_s
 *
 * The Detailed MMR Field Descriptor contains information about individual
 * fields of a MMR in an ASIC. Used by the Cray MMR Access Library.
 *
 */
typedef struct cmmr_fr_s{
	char* _name;		/**< Field name */
	uint32_t _bpos;		/**< Field bit postion relative to QW */
	uint64_t _mask;		/**< Field bit mask relative to QW */
	uint64_t _rval;		/**< Reset data relative to QW */
	uint64_t _type_bitmsk;	/**< Field Type Bit Mask */
	int _index;		/**< QW Index */
	char* _desc;		/**< Field Description */
	char* _access;		/**< Field Access */
} cmmr_fr_t; /**< cmmr_fr_s */
#endif

#ifndef _CMMR_BR_T_
#define _CMMR_BR_T_
/**
 * @struct cmmr_br_s
 * Gemini Detailed MMR Descriptor
 * @see cmmr_fr_s
 *
 * The Detailed MMR contains information about a individual MMR in an ASIC.
 * Used by the Cray MMR Access Library.
 *
 */
typedef struct cmmr_br_s{
	char* _name;			/**< MMR name */
	uint64_t _addr;			/**< MMR address */
	uint64_t _type_bitmsk;		/**< MMR Type Bit Mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rval;	/**< Reset data */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rmsk;	/**< Reset mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _wrmsk;	/**< Write mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rdmsk;	/**< Read mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _xsmsk;	/**< XState mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _wsemsk;	/**< Write only with side effects */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _rsemsk;	/**< Read only with side effects */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _w1smsk;	/**< Write okay but only 1's stick */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _w1cmsk;	/**< Write of 1 clears bit */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _wrstmsk;	/**< Warm Reset Mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _hwwmsk;	/**< Hardware Write Mask */
	union{
		uint64_t val;
		uint64_t *ptr;
	} _hwrmsk;	/**< Hardware Read Mask */
	int _nqw;			/**< Number of QW */
	int _size;			/**< Size in bytes of MMR */
	int _incr;			/**< Increment between table entries */
	int _depth;			/**< Number of MMR instances */
	const cmmr_fr_t *_info;	/**< MMR detail */
} cmmr_br_t; /**< cmmr_br_s */
#endif

static const cmmr_br_t* __ar_pi_ip_mmrs[];	/* PI_IP Array */

/*
 *  AR PI_IP MMR DETAIL DECLARATIONS
 */
static const cmmr_fr_t __ar_pi_cfg_den_ip_detail[] = {
    { ._name = "LINK_DOWN_RESET_COUNT",
      ._bpos = AR_PI_CFG_DEN_IP_LINK_DOWN_RESET_COUNT_BP,
      ._mask = AR_PI_CFG_DEN_IP_LINK_DOWN_RESET_COUNT_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_LINK_DOWN_RESET_COUNT_MASK,
      ._index = AR_PI_CFG_DEN_IP_LINK_DOWN_RESET_COUNT_QW,
      ._desc = "Link Down Reset is pulsed for 8 pclks (500Mhz) from the Denali IP",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PHY_LANE_RESET_PLTRST_ENABLE",
      ._bpos = AR_PI_CFG_DEN_IP_PHY_LANE_RESET_PLTRST_ENABLE_BP,
      ._mask = AR_PI_CFG_DEN_IP_PHY_LANE_RESET_PLTRST_ENABLE_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_PHY_LANE_RESET_PLTRST_ENABLE_MASK,
      ._index = AR_PI_CFG_DEN_IP_PHY_LANE_RESET_PLTRST_ENABLE_QW,
      ._desc = "Also force lane reset when platform reset asserts",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "DEBUG_STATUS_PERF_CNTR_SEL",
      ._bpos = AR_PI_CFG_DEN_IP_DEBUG_STATUS_PERF_CNTR_SEL_BP,
      ._mask = AR_PI_CFG_DEN_IP_DEBUG_STATUS_PERF_CNTR_SEL_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_DEBUG_STATUS_PERF_CNTR_SEL_MASK,
      ._index = AR_PI_CFG_DEN_IP_DEBUG_STATUS_PERF_CNTR_SEL_QW,
      ._desc = "If set, selects the upper 8 bits of the Denali debug status bits to be sent to the pclk performance counter instead of the lower 8 bits",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "LANE_COUNT_IN",
      ._bpos = AR_PI_CFG_DEN_IP_LANE_COUNT_IN_BP,
      ._mask = AR_PI_CFG_DEN_IP_LANE_COUNT_IN_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_LANE_COUNT_IN_MASK,
      ._index = AR_PI_CFG_DEN_IP_LANE_COUNT_IN_QW,
      ._desc = "This strap input allows the core to be brought up with a reduced link-width",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PCIE_DISABLE_GEN3_DC_BALANCE",
      ._bpos = AR_PI_CFG_DEN_IP_PCIE_DISABLE_GEN3_DC_BALANCE_BP,
      ._mask = AR_PI_CFG_DEN_IP_PCIE_DISABLE_GEN3_DC_BALANCE_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_PCIE_DISABLE_GEN3_DC_BALANCE_MASK,
      ._index = AR_PI_CFG_DEN_IP_PCIE_DISABLE_GEN3_DC_BALANCE_QW,
      ._desc = "Setting changes Denali IP to act as a pcie gen 3 version 0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PCIE_GENERATION_SEL",
      ._bpos = AR_PI_CFG_DEN_IP_PCIE_GENERATION_SEL_BP,
      ._mask = AR_PI_CFG_DEN_IP_PCIE_GENERATION_SEL_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_PCIE_GENERATION_SEL_MASK,
      ._index = AR_PI_CFG_DEN_IP_PCIE_GENERATION_SEL_QW,
      ._desc = "This strap input selects the generation of the PCI Express protocol supported by the core",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PHANTOM_FUNCTION_MODE_SEL",
      ._bpos = AR_PI_CFG_DEN_IP_PHANTOM_FUNCTION_MODE_SEL_BP,
      ._mask = AR_PI_CFG_DEN_IP_PHANTOM_FUNCTION_MODE_SEL_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_PHANTOM_FUNCTION_MODE_SEL_MASK,
      ._index = AR_PI_CFG_DEN_IP_PHANTOM_FUNCTION_MODE_SEL_QW,
      ._desc = "These two strap inputs are used to select the number of Physical (Real) and Phantom Functions enabled in the EndPoint",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "LINK_DOWN_ENABLE",
      ._bpos = AR_PI_CFG_DEN_IP_LINK_DOWN_ENABLE_BP,
      ._mask = AR_PI_CFG_DEN_IP_LINK_DOWN_ENABLE_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_LINK_DOWN_ENABLE_MASK,
      ._index = AR_PI_CFG_DEN_IP_LINK_DOWN_ENABLE_QW,
      ._desc = "Link Down reset Enable",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PLTRST_ENABLE",
      ._bpos = AR_PI_CFG_DEN_IP_PLTRST_ENABLE_BP,
      ._mask = AR_PI_CFG_DEN_IP_PLTRST_ENABLE_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_PLTRST_ENABLE_MASK,
      ._index = AR_PI_CFG_DEN_IP_PLTRST_ENABLE_QW,
      ._desc = "Platform Reset Enable",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "LINK_TRAINING_ENABLE",
      ._bpos = AR_PI_CFG_DEN_IP_LINK_TRAINING_ENABLE_BP,
      ._mask = AR_PI_CFG_DEN_IP_LINK_TRAINING_ENABLE_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_LINK_TRAINING_ENABLE_MASK,
      ._index = AR_PI_CFG_DEN_IP_LINK_TRAINING_ENABLE_QW,
      ._desc = "This input must be set to 1 to enable the Link Training Status State Machine (LTSSM) to brink up the link",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CONFIG_ENABLE",
      ._bpos = AR_PI_CFG_DEN_IP_CONFIG_ENABLE_BP,
      ._mask = AR_PI_CFG_DEN_IP_CONFIG_ENABLE_MASK,
      ._rval = AR_PI_CFG_DEN_IP_RSTDATA & AR_PI_CFG_DEN_IP_CONFIG_ENABLE_MASK,
      ._index = AR_PI_CFG_DEN_IP_CONFIG_ENABLE_QW,
      ._desc = "When this input is set to 0 in the EP mode, the core will generate a CRS Completion in response to Configuration Requests",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_sts_den_ip_detail[] = {
    { ._name = "FUNCTION_POWER_STATE",
      ._bpos = AR_PI_STS_DEN_IP_FUNCTION_POWER_STATE_BP,
      ._mask = AR_PI_STS_DEN_IP_FUNCTION_POWER_STATE_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_FUNCTION_POWER_STATE_MASK,
      ._index = AR_PI_STS_DEN_IP_FUNCTION_POWER_STATE_QW,
      ._desc = "These outputs provide the current power state of the Physical Functions",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "FUNCTION_STATUS",
      ._bpos = AR_PI_STS_DEN_IP_FUNCTION_STATUS_BP,
      ._mask = AR_PI_STS_DEN_IP_FUNCTION_STATUS_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_FUNCTION_STATUS_MASK,
      ._index = AR_PI_STS_DEN_IP_FUNCTION_STATUS_QW,
      ._desc = "These outputs indicate the states of the Command Register bits in the PCI configuration space of each Function",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "RCB_STATUS",
      ._bpos = AR_PI_STS_DEN_IP_RCB_STATUS_BP,
      ._mask = AR_PI_STS_DEN_IP_RCB_STATUS_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_RCB_STATUS_MASK,
      ._index = AR_PI_STS_DEN_IP_RCB_STATUS_QW,
      ._desc = "Provides the setting of the Read Completion Boundary (RCB) bit in the Link Control Register of each Physical Function",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "MAX_PAYLOAD_SIZE",
      ._bpos = AR_PI_STS_DEN_IP_MAX_PAYLOAD_SIZE_BP,
      ._mask = AR_PI_STS_DEN_IP_MAX_PAYLOAD_SIZE_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_MAX_PAYLOAD_SIZE_MASK,
      ._index = AR_PI_STS_DEN_IP_MAX_PAYLOAD_SIZE_QW,
      ._desc = "The maximum payload size field programmed in the PCI Express Device Control Register",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "LTSSM_STATE",
      ._bpos = AR_PI_STS_DEN_IP_LTSSM_STATE_BP,
      ._mask = AR_PI_STS_DEN_IP_LTSSM_STATE_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_LTSSM_STATE_MASK,
      ._index = AR_PI_STS_DEN_IP_LTSSM_STATE_QW,
      ._desc = "Current state of the Link Training and Status State Machine within the core",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "LINK_POWER_STATE",
      ._bpos = AR_PI_STS_DEN_IP_LINK_POWER_STATE_BP,
      ._mask = AR_PI_STS_DEN_IP_LINK_POWER_STATE_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_LINK_POWER_STATE_MASK,
      ._index = AR_PI_STS_DEN_IP_LINK_POWER_STATE_QW,
      ._desc = "Current power state of the PCIe link",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "MAX_READ_REQ_SIZE",
      ._bpos = AR_PI_STS_DEN_IP_MAX_READ_REQ_SIZE_BP,
      ._mask = AR_PI_STS_DEN_IP_MAX_READ_REQ_SIZE_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_MAX_READ_REQ_SIZE_MASK,
      ._index = AR_PI_STS_DEN_IP_MAX_READ_REQ_SIZE_QW,
      ._desc = "The maximum request size field programmed in the PCI Express Device Control Register",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "LINK_STATUS",
      ._bpos = AR_PI_STS_DEN_IP_LINK_STATUS_BP,
      ._mask = AR_PI_STS_DEN_IP_LINK_STATUS_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_LINK_STATUS_MASK,
      ._index = AR_PI_STS_DEN_IP_LINK_STATUS_QW,
      ._desc = "Status of the PCI Express link",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "NEGOTIATED_SPEED",
      ._bpos = AR_PI_STS_DEN_IP_NEGOTIATED_SPEED_BP,
      ._mask = AR_PI_STS_DEN_IP_NEGOTIATED_SPEED_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_NEGOTIATED_SPEED_MASK,
      ._index = AR_PI_STS_DEN_IP_NEGOTIATED_SPEED_QW,
      ._desc = "Current operating speed of the link (00 = 2",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "LINK_DOWN_RESET_OUT",
      ._bpos = AR_PI_STS_DEN_IP_LINK_DOWN_RESET_OUT_BP,
      ._mask = AR_PI_STS_DEN_IP_LINK_DOWN_RESET_OUT_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_LINK_DOWN_RESET_OUT_MASK,
      ._index = AR_PI_STS_DEN_IP_LINK_DOWN_RESET_OUT_QW,
      ._desc = "This output is asserted by the core when its LTSSM detects a link-down event (when the LINK_UP state variable goes to 0)",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO,HWO"
    },
    { ._name = "HOT_RESET_OUT",
      ._bpos = AR_PI_STS_DEN_IP_HOT_RESET_OUT_BP,
      ._mask = AR_PI_STS_DEN_IP_HOT_RESET_OUT_MASK,
      ._rval = AR_PI_STS_DEN_IP_RSTDATA & AR_PI_STS_DEN_IP_HOT_RESET_OUT_MASK,
      ._index = AR_PI_STS_DEN_IP_HOT_RESET_OUT_QW,
      ._desc = "The core activates this output when a hot reset is received from the link in the Endpoint mode",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_err_flg_ip_detail[] = {
    { ._name = "LB_RING_PCLK_UNFLOW",
      ._bpos = AR_PI_ERR_FLG_IP_LB_RING_PCLK_UNFLOW_BP,
      ._mask = AR_PI_ERR_FLG_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._index = AR_PI_ERR_FLG_IP_LB_RING_PCLK_UNFLOW_QW,
      ._desc = "LB Ring FIFO for converting cclk to pclk has underflowed",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "LB_RING_PCLK_OVFLOW",
      ._bpos = AR_PI_ERR_FLG_IP_LB_RING_PCLK_OVFLOW_BP,
      ._mask = AR_PI_ERR_FLG_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._index = AR_PI_ERR_FLG_IP_LB_RING_PCLK_OVFLOW_QW,
      ._desc = "LB Ring FIFO for converting pclk to cclk has overflowed",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PM_CNTR_ROLLOVER",
      ._bpos = AR_PI_ERR_FLG_IP_PM_CNTR_ROLLOVER_BP,
      ._mask = AR_PI_ERR_FLG_IP_PM_CNTR_ROLLOVER_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_PM_CNTR_ROLLOVER_MASK,
      ._index = AR_PI_ERR_FLG_IP_PM_CNTR_ROLLOVER_QW,
      ._desc = "performance monitor counter rollover",
      ._type_bitmsk = 0x0000000000080001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PM_CNTR_PERR",
      ._bpos = AR_PI_ERR_FLG_IP_PM_CNTR_PERR_BP,
      ._mask = AR_PI_ERR_FLG_IP_PM_CNTR_PERR_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_PM_CNTR_PERR_MASK,
      ._index = AR_PI_ERR_FLG_IP_PM_CNTR_PERR_QW,
      ._desc = "performance monitor counter parity error",
      ._type_bitmsk = 0x0000000000080001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DEN_SPEED_CHANGE",
      ._bpos = AR_PI_ERR_FLG_IP_DEN_SPEED_CHANGE_BP,
      ._mask = AR_PI_ERR_FLG_IP_DEN_SPEED_CHANGE_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_DEN_SPEED_CHANGE_MASK,
      ._index = AR_PI_ERR_FLG_IP_DEN_SPEED_CHANGE_QW,
      ._desc = "The pcie had a link width change or a speed change (Gen1, 2, or 3 speed)",
      ._type_bitmsk = 0x0000000000080001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DEN_INTR",
      ._bpos = AR_PI_ERR_FLG_IP_DEN_INTR_BP,
      ._mask = AR_PI_ERR_FLG_IP_DEN_INTR_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_DEN_INTR_MASK,
      ._index = AR_PI_ERR_FLG_IP_DEN_INTR_QW,
      ._desc = "Denali Core Local Interrupt",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DEN_DPA_INTR",
      ._bpos = AR_PI_ERR_FLG_IP_DEN_DPA_INTR_BP,
      ._mask = AR_PI_ERR_FLG_IP_DEN_DPA_INTR_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_DEN_DPA_INTR_MASK,
      ._index = AR_PI_ERR_FLG_IP_DEN_DPA_INTR_QW,
      ._desc = "Denali Core Dynamic Power Allocation Interrupt",
      ._type_bitmsk = 0x0000000000080001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DEN_CORRECTABLE_ERROR",
      ._bpos = AR_PI_ERR_FLG_IP_DEN_CORRECTABLE_ERROR_BP,
      ._mask = AR_PI_ERR_FLG_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._index = AR_PI_ERR_FLG_IP_DEN_CORRECTABLE_ERROR_QW,
      ._desc = "Denali Core Correctable Error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DEN_NON_FATAL_ERROR",
      ._bpos = AR_PI_ERR_FLG_IP_DEN_NON_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_FLG_IP_DEN_NON_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_DEN_NON_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_FLG_IP_DEN_NON_FATAL_ERROR_QW,
      ._desc = "Denali Core Non Fatal Error",
      ._type_bitmsk = 0x0000000000080001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DEN_FATAL_ERROR",
      ._bpos = AR_PI_ERR_FLG_IP_DEN_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_FLG_IP_DEN_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_DEN_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_FLG_IP_DEN_FATAL_ERROR_QW,
      ._desc = "Denali Core Fatal Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_ERR_FLG_IP_DIAG_ONLY_BP,
      ._mask = AR_PI_ERR_FLG_IP_DIAG_ONLY_MASK,
      ._rval = AR_PI_ERR_FLG_IP_RSTDATA & AR_PI_ERR_FLG_IP_DIAG_ONLY_MASK,
      ._index = AR_PI_ERR_FLG_IP_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000100001ull,
      ._access = "RW1,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_err_clr_ip_detail[] = {
    { ._name = "LB_RING_PCLK_UNFLOW",
      ._bpos = AR_PI_ERR_CLR_IP_LB_RING_PCLK_UNFLOW_BP,
      ._mask = AR_PI_ERR_CLR_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._index = AR_PI_ERR_CLR_IP_LB_RING_PCLK_UNFLOW_QW,
      ._desc = "LB Ring FIFO for converting cclk to pclk has underflowed",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "LB_RING_PCLK_OVFLOW",
      ._bpos = AR_PI_ERR_CLR_IP_LB_RING_PCLK_OVFLOW_BP,
      ._mask = AR_PI_ERR_CLR_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._index = AR_PI_ERR_CLR_IP_LB_RING_PCLK_OVFLOW_QW,
      ._desc = "LB Ring FIFO for converting pclk to cclk has overflowed",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PM_CNTR_ROLLOVER",
      ._bpos = AR_PI_ERR_CLR_IP_PM_CNTR_ROLLOVER_BP,
      ._mask = AR_PI_ERR_CLR_IP_PM_CNTR_ROLLOVER_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_PM_CNTR_ROLLOVER_MASK,
      ._index = AR_PI_ERR_CLR_IP_PM_CNTR_ROLLOVER_QW,
      ._desc = "performance monitor counter rollover",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PM_CNTR_PERR",
      ._bpos = AR_PI_ERR_CLR_IP_PM_CNTR_PERR_BP,
      ._mask = AR_PI_ERR_CLR_IP_PM_CNTR_PERR_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_PM_CNTR_PERR_MASK,
      ._index = AR_PI_ERR_CLR_IP_PM_CNTR_PERR_QW,
      ._desc = "performance monitor counter parity error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DEN_SPEED_CHANGE",
      ._bpos = AR_PI_ERR_CLR_IP_DEN_SPEED_CHANGE_BP,
      ._mask = AR_PI_ERR_CLR_IP_DEN_SPEED_CHANGE_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_DEN_SPEED_CHANGE_MASK,
      ._index = AR_PI_ERR_CLR_IP_DEN_SPEED_CHANGE_QW,
      ._desc = "The pcie had a link width change or a speed change (Gen1, 2, or 3 speed)",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DEN_INTR",
      ._bpos = AR_PI_ERR_CLR_IP_DEN_INTR_BP,
      ._mask = AR_PI_ERR_CLR_IP_DEN_INTR_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_DEN_INTR_MASK,
      ._index = AR_PI_ERR_CLR_IP_DEN_INTR_QW,
      ._desc = "Denali Core Local Interrupt",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DEN_DPA_INTR",
      ._bpos = AR_PI_ERR_CLR_IP_DEN_DPA_INTR_BP,
      ._mask = AR_PI_ERR_CLR_IP_DEN_DPA_INTR_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_DEN_DPA_INTR_MASK,
      ._index = AR_PI_ERR_CLR_IP_DEN_DPA_INTR_QW,
      ._desc = "Denali Core Dynamic Power Allocation Interrupt",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DEN_CORRECTABLE_ERROR",
      ._bpos = AR_PI_ERR_CLR_IP_DEN_CORRECTABLE_ERROR_BP,
      ._mask = AR_PI_ERR_CLR_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._index = AR_PI_ERR_CLR_IP_DEN_CORRECTABLE_ERROR_QW,
      ._desc = "Denali Core Correctable Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DEN_NON_FATAL_ERROR",
      ._bpos = AR_PI_ERR_CLR_IP_DEN_NON_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_CLR_IP_DEN_NON_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_DEN_NON_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_CLR_IP_DEN_NON_FATAL_ERROR_QW,
      ._desc = "Denali Core Non Fatal Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DEN_FATAL_ERROR",
      ._bpos = AR_PI_ERR_CLR_IP_DEN_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_CLR_IP_DEN_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_DEN_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_CLR_IP_DEN_FATAL_ERROR_QW,
      ._desc = "Denali Core Fatal Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_ERR_CLR_IP_DIAG_ONLY_BP,
      ._mask = AR_PI_ERR_CLR_IP_DIAG_ONLY_MASK,
      ._rval = AR_PI_ERR_CLR_IP_RSTDATA & AR_PI_ERR_CLR_IP_DIAG_ONLY_MASK,
      ._index = AR_PI_ERR_CLR_IP_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_err_hss_msk_ip_detail[] = {
    { ._name = "LB_RING_PCLK_UNFLOW",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_LB_RING_PCLK_UNFLOW_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_LB_RING_PCLK_UNFLOW_QW,
      ._desc = "13:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LB_RING_PCLK_OVFLOW",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_LB_RING_PCLK_OVFLOW_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_LB_RING_PCLK_OVFLOW_QW,
      ._desc = "12:12",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PM_CNTR_ROLLOVER",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_PM_CNTR_ROLLOVER_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_PM_CNTR_ROLLOVER_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_PM_CNTR_ROLLOVER_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_PM_CNTR_ROLLOVER_QW,
      ._desc = "11:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PM_CNTR_PERR",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_PM_CNTR_PERR_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_PM_CNTR_PERR_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_PM_CNTR_PERR_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_PM_CNTR_PERR_QW,
      ._desc = "10:10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_SPEED_CHANGE",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_DEN_SPEED_CHANGE_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_DEN_SPEED_CHANGE_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_DEN_SPEED_CHANGE_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_DEN_SPEED_CHANGE_QW,
      ._desc = "9:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_INTR",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_DEN_INTR_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_DEN_INTR_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_DEN_INTR_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_DEN_INTR_QW,
      ._desc = "8:8",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_DPA_INTR",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_DEN_DPA_INTR_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_DEN_DPA_INTR_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_DEN_DPA_INTR_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_DEN_DPA_INTR_QW,
      ._desc = "7:4",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_CORRECTABLE_ERROR",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_DEN_CORRECTABLE_ERROR_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_DEN_CORRECTABLE_ERROR_QW,
      ._desc = "3:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_NON_FATAL_ERROR",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_DEN_NON_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_DEN_NON_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_DEN_NON_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_DEN_NON_FATAL_ERROR_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_FATAL_ERROR",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_DEN_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_DEN_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_DEN_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_DEN_FATAL_ERROR_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_ERR_HSS_MSK_IP_DIAG_ONLY_BP,
      ._mask = AR_PI_ERR_HSS_MSK_IP_DIAG_ONLY_MASK,
      ._rval = AR_PI_ERR_HSS_MSK_IP_RSTDATA & AR_PI_ERR_HSS_MSK_IP_DIAG_ONLY_MASK,
      ._index = AR_PI_ERR_HSS_MSK_IP_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_err_os_msk_ip_detail[] = {
    { ._name = "LB_RING_PCLK_UNFLOW",
      ._bpos = AR_PI_ERR_OS_MSK_IP_LB_RING_PCLK_UNFLOW_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_LB_RING_PCLK_UNFLOW_QW,
      ._desc = "13:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LB_RING_PCLK_OVFLOW",
      ._bpos = AR_PI_ERR_OS_MSK_IP_LB_RING_PCLK_OVFLOW_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_LB_RING_PCLK_OVFLOW_QW,
      ._desc = "12:12",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PM_CNTR_ROLLOVER",
      ._bpos = AR_PI_ERR_OS_MSK_IP_PM_CNTR_ROLLOVER_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_PM_CNTR_ROLLOVER_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_PM_CNTR_ROLLOVER_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_PM_CNTR_ROLLOVER_QW,
      ._desc = "11:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PM_CNTR_PERR",
      ._bpos = AR_PI_ERR_OS_MSK_IP_PM_CNTR_PERR_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_PM_CNTR_PERR_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_PM_CNTR_PERR_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_PM_CNTR_PERR_QW,
      ._desc = "10:10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_SPEED_CHANGE",
      ._bpos = AR_PI_ERR_OS_MSK_IP_DEN_SPEED_CHANGE_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_DEN_SPEED_CHANGE_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_DEN_SPEED_CHANGE_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_DEN_SPEED_CHANGE_QW,
      ._desc = "9:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_INTR",
      ._bpos = AR_PI_ERR_OS_MSK_IP_DEN_INTR_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_DEN_INTR_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_DEN_INTR_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_DEN_INTR_QW,
      ._desc = "8:8",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_DPA_INTR",
      ._bpos = AR_PI_ERR_OS_MSK_IP_DEN_DPA_INTR_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_DEN_DPA_INTR_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_DEN_DPA_INTR_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_DEN_DPA_INTR_QW,
      ._desc = "7:4",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_CORRECTABLE_ERROR",
      ._bpos = AR_PI_ERR_OS_MSK_IP_DEN_CORRECTABLE_ERROR_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_DEN_CORRECTABLE_ERROR_QW,
      ._desc = "3:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_NON_FATAL_ERROR",
      ._bpos = AR_PI_ERR_OS_MSK_IP_DEN_NON_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_DEN_NON_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_DEN_NON_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_DEN_NON_FATAL_ERROR_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_FATAL_ERROR",
      ._bpos = AR_PI_ERR_OS_MSK_IP_DEN_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_DEN_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_DEN_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_DEN_FATAL_ERROR_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_ERR_OS_MSK_IP_DIAG_ONLY_BP,
      ._mask = AR_PI_ERR_OS_MSK_IP_DIAG_ONLY_MASK,
      ._rval = AR_PI_ERR_OS_MSK_IP_RSTDATA & AR_PI_ERR_OS_MSK_IP_DIAG_ONLY_MASK,
      ._index = AR_PI_ERR_OS_MSK_IP_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_err_first_flg_ip_detail[] = {
    { ._name = "LB_RING_PCLK_UNFLOW",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_LB_RING_PCLK_UNFLOW_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_LB_RING_PCLK_UNFLOW_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_LB_RING_PCLK_UNFLOW_QW,
      ._desc = "13:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LB_RING_PCLK_OVFLOW",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_LB_RING_PCLK_OVFLOW_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_LB_RING_PCLK_OVFLOW_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_LB_RING_PCLK_OVFLOW_QW,
      ._desc = "12:12",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PM_CNTR_ROLLOVER",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_PM_CNTR_ROLLOVER_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_PM_CNTR_ROLLOVER_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_PM_CNTR_ROLLOVER_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_PM_CNTR_ROLLOVER_QW,
      ._desc = "11:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PM_CNTR_PERR",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_PM_CNTR_PERR_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_PM_CNTR_PERR_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_PM_CNTR_PERR_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_PM_CNTR_PERR_QW,
      ._desc = "10:10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_SPEED_CHANGE",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_DEN_SPEED_CHANGE_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_DEN_SPEED_CHANGE_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_DEN_SPEED_CHANGE_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_DEN_SPEED_CHANGE_QW,
      ._desc = "9:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_INTR",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_DEN_INTR_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_DEN_INTR_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_DEN_INTR_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_DEN_INTR_QW,
      ._desc = "8:8",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_DPA_INTR",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_DEN_DPA_INTR_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_DEN_DPA_INTR_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_DEN_DPA_INTR_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_DEN_DPA_INTR_QW,
      ._desc = "7:4",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_CORRECTABLE_ERROR",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_DEN_CORRECTABLE_ERROR_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_DEN_CORRECTABLE_ERROR_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_DEN_CORRECTABLE_ERROR_QW,
      ._desc = "3:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_NON_FATAL_ERROR",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_DEN_NON_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_DEN_NON_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_DEN_NON_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_DEN_NON_FATAL_ERROR_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DEN_FATAL_ERROR",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_DEN_FATAL_ERROR_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_DEN_FATAL_ERROR_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_DEN_FATAL_ERROR_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_DEN_FATAL_ERROR_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_ERR_FIRST_FLG_IP_DIAG_ONLY_BP,
      ._mask = AR_PI_ERR_FIRST_FLG_IP_DIAG_ONLY_MASK,
      ._rval = AR_PI_ERR_FIRST_FLG_IP_RSTDATA & AR_PI_ERR_FIRST_FLG_IP_DIAG_ONLY_MASK,
      ._index = AR_PI_ERR_FIRST_FLG_IP_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_status_den_ip_detail[] = {
    { ._name = "CMU_OK_3",
      ._bpos = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_3_BP,
      ._mask = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_3_MASK,
      ._rval = AR_PI_PHY_STATUS_DEN_IP_RSTDATA & AR_PI_PHY_STATUS_DEN_IP_CMU_OK_3_MASK,
      ._index = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_3_QW,
      ._desc = "CMU OK from phy quad 3",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CMU_OK_2",
      ._bpos = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_2_BP,
      ._mask = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_2_MASK,
      ._rval = AR_PI_PHY_STATUS_DEN_IP_RSTDATA & AR_PI_PHY_STATUS_DEN_IP_CMU_OK_2_MASK,
      ._index = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_2_QW,
      ._desc = "CMU OK from phy quad 2",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CMU_OK_1",
      ._bpos = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_1_BP,
      ._mask = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_1_MASK,
      ._rval = AR_PI_PHY_STATUS_DEN_IP_RSTDATA & AR_PI_PHY_STATUS_DEN_IP_CMU_OK_1_MASK,
      ._index = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_1_QW,
      ._desc = "CMU OK from phy quad 1",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "CMU_OK_O",
      ._bpos = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_O_BP,
      ._mask = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_O_MASK,
      ._rval = AR_PI_PHY_STATUS_DEN_IP_RSTDATA & AR_PI_PHY_STATUS_DEN_IP_CMU_OK_O_MASK,
      ._index = AR_PI_PHY_STATUS_DEN_IP_CMU_OK_O_QW,
      ._desc = "CMU OK from phy quad 0",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = "PHY_STATUS_OVERRIDE_ENABLE",
      ._bpos = AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_OVERRIDE_ENABLE_BP,
      ._mask = AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_OVERRIDE_ENABLE_MASK,
      ._rval = AR_PI_PHY_STATUS_DEN_IP_RSTDATA & AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_OVERRIDE_ENABLE_MASK,
      ._index = AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_OVERRIDE_ENABLE_QW,
      ._desc = "One bit per lane",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PHY_STATUS_OVERRIDE",
      ._bpos = AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_OVERRIDE_BP,
      ._mask = AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_OVERRIDE_MASK,
      ._rval = AR_PI_PHY_STATUS_DEN_IP_RSTDATA & AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_OVERRIDE_MASK,
      ._index = AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_OVERRIDE_QW,
      ._desc = "One bit per lane",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PHY_STATUS_SAMPLE",
      ._bpos = AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_SAMPLE_BP,
      ._mask = AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_SAMPLE_MASK,
      ._rval = AR_PI_PHY_STATUS_DEN_IP_RSTDATA & AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_SAMPLE_MASK,
      ._index = AR_PI_PHY_STATUS_DEN_IP_PHY_STATUS_SAMPLE_QW,
      ._desc = "One bit per lane",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_den_ip_detail[] = {
    { ._name = "MAX_ADAPT_CYCLES",
      ._bpos = AR_PI_PHY_EQUAL_DEN_IP_MAX_ADAPT_CYCLES_BP,
      ._mask = AR_PI_PHY_EQUAL_DEN_IP_MAX_ADAPT_CYCLES_MASK,
      ._rval = AR_PI_PHY_EQUAL_DEN_IP_RSTDATA & AR_PI_PHY_EQUAL_DEN_IP_MAX_ADAPT_CYCLES_MASK,
      ._index = AR_PI_PHY_EQUAL_DEN_IP_MAX_ADAPT_CYCLES_QW,
      ._desc = "Maximum adaptation cycles",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "MIN_ADAPT_CYCLES",
      ._bpos = AR_PI_PHY_EQUAL_DEN_IP_MIN_ADAPT_CYCLES_BP,
      ._mask = AR_PI_PHY_EQUAL_DEN_IP_MIN_ADAPT_CYCLES_MASK,
      ._rval = AR_PI_PHY_EQUAL_DEN_IP_RSTDATA & AR_PI_PHY_EQUAL_DEN_IP_MIN_ADAPT_CYCLES_MASK,
      ._index = AR_PI_PHY_EQUAL_DEN_IP_MIN_ADAPT_CYCLES_QW,
      ._desc = "Minimum adaptaion cycles",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "MAX_DELTA",
      ._bpos = AR_PI_PHY_EQUAL_DEN_IP_MAX_DELTA_BP,
      ._mask = AR_PI_PHY_EQUAL_DEN_IP_MAX_DELTA_MASK,
      ._rval = AR_PI_PHY_EQUAL_DEN_IP_RSTDATA & AR_PI_PHY_EQUAL_DEN_IP_MAX_DELTA_MASK,
      ._index = AR_PI_PHY_EQUAL_DEN_IP_MAX_DELTA_QW,
      ._desc = "maximum delta",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "LINK_EQ_LF",
      ._bpos = AR_PI_PHY_EQUAL_DEN_IP_LINK_EQ_LF_BP,
      ._mask = AR_PI_PHY_EQUAL_DEN_IP_LINK_EQ_LF_MASK,
      ._rval = AR_PI_PHY_EQUAL_DEN_IP_RSTDATA & AR_PI_PHY_EQUAL_DEN_IP_LINK_EQ_LF_MASK,
      ._index = AR_PI_PHY_EQUAL_DEN_IP_LINK_EQ_LF_QW,
      ._desc = "This input must be set to the Low Frequency (FS) parameter value to be advertised by the core in its TS1 ordered sets during Phase 1 of the link equalization procedure",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "LINK_EQ_FS",
      ._bpos = AR_PI_PHY_EQUAL_DEN_IP_LINK_EQ_FS_BP,
      ._mask = AR_PI_PHY_EQUAL_DEN_IP_LINK_EQ_FS_MASK,
      ._rval = AR_PI_PHY_EQUAL_DEN_IP_RSTDATA & AR_PI_PHY_EQUAL_DEN_IP_LINK_EQ_FS_MASK,
      ._index = AR_PI_PHY_EQUAL_DEN_IP_LINK_EQ_FS_QW,
      ._desc = "This input must be set to the Full Swing (FS) parameter value to be advertised by the core in its TS1 ordered sets during Phase 1 of the linkequalization procedure",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_0_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_0_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_0_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_0_RSTDATA & AR_PI_PHY_EQUAL_COEFF_0_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_0_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_0_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_0_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_0_RSTDATA & AR_PI_PHY_EQUAL_COEFF_0_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_0_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_0_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_0_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_0_RSTDATA & AR_PI_PHY_EQUAL_COEFF_0_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_0_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_1_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_1_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_1_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_1_RSTDATA & AR_PI_PHY_EQUAL_COEFF_1_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_1_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_1_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_1_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_1_RSTDATA & AR_PI_PHY_EQUAL_COEFF_1_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_1_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_1_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_1_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_1_RSTDATA & AR_PI_PHY_EQUAL_COEFF_1_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_1_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_2_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_2_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_2_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_2_RSTDATA & AR_PI_PHY_EQUAL_COEFF_2_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_2_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_2_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_2_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_2_RSTDATA & AR_PI_PHY_EQUAL_COEFF_2_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_2_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_2_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_2_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_2_RSTDATA & AR_PI_PHY_EQUAL_COEFF_2_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_2_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_3_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_3_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_3_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_3_RSTDATA & AR_PI_PHY_EQUAL_COEFF_3_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_3_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_3_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_3_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_3_RSTDATA & AR_PI_PHY_EQUAL_COEFF_3_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_3_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_3_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_3_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_3_RSTDATA & AR_PI_PHY_EQUAL_COEFF_3_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_3_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_4_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_4_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_4_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_4_RSTDATA & AR_PI_PHY_EQUAL_COEFF_4_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_4_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_4_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_4_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_4_RSTDATA & AR_PI_PHY_EQUAL_COEFF_4_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_4_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_4_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_4_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_4_RSTDATA & AR_PI_PHY_EQUAL_COEFF_4_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_4_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_5_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_5_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_5_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_5_RSTDATA & AR_PI_PHY_EQUAL_COEFF_5_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_5_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_5_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_5_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_5_RSTDATA & AR_PI_PHY_EQUAL_COEFF_5_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_5_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_5_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_5_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_5_RSTDATA & AR_PI_PHY_EQUAL_COEFF_5_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_5_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_6_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_6_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_6_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_6_RSTDATA & AR_PI_PHY_EQUAL_COEFF_6_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_6_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_6_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_6_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_6_RSTDATA & AR_PI_PHY_EQUAL_COEFF_6_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_6_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_6_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_6_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_6_RSTDATA & AR_PI_PHY_EQUAL_COEFF_6_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_6_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_7_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_7_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_7_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_7_RSTDATA & AR_PI_PHY_EQUAL_COEFF_7_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_7_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_7_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_7_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_7_RSTDATA & AR_PI_PHY_EQUAL_COEFF_7_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_7_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_7_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_7_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_7_RSTDATA & AR_PI_PHY_EQUAL_COEFF_7_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_7_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_8_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_8_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_8_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_8_RSTDATA & AR_PI_PHY_EQUAL_COEFF_8_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_8_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_8_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_8_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_8_RSTDATA & AR_PI_PHY_EQUAL_COEFF_8_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_8_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_8_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_8_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_8_RSTDATA & AR_PI_PHY_EQUAL_COEFF_8_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_8_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_9_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_9_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_9_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_9_RSTDATA & AR_PI_PHY_EQUAL_COEFF_9_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_9_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_9_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_9_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_9_RSTDATA & AR_PI_PHY_EQUAL_COEFF_9_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_9_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_9_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_9_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_9_RSTDATA & AR_PI_PHY_EQUAL_COEFF_9_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_9_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_equal_coeff_10_detail[] = {
    { ._name = "CP1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_10_CP1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_10_CP1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_10_RSTDATA & AR_PI_PHY_EQUAL_COEFF_10_CP1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_10_CP1_QW,
      ._desc = "Post cursor coeeficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "C0",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_10_C0_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_10_C0_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_10_RSTDATA & AR_PI_PHY_EQUAL_COEFF_10_C0_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_10_C0_QW,
      ._desc = "Cursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CM1",
      ._bpos = AR_PI_PHY_EQUAL_COEFF_10_CM1_BP,
      ._mask = AR_PI_PHY_EQUAL_COEFF_10_CM1_MASK,
      ._rval = AR_PI_PHY_EQUAL_COEFF_10_RSTDATA & AR_PI_PHY_EQUAL_COEFF_10_CM1_MASK,
      ._index = AR_PI_PHY_EQUAL_COEFF_10_CM1_QW,
      ._desc = "Precursor coefficient",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_pclk_cfg_detail[] = {
    { ._name = "PRF_PRSP_HAL_BLKD_EN",
      ._bpos = AR_PI_PMI_PCLK_CFG_PRF_PRSP_HAL_BLKD_EN_BP,
      ._mask = AR_PI_PMI_PCLK_CFG_PRF_PRSP_HAL_BLKD_EN_MASK,
      ._rval = AR_PI_PMI_PCLK_CFG_RSTDATA & AR_PI_PMI_PCLK_CFG_PRF_PRSP_HAL_BLKD_EN_MASK,
      ._index = AR_PI_PMI_PCLK_CFG_PRF_PRSP_HAL_BLKD_EN_QW,
      ._desc = "Enable for PRsp HAL Blocked Performance counter",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PRF_PREQ_BLKD_EN",
      ._bpos = AR_PI_PMI_PCLK_CFG_PRF_PREQ_BLKD_EN_BP,
      ._mask = AR_PI_PMI_PCLK_CFG_PRF_PREQ_BLKD_EN_MASK,
      ._rval = AR_PI_PMI_PCLK_CFG_RSTDATA & AR_PI_PMI_PCLK_CFG_PRF_PREQ_BLKD_EN_MASK,
      ._index = AR_PI_PMI_PCLK_CFG_PRF_PREQ_BLKD_EN_QW,
      ._desc = "Enable for PReq Request Blocked Performance counter",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PRF_PREQ_PTC_BLKD_EN",
      ._bpos = AR_PI_PMI_PCLK_CFG_PRF_PREQ_PTC_BLKD_EN_BP,
      ._mask = AR_PI_PMI_PCLK_CFG_PRF_PREQ_PTC_BLKD_EN_MASK,
      ._rval = AR_PI_PMI_PCLK_CFG_RSTDATA & AR_PI_PMI_PCLK_CFG_PRF_PREQ_PTC_BLKD_EN_MASK,
      ._index = AR_PI_PMI_PCLK_CFG_PRF_PREQ_PTC_BLKD_EN_QW,
      ._desc = "Enable for PReq PTC Buffer Blocked Performance counter",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PM_SELECT",
      ._bpos = AR_PI_PMI_PCLK_CFG_PM_SELECT_BP,
      ._mask = AR_PI_PMI_PCLK_CFG_PM_SELECT_MASK,
      ._rval = AR_PI_PMI_PCLK_CFG_RSTDATA & AR_PI_PMI_PCLK_CFG_PM_SELECT_MASK,
      ._index = AR_PI_PMI_PCLK_CFG_PM_SELECT_QW,
      ._desc = "Performance Monitor Select: Determines all/part of what is counted by Performance Monitors",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PNP_ARB_ENA",
      ._bpos = AR_PI_PMI_PCLK_CFG_PNP_ARB_ENA_BP,
      ._mask = AR_PI_PMI_PCLK_CFG_PNP_ARB_ENA_MASK,
      ._rval = AR_PI_PMI_PCLK_CFG_RSTDATA & AR_PI_PMI_PCLK_CFG_PNP_ARB_ENA_MASK,
      ._index = AR_PI_PMI_PCLK_CFG_PNP_ARB_ENA_QW,
      ._desc = "Posted/Non-Posted request Arbitration Enable in PReq buffer",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "PRSP_FC_THRESH",
      ._bpos = AR_PI_PMI_PCLK_CFG_PRSP_FC_THRESH_BP,
      ._mask = AR_PI_PMI_PCLK_CFG_PRSP_FC_THRESH_MASK,
      ._rval = AR_PI_PMI_PCLK_CFG_RSTDATA & AR_PI_PMI_PCLK_CFG_PRSP_FC_THRESH_MASK,
      ._index = AR_PI_PMI_PCLK_CFG_PRSP_FC_THRESH_QW,
      ._desc = "PCIe Response Buffer Flow Control Threshold",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_dbg_errinj_preq_detail[] = {
    { ._name = "CHECKBITS_UP",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PREQ_CHECKBITS_UP_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PREQ_CHECKBITS_UP_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PREQ_CHECKBITS_UP_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PREQ_CHECKBITS_UP_QW,
      ._desc = "When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome for the PRSP buffer completion response bits 295:49 to be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CHECKBITS_LO",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PREQ_CHECKBITS_LO_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PREQ_CHECKBITS_LO_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PREQ_CHECKBITS_LO_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PREQ_CHECKBITS_LO_QW,
      ._desc = "When an error is injected, each bit that is set to one in this field causes the corresponding bit of the error detection syndrome for the PRSP buffer completion response bits 48:0 to be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TRIGGERED",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PREQ_TRIGGERED_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PREQ_TRIGGERED_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PREQ_TRIGGERED_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PREQ_TRIGGERED_QW,
      ._desc = "This status bit should be clear when the MMR is written by software",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "COUNT",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PREQ_COUNT_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PREQ_COUNT_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PREQ_COUNT_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PREQ_COUNT_QW,
      ._desc = "Flit in which to inject the error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "MODE",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PREQ_MODE_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PREQ_MODE_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PREQ_MODE_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PREQ_MODE_QW,
      ._desc = "Mode 0: Inject error in the flit specified by COUNT in one packet",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE2",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE2_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE2_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE2_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE2_QW,
      ._desc = "Enable error injection",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE1",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE1_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE1_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE1_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE1_QW,
      ._desc = "Enable error injectionfor PREQ FIFO1 data out",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE0",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE0_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE0_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE0_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PREQ_ENABLE0_QW,
      ._desc = "Enable error injection for PREQ FIFO0 data out",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_dbg_errinj_prsp_hal_detail[] = {
    { ._name = "PARITY",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_PARITY_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_PARITY_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_PARITY_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_PARITY_QW,
      ._desc = "When an error is injected, each bit that is set to one in this field causes the corresponding bit of the parity in the header to be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TRIGGERED",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_TRIGGERED_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_TRIGGERED_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_TRIGGERED_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_TRIGGERED_QW,
      ._desc = "This status bit should be clear when the MMR is written by software",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "COUNT",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_COUNT_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_COUNT_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_COUNT_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_COUNT_QW,
      ._desc = "Flit in which to inject the error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "MODE",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_MODE_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_MODE_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_MODE_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_MODE_QW,
      ._desc = "Mode 0: Inject error in the flit specified by COUNT in one packet",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE",
      ._bpos = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_ENABLE_BP,
      ._mask = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_ENABLE_MASK,
      ._rval = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_RSTDATA & AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_ENABLE_MASK,
      ._index = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_ENABLE_QW,
      ._desc = "Enable error injection",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_fifo2_err_flg_detail[] = {
    { ._name = "PREQ2_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_TBE_QW,
      ._desc = "PReq Buffer 2 Tail Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ1_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_TBE_QW,
      ._desc = "PReq Buffer 1 Tail Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ0_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_TBE_QW,
      ._desc = "PReq Buffer 0 Tail Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PRSP_OVFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PRSP_OVFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PRSP_OVFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PRSP_OVFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PRSP_OVFLOW_QW,
      ._desc = "PRsp Buffer Overflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ2_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_UNFLOW_QW,
      ._desc = "PReq Buffer 2 Underflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ1_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_UNFLOW_QW,
      ._desc = "PReq Buffer 1 Underflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ0_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_UNFLOW_QW,
      ._desc = "PReq Buffer 0 Underflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ2_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_SBE_QW,
      ._desc = "PReq Buffer2 Single-Bit Error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ1_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_SBE_QW,
      ._desc = "PReq Buffer1 Single-Bit Error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ0_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_SBE_QW,
      ._desc = "PReq Buffer0 Single-Bit Error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ2_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ2_MBE_QW,
      ._desc = "PReq Buffer2 Multi-Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ1_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ1_MBE_QW,
      ._desc = "PReq Buffer1 Multi-Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "PREQ0_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_PREQ0_MBE_QW,
      ._desc = "PReq Buffer0 Multi-Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FLG_DIAG_ONLY_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FLG_DIAG_ONLY_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FLG_DIAG_ONLY_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FLG_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000100001ull,
      ._access = "RW1,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_fifo2_err_clr_detail[] = {
    { ._name = "PREQ2_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_TBE_QW,
      ._desc = "PReq Buffer 2 Tail Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ1_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_TBE_QW,
      ._desc = "PReq Buffer 1 Tail Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ0_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_TBE_QW,
      ._desc = "PReq Buffer 0 Tail Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PRSP_OVFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PRSP_OVFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PRSP_OVFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PRSP_OVFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PRSP_OVFLOW_QW,
      ._desc = "PRsp Buffer Overflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ2_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_UNFLOW_QW,
      ._desc = "PReq Buffer 2 Underflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ1_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_UNFLOW_QW,
      ._desc = "PReq Buffer 1 Underflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ0_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_UNFLOW_QW,
      ._desc = "PReq Buffer 0 Underflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ2_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_SBE_QW,
      ._desc = "PReq Buffer2 Single-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ1_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_SBE_QW,
      ._desc = "PReq Buffer1 Single-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ0_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_SBE_QW,
      ._desc = "PReq Buffer0 Single-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ2_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ2_MBE_QW,
      ._desc = "PReq Buffer2 Multi-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ1_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ1_MBE_QW,
      ._desc = "PReq Buffer1 Multi-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "PREQ0_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_PREQ0_MBE_QW,
      ._desc = "PReq Buffer0 Multi-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PMI_FIFO2_ERR_CLR_DIAG_ONLY_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_CLR_DIAG_ONLY_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA & AR_PI_PMI_FIFO2_ERR_CLR_DIAG_ONLY_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_CLR_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_fifo2_err_hss_msk_detail[] = {
    { ._name = "PREQ2_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_TBE_QW,
      ._desc = "19:19",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_TBE_QW,
      ._desc = "18:18",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_TBE_QW,
      ._desc = "17:17",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PRSP_OVFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PRSP_OVFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PRSP_OVFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PRSP_OVFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PRSP_OVFLOW_QW,
      ._desc = "16:16",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ2_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_UNFLOW_QW,
      ._desc = "15:15",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_UNFLOW_QW,
      ._desc = "14:14",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_UNFLOW_QW,
      ._desc = "13:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ2_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_SBE_QW,
      ._desc = "12:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_SBE_QW,
      ._desc = "10:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_SBE_QW,
      ._desc = "8:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ2_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ2_MBE_QW,
      ._desc = "6:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ1_MBE_QW,
      ._desc = "4:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_PREQ0_MBE_QW,
      ._desc = "2:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PMI_FIFO2_ERR_HSS_MSK_DIAG_ONLY_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_HSS_MSK_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_fifo2_err_os_msk_detail[] = {
    { ._name = "PREQ2_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_TBE_QW,
      ._desc = "19:19",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_TBE_QW,
      ._desc = "18:18",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_TBE_QW,
      ._desc = "17:17",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PRSP_OVFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PRSP_OVFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PRSP_OVFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PRSP_OVFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PRSP_OVFLOW_QW,
      ._desc = "16:16",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ2_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_UNFLOW_QW,
      ._desc = "15:15",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_UNFLOW_QW,
      ._desc = "14:14",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_UNFLOW_QW,
      ._desc = "13:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ2_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_SBE_QW,
      ._desc = "12:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_SBE_QW,
      ._desc = "10:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_SBE_QW,
      ._desc = "8:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ2_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ2_MBE_QW,
      ._desc = "6:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ1_MBE_QW,
      ._desc = "4:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_PREQ0_MBE_QW,
      ._desc = "2:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PMI_FIFO2_ERR_OS_MSK_DIAG_ONLY_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_OS_MSK_DIAG_ONLY_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA & AR_PI_PMI_FIFO2_ERR_OS_MSK_DIAG_ONLY_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_OS_MSK_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_fifo2_err_first_flg_detail[] = {
    { ._name = "PREQ2_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_TBE_QW,
      ._desc = "19:19",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_TBE_QW,
      ._desc = "18:18",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_TBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_TBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_TBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_TBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_TBE_QW,
      ._desc = "17:17",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PRSP_OVFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PRSP_OVFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PRSP_OVFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PRSP_OVFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PRSP_OVFLOW_QW,
      ._desc = "16:16",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ2_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_UNFLOW_QW,
      ._desc = "15:15",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_UNFLOW_QW,
      ._desc = "14:14",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_UNFLOW",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_UNFLOW_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_UNFLOW_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_UNFLOW_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_UNFLOW_QW,
      ._desc = "13:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ2_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_SBE_QW,
      ._desc = "12:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_SBE_QW,
      ._desc = "10:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_SBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_SBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_SBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_SBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_SBE_QW,
      ._desc = "8:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ2_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ2_MBE_QW,
      ._desc = "6:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ1_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ1_MBE_QW,
      ._desc = "4:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "PREQ0_MBE",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_MBE_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_MBE_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_MBE_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_PREQ0_MBE_QW,
      ._desc = "2:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_DIAG_ONLY_BP,
      ._mask = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._rval = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA & AR_PI_PMI_FIFO2_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._index = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_mbe_err_info2_detail[] = {
    { ._name = "PREQ2_SYND1",
      ._bpos = AR_PI_PMI_MBE_ERR_INFO2_PREQ2_SYND1_BP,
      ._mask = AR_PI_PMI_MBE_ERR_INFO2_PREQ2_SYND1_MASK,
      ._rval = AR_PI_PMI_MBE_ERR_INFO2_RSTDATA & AR_PI_PMI_MBE_ERR_INFO2_PREQ2_SYND1_MASK,
      ._index = AR_PI_PMI_MBE_ERR_INFO2_PREQ2_SYND1_QW,
      ._desc = "PReq2 Buffer Data Syndrome1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ2_SYND0",
      ._bpos = AR_PI_PMI_MBE_ERR_INFO2_PREQ2_SYND0_BP,
      ._mask = AR_PI_PMI_MBE_ERR_INFO2_PREQ2_SYND0_MASK,
      ._rval = AR_PI_PMI_MBE_ERR_INFO2_RSTDATA & AR_PI_PMI_MBE_ERR_INFO2_PREQ2_SYND0_MASK,
      ._index = AR_PI_PMI_MBE_ERR_INFO2_PREQ2_SYND0_QW,
      ._desc = "PReq2 Buffer Data Syndrome0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ1_SYND1",
      ._bpos = AR_PI_PMI_MBE_ERR_INFO2_PREQ1_SYND1_BP,
      ._mask = AR_PI_PMI_MBE_ERR_INFO2_PREQ1_SYND1_MASK,
      ._rval = AR_PI_PMI_MBE_ERR_INFO2_RSTDATA & AR_PI_PMI_MBE_ERR_INFO2_PREQ1_SYND1_MASK,
      ._index = AR_PI_PMI_MBE_ERR_INFO2_PREQ1_SYND1_QW,
      ._desc = "PReq1 Buffer Data Syndrome1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ1_SYND0",
      ._bpos = AR_PI_PMI_MBE_ERR_INFO2_PREQ1_SYND0_BP,
      ._mask = AR_PI_PMI_MBE_ERR_INFO2_PREQ1_SYND0_MASK,
      ._rval = AR_PI_PMI_MBE_ERR_INFO2_RSTDATA & AR_PI_PMI_MBE_ERR_INFO2_PREQ1_SYND0_MASK,
      ._index = AR_PI_PMI_MBE_ERR_INFO2_PREQ1_SYND0_QW,
      ._desc = "PReq1 Buffer Data Syndrome0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ0_SYND1",
      ._bpos = AR_PI_PMI_MBE_ERR_INFO2_PREQ0_SYND1_BP,
      ._mask = AR_PI_PMI_MBE_ERR_INFO2_PREQ0_SYND1_MASK,
      ._rval = AR_PI_PMI_MBE_ERR_INFO2_RSTDATA & AR_PI_PMI_MBE_ERR_INFO2_PREQ0_SYND1_MASK,
      ._index = AR_PI_PMI_MBE_ERR_INFO2_PREQ0_SYND1_QW,
      ._desc = "PReq0 Buffer Data Syndrome1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ0_SYND0",
      ._bpos = AR_PI_PMI_MBE_ERR_INFO2_PREQ0_SYND0_BP,
      ._mask = AR_PI_PMI_MBE_ERR_INFO2_PREQ0_SYND0_MASK,
      ._rval = AR_PI_PMI_MBE_ERR_INFO2_RSTDATA & AR_PI_PMI_MBE_ERR_INFO2_PREQ0_SYND0_MASK,
      ._index = AR_PI_PMI_MBE_ERR_INFO2_PREQ0_SYND0_QW,
      ._desc = "PReq0 Buffer Data Syndrome0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_sbe_err_info2_detail[] = {
    { ._name = "PREQ2_SYND1",
      ._bpos = AR_PI_PMI_SBE_ERR_INFO2_PREQ2_SYND1_BP,
      ._mask = AR_PI_PMI_SBE_ERR_INFO2_PREQ2_SYND1_MASK,
      ._rval = AR_PI_PMI_SBE_ERR_INFO2_RSTDATA & AR_PI_PMI_SBE_ERR_INFO2_PREQ2_SYND1_MASK,
      ._index = AR_PI_PMI_SBE_ERR_INFO2_PREQ2_SYND1_QW,
      ._desc = "PReq2 Buffer Data Syndrome1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ2_SYND0",
      ._bpos = AR_PI_PMI_SBE_ERR_INFO2_PREQ2_SYND0_BP,
      ._mask = AR_PI_PMI_SBE_ERR_INFO2_PREQ2_SYND0_MASK,
      ._rval = AR_PI_PMI_SBE_ERR_INFO2_RSTDATA & AR_PI_PMI_SBE_ERR_INFO2_PREQ2_SYND0_MASK,
      ._index = AR_PI_PMI_SBE_ERR_INFO2_PREQ2_SYND0_QW,
      ._desc = "PReq2 Buffer Data Syndrome0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ1_SYND1",
      ._bpos = AR_PI_PMI_SBE_ERR_INFO2_PREQ1_SYND1_BP,
      ._mask = AR_PI_PMI_SBE_ERR_INFO2_PREQ1_SYND1_MASK,
      ._rval = AR_PI_PMI_SBE_ERR_INFO2_RSTDATA & AR_PI_PMI_SBE_ERR_INFO2_PREQ1_SYND1_MASK,
      ._index = AR_PI_PMI_SBE_ERR_INFO2_PREQ1_SYND1_QW,
      ._desc = "PReq1 Buffer Data Syndrome1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ1_SYND0",
      ._bpos = AR_PI_PMI_SBE_ERR_INFO2_PREQ1_SYND0_BP,
      ._mask = AR_PI_PMI_SBE_ERR_INFO2_PREQ1_SYND0_MASK,
      ._rval = AR_PI_PMI_SBE_ERR_INFO2_RSTDATA & AR_PI_PMI_SBE_ERR_INFO2_PREQ1_SYND0_MASK,
      ._index = AR_PI_PMI_SBE_ERR_INFO2_PREQ1_SYND0_QW,
      ._desc = "PReq1 Buffer Data Syndrome0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ0_SYND1",
      ._bpos = AR_PI_PMI_SBE_ERR_INFO2_PREQ0_SYND1_BP,
      ._mask = AR_PI_PMI_SBE_ERR_INFO2_PREQ0_SYND1_MASK,
      ._rval = AR_PI_PMI_SBE_ERR_INFO2_RSTDATA & AR_PI_PMI_SBE_ERR_INFO2_PREQ0_SYND1_MASK,
      ._index = AR_PI_PMI_SBE_ERR_INFO2_PREQ0_SYND1_QW,
      ._desc = "PReq0 Buffer Data Syndrome1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "PREQ0_SYND0",
      ._bpos = AR_PI_PMI_SBE_ERR_INFO2_PREQ0_SYND0_BP,
      ._mask = AR_PI_PMI_SBE_ERR_INFO2_PREQ0_SYND0_MASK,
      ._rval = AR_PI_PMI_SBE_ERR_INFO2_RSTDATA & AR_PI_PMI_SBE_ERR_INFO2_PREQ0_SYND0_MASK,
      ._index = AR_PI_PMI_SBE_ERR_INFO2_PREQ0_SYND0_QW,
      ._desc = "PReq0 Buffer Data Syndrome0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_preq_ptc0_stall_duration_detail[] = {
    { ._name = "MAX",
      ._bpos = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_MAX_BP,
      ._mask = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_MAX_MASK,
      ._rval = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_RSTDATA & AR_PI_PMI_PREQ_PTC0_STALL_DURATION_MAX_MASK,
      ._index = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_MAX_QW,
      ._desc = "Maximum duration of stall",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RWS"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_preq_ptc1_stall_duration_detail[] = {
    { ._name = "MAX",
      ._bpos = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_MAX_BP,
      ._mask = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_MAX_MASK,
      ._rval = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_RSTDATA & AR_PI_PMI_PREQ_PTC1_STALL_DURATION_MAX_MASK,
      ._index = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_MAX_QW,
      ._desc = "Maximum duration of stall",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RWS"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_preq_ptc2_stall_duration_detail[] = {
    { ._name = "MAX",
      ._bpos = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_MAX_BP,
      ._mask = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_MAX_MASK,
      ._rval = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_RSTDATA & AR_PI_PMI_PREQ_PTC2_STALL_DURATION_MAX_MASK,
      ._index = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_MAX_QW,
      ._desc = "Maximum duration of stall",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RWS"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_preq_hal_stall_duration_detail[] = {
    { ._name = "MAX",
      ._bpos = AR_PI_PMI_PREQ_HAL_STALL_DURATION_MAX_BP,
      ._mask = AR_PI_PMI_PREQ_HAL_STALL_DURATION_MAX_MASK,
      ._rval = AR_PI_PMI_PREQ_HAL_STALL_DURATION_RSTDATA & AR_PI_PMI_PREQ_HAL_STALL_DURATION_MAX_MASK,
      ._index = AR_PI_PMI_PREQ_HAL_STALL_DURATION_MAX_QW,
      ._desc = "Maximum duration of stall",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RWS"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pmi_prsp_hal_stall_duration_detail[] = {
    { ._name = "MAX",
      ._bpos = AR_PI_PMI_PRSP_HAL_STALL_DURATION_MAX_BP,
      ._mask = AR_PI_PMI_PRSP_HAL_STALL_DURATION_MAX_MASK,
      ._rval = AR_PI_PMI_PRSP_HAL_STALL_DURATION_RSTDATA & AR_PI_PMI_PRSP_HAL_STALL_DURATION_MAX_MASK,
      ._index = AR_PI_PMI_PRSP_HAL_STALL_DURATION_MAX_QW,
      ._desc = "Maximum duration of stall",
      ._type_bitmsk = 0x0000000000000008ull,
      ._access = "RWS"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_cfg_detail[] = {
    { ._name = "MSIX_TPH_ENABLE",
      ._bpos = AR_PI_PII_PCLK_CFG_MSIX_TPH_ENABLE_BP,
      ._mask = AR_PI_PII_PCLK_CFG_MSIX_TPH_ENABLE_MASK,
      ._rval = AR_PI_PII_PCLK_CFG_RSTDATA & AR_PI_PII_PCLK_CFG_MSIX_TPH_ENABLE_MASK,
      ._index = AR_PI_PII_PCLK_CFG_MSIX_TPH_ENABLE_QW,
      ._desc = "MSI-X Transaction Processing Hint EnableSetting this bit to 1 allows Transaction Processing Hints associated with each MSI-X entry to be sent in the TPH sideband",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_dbg_errinj_fifo_detail[] = {
    { ._name = "ECC1",
      ._bpos = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_ECC1_BP,
      ._mask = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_ECC1_MASK,
      ._rval = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_ECC1_MASK,
      ._index = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_ECC1_QW,
      ._desc = "When an error is injected on a flit, this field indicates which bits of ECC1 should be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ECC0",
      ._bpos = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_ECC0_BP,
      ._mask = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_ECC0_MASK,
      ._rval = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_ECC0_MASK,
      ._index = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_ECC0_QW,
      ._desc = "When an error is injected on a flit, this field indicates which bits of ECC0 should be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TRIGGERED",
      ._bpos = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_TRIGGERED_BP,
      ._mask = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_TRIGGERED_MASK,
      ._rval = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_TRIGGERED_MASK,
      ._index = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_TRIGGERED_QW,
      ._desc = "Error has been injected",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "SELECT",
      ._bpos = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_SELECT_BP,
      ._mask = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_SELECT_MASK,
      ._rval = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_SELECT_MASK,
      ._index = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_SELECT_QW,
      ._desc = "SELECT=00: Function 0SELECT=01: Function 1SELECT=10: Function 2SELECT=11: Function 3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "COUNT",
      ._bpos = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_COUNT_BP,
      ._mask = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_COUNT_MASK,
      ._rval = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_COUNT_MASK,
      ._index = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_COUNT_QW,
      ._desc = "Indicates the spacing between flits with errors injected",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "MODE",
      ._bpos = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_MODE_BP,
      ._mask = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_MODE_MASK,
      ._rval = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_MODE_MASK,
      ._index = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_MODE_QW,
      ._desc = "0: Inject error once1: Inject error continuously",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "EN",
      ._bpos = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_EN_BP,
      ._mask = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_EN_MASK,
      ._rval = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_EN_MASK,
      ._index = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_EN_QW,
      ._desc = "Enable error injection",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_err_flg_detail[] = {
    { ._name = "IRQ_SYNC_FIFO_OV",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_IRQ_SYNC_FIFO_OV_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_IRQ_SYNC_FIFO_OV_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_IRQ_SYNC_FIFO_OV_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_IRQ_SYNC_FIFO_OV_QW,
      ._desc = "IRQ Sync FIFO Overflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F3_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_MSG_FIFO_UN_QW,
      ._desc = "Function 3 MSI-X Message FIFO Underflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F2_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_MSG_FIFO_UN_QW,
      ._desc = "Function 2 MSI-X Message FIFO Underflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F1_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_MSG_FIFO_UN_QW,
      ._desc = "Function 1 MSI-X Message FIFO Underflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F0_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_MSG_FIFO_UN_QW,
      ._desc = "Function 0 MSI-X Message FIFO Underflow",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F3_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_FIFO_SBE_QW,
      ._desc = "Function 3 MSI-X FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F3_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F3_MSIX_FIFO_MBE_QW,
      ._desc = "Function 3 MSI-X FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F2_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_FIFO_SBE_QW,
      ._desc = "Function 2 MSI-X FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F2_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F2_MSIX_FIFO_MBE_QW,
      ._desc = "Function 2 MSI-X FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F1_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_FIFO_SBE_QW,
      ._desc = "Function 1 MSI-X FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F1_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F1_MSIX_FIFO_MBE_QW,
      ._desc = "Function 1 MSI-X FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F0_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_FIFO_SBE_QW,
      ._desc = "Function 0 MSI-X FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "F0_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_F0_MSIX_FIFO_MBE_QW,
      ._desc = "Function 0 MSI-X FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "MSG_ABORTED",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_MSG_ABORTED_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_MSG_ABORTED_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_MSG_ABORTED_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_MSG_ABORTED_QW,
      ._desc = "The HAL aborted an interrupt message",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "MSG_DISCARD",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_MSG_DISCARD_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_MSG_DISCARD_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_MSG_DISCARD_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_MSG_DISCARD_QW,
      ._desc = "An interrupt message was discarded in the msix_mux due to an MBE error from one of the FIFOs",
      ._type_bitmsk = 0x0000000000080001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PII_PCLK_ERR_FLG_DIAG_ONLY_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FLG_DIAG_ONLY_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FLG_DIAG_ONLY_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FLG_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000100001ull,
      ._access = "RW1,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_err_clr_detail[] = {
    { ._name = "IRQ_SYNC_FIFO_OV",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_IRQ_SYNC_FIFO_OV_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_IRQ_SYNC_FIFO_OV_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_IRQ_SYNC_FIFO_OV_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_IRQ_SYNC_FIFO_OV_QW,
      ._desc = "IRQ Sync FIFO Overflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F3_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_MSG_FIFO_UN_QW,
      ._desc = "Function 3 MSI-X Message FIFO Underflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F2_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_MSG_FIFO_UN_QW,
      ._desc = "Function 2 MSI-X Message FIFO Underflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F1_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_MSG_FIFO_UN_QW,
      ._desc = "Function 1 MSI-X Message FIFO Underflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F0_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_MSG_FIFO_UN_QW,
      ._desc = "Function 0 MSI-X Message FIFO Underflow",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F3_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_FIFO_SBE_QW,
      ._desc = "Function 3 MSI-X FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F3_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F3_MSIX_FIFO_MBE_QW,
      ._desc = "Function 3 MSI-X FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F2_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_FIFO_SBE_QW,
      ._desc = "Function 2 MSI-X FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F2_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F2_MSIX_FIFO_MBE_QW,
      ._desc = "Function 2 MSI-X FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F1_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_FIFO_SBE_QW,
      ._desc = "Function 1 MSI-X FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F1_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F1_MSIX_FIFO_MBE_QW,
      ._desc = "Function 1 MSI-X FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F0_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_FIFO_SBE_QW,
      ._desc = "Function 0 MSI-X FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "F0_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_F0_MSIX_FIFO_MBE_QW,
      ._desc = "Function 0 MSI-X FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "MSG_ABORTED",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_MSG_ABORTED_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_MSG_ABORTED_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_MSG_ABORTED_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_MSG_ABORTED_QW,
      ._desc = "The HAL aborted an interrupt message",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "MSG_DISCARD",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_MSG_DISCARD_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_MSG_DISCARD_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_MSG_DISCARD_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_MSG_DISCARD_QW,
      ._desc = "An interrupt message was discarded in the msix_mux due to an MBE error from one of the FIFOs",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PII_PCLK_ERR_CLR_DIAG_ONLY_BP,
      ._mask = AR_PI_PII_PCLK_ERR_CLR_DIAG_ONLY_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_CLR_RSTDATA & AR_PI_PII_PCLK_ERR_CLR_DIAG_ONLY_MASK,
      ._index = AR_PI_PII_PCLK_ERR_CLR_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_err_hss_msk_detail[] = {
    { ._name = "IRQ_SYNC_FIFO_OV",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_IRQ_SYNC_FIFO_OV_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_IRQ_SYNC_FIFO_OV_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_IRQ_SYNC_FIFO_OV_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_IRQ_SYNC_FIFO_OV_QW,
      ._desc = "23:23",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F3_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_MSG_FIFO_UN_QW,
      ._desc = "22:22",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F2_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_MSG_FIFO_UN_QW,
      ._desc = "21:21",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F1_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_MSG_FIFO_UN_QW,
      ._desc = "20:20",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F0_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_MSG_FIFO_UN_QW,
      ._desc = "19:19",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F3_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_FIFO_SBE_QW,
      ._desc = "18:17",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F3_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F3_MSIX_FIFO_MBE_QW,
      ._desc = "16:15",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F2_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_FIFO_SBE_QW,
      ._desc = "14:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F2_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F2_MSIX_FIFO_MBE_QW,
      ._desc = "12:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F1_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_FIFO_SBE_QW,
      ._desc = "10:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F1_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F1_MSIX_FIFO_MBE_QW,
      ._desc = "8:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F0_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_FIFO_SBE_QW,
      ._desc = "6:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F0_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_F0_MSIX_FIFO_MBE_QW,
      ._desc = "4:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "MSG_ABORTED",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_MSG_ABORTED_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_MSG_ABORTED_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_MSG_ABORTED_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_MSG_ABORTED_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "MSG_DISCARD",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_MSG_DISCARD_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_MSG_DISCARD_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_MSG_DISCARD_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_MSG_DISCARD_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PII_PCLK_ERR_HSS_MSK_DIAG_ONLY_BP,
      ._mask = AR_PI_PII_PCLK_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._index = AR_PI_PII_PCLK_ERR_HSS_MSK_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_err_os_msk_detail[] = {
    { ._name = "IRQ_SYNC_FIFO_OV",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_IRQ_SYNC_FIFO_OV_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_IRQ_SYNC_FIFO_OV_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_IRQ_SYNC_FIFO_OV_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_IRQ_SYNC_FIFO_OV_QW,
      ._desc = "23:23",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F3_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_MSG_FIFO_UN_QW,
      ._desc = "22:22",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F2_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_MSG_FIFO_UN_QW,
      ._desc = "21:21",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F1_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_MSG_FIFO_UN_QW,
      ._desc = "20:20",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F0_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_MSG_FIFO_UN_QW,
      ._desc = "19:19",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F3_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_FIFO_SBE_QW,
      ._desc = "18:17",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F3_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F3_MSIX_FIFO_MBE_QW,
      ._desc = "16:15",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F2_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_FIFO_SBE_QW,
      ._desc = "14:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F2_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F2_MSIX_FIFO_MBE_QW,
      ._desc = "12:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F1_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_FIFO_SBE_QW,
      ._desc = "10:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F1_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F1_MSIX_FIFO_MBE_QW,
      ._desc = "8:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F0_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_FIFO_SBE_QW,
      ._desc = "6:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F0_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_F0_MSIX_FIFO_MBE_QW,
      ._desc = "4:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "MSG_ABORTED",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_MSG_ABORTED_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_MSG_ABORTED_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_MSG_ABORTED_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_MSG_ABORTED_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "MSG_DISCARD",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_MSG_DISCARD_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_MSG_DISCARD_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_MSG_DISCARD_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_MSG_DISCARD_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PII_PCLK_ERR_OS_MSK_DIAG_ONLY_BP,
      ._mask = AR_PI_PII_PCLK_ERR_OS_MSK_DIAG_ONLY_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PII_PCLK_ERR_OS_MSK_DIAG_ONLY_MASK,
      ._index = AR_PI_PII_PCLK_ERR_OS_MSK_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_err_first_flg_detail[] = {
    { ._name = "IRQ_SYNC_FIFO_OV",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_IRQ_SYNC_FIFO_OV_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_IRQ_SYNC_FIFO_OV_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_IRQ_SYNC_FIFO_OV_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_IRQ_SYNC_FIFO_OV_QW,
      ._desc = "23:23",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F3_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_MSG_FIFO_UN_QW,
      ._desc = "22:22",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F2_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_MSG_FIFO_UN_QW,
      ._desc = "21:21",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F1_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_MSG_FIFO_UN_QW,
      ._desc = "20:20",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F0_MSIX_MSG_FIFO_UN",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_MSG_FIFO_UN_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_MSG_FIFO_UN_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_MSG_FIFO_UN_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_MSG_FIFO_UN_QW,
      ._desc = "19:19",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F3_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_FIFO_SBE_QW,
      ._desc = "18:17",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F3_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F3_MSIX_FIFO_MBE_QW,
      ._desc = "16:15",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F2_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_FIFO_SBE_QW,
      ._desc = "14:13",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F2_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F2_MSIX_FIFO_MBE_QW,
      ._desc = "12:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F1_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_FIFO_SBE_QW,
      ._desc = "10:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F1_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F1_MSIX_FIFO_MBE_QW,
      ._desc = "8:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F0_MSIX_FIFO_SBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_FIFO_SBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_FIFO_SBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_FIFO_SBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_FIFO_SBE_QW,
      ._desc = "6:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "F0_MSIX_FIFO_MBE",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_FIFO_MBE_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_FIFO_MBE_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_FIFO_MBE_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_F0_MSIX_FIFO_MBE_QW,
      ._desc = "4:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "MSG_ABORTED",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_MSG_ABORTED_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_MSG_ABORTED_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_MSG_ABORTED_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_MSG_ABORTED_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "MSG_DISCARD",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_MSG_DISCARD_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_MSG_DISCARD_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_MSG_DISCARD_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_MSG_DISCARD_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PII_PCLK_ERR_FIRST_FLG_DIAG_ONLY_BP,
      ._mask = AR_PI_PII_PCLK_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PII_PCLK_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._index = AR_PI_PII_PCLK_ERR_FIRST_FLG_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_err_info_mbe_detail[] = {
    { ._name = "F3_MSIX_FIFO_SYND1",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MBE_F3_MSIX_FIFO_SYND1_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MBE_F3_MSIX_FIFO_SYND1_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MBE_F3_MSIX_FIFO_SYND1_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MBE_F3_MSIX_FIFO_SYND1_QW,
      ._desc = "Function 3 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F3_MSIX_FIFO_SYND0",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MBE_F3_MSIX_FIFO_SYND0_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MBE_F3_MSIX_FIFO_SYND0_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MBE_F3_MSIX_FIFO_SYND0_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MBE_F3_MSIX_FIFO_SYND0_QW,
      ._desc = "Function 3 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F2_MSIX_FIFO_SYND1",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MBE_F2_MSIX_FIFO_SYND1_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MBE_F2_MSIX_FIFO_SYND1_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MBE_F2_MSIX_FIFO_SYND1_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MBE_F2_MSIX_FIFO_SYND1_QW,
      ._desc = "Function 2 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F2_MSIX_FIFO_SYND0",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MBE_F2_MSIX_FIFO_SYND0_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MBE_F2_MSIX_FIFO_SYND0_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MBE_F2_MSIX_FIFO_SYND0_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MBE_F2_MSIX_FIFO_SYND0_QW,
      ._desc = "Function 2 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F1_MSIX_FIFO_SYND1",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MBE_F1_MSIX_FIFO_SYND1_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MBE_F1_MSIX_FIFO_SYND1_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MBE_F1_MSIX_FIFO_SYND1_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MBE_F1_MSIX_FIFO_SYND1_QW,
      ._desc = "Function 1 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F1_MSIX_FIFO_SYND0",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MBE_F1_MSIX_FIFO_SYND0_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MBE_F1_MSIX_FIFO_SYND0_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MBE_F1_MSIX_FIFO_SYND0_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MBE_F1_MSIX_FIFO_SYND0_QW,
      ._desc = "Function 1 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F0_MSIX_FIFO_SYND1",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MBE_F0_MSIX_FIFO_SYND1_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MBE_F0_MSIX_FIFO_SYND1_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MBE_F0_MSIX_FIFO_SYND1_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MBE_F0_MSIX_FIFO_SYND1_QW,
      ._desc = "Function 0 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F0_MSIX_FIFO_SYND0",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MBE_F0_MSIX_FIFO_SYND0_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MBE_F0_MSIX_FIFO_SYND0_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MBE_F0_MSIX_FIFO_SYND0_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MBE_F0_MSIX_FIFO_SYND0_QW,
      ._desc = "Function 0 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_err_info_sbe_detail[] = {
    { ._name = "F3_MSIX_FIFO_SYND1",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_SBE_F3_MSIX_FIFO_SYND1_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_SBE_F3_MSIX_FIFO_SYND1_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_SBE_F3_MSIX_FIFO_SYND1_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_SBE_F3_MSIX_FIFO_SYND1_QW,
      ._desc = "Function 3 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F3_MSIX_FIFO_SYND0",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_SBE_F3_MSIX_FIFO_SYND0_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_SBE_F3_MSIX_FIFO_SYND0_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_SBE_F3_MSIX_FIFO_SYND0_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_SBE_F3_MSIX_FIFO_SYND0_QW,
      ._desc = "Function 3 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F2_MSIX_FIFO_SYND1",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_SBE_F2_MSIX_FIFO_SYND1_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_SBE_F2_MSIX_FIFO_SYND1_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_SBE_F2_MSIX_FIFO_SYND1_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_SBE_F2_MSIX_FIFO_SYND1_QW,
      ._desc = "Function 2 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F2_MSIX_FIFO_SYND0",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_SBE_F2_MSIX_FIFO_SYND0_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_SBE_F2_MSIX_FIFO_SYND0_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_SBE_F2_MSIX_FIFO_SYND0_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_SBE_F2_MSIX_FIFO_SYND0_QW,
      ._desc = "Function 2 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F1_MSIX_FIFO_SYND1",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_SBE_F1_MSIX_FIFO_SYND1_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_SBE_F1_MSIX_FIFO_SYND1_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_SBE_F1_MSIX_FIFO_SYND1_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_SBE_F1_MSIX_FIFO_SYND1_QW,
      ._desc = "Function 1 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F1_MSIX_FIFO_SYND0",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_SBE_F1_MSIX_FIFO_SYND0_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_SBE_F1_MSIX_FIFO_SYND0_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_SBE_F1_MSIX_FIFO_SYND0_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_SBE_F1_MSIX_FIFO_SYND0_QW,
      ._desc = "Function 1 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F0_MSIX_FIFO_SYND1",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_SBE_F0_MSIX_FIFO_SYND1_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_SBE_F0_MSIX_FIFO_SYND1_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_SBE_F0_MSIX_FIFO_SYND1_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_SBE_F0_MSIX_FIFO_SYND1_QW,
      ._desc = "Function 0 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = "F0_MSIX_FIFO_SYND0",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_SBE_F0_MSIX_FIFO_SYND0_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_SBE_F0_MSIX_FIFO_SYND0_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_SBE_F0_MSIX_FIFO_SYND0_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_SBE_F0_MSIX_FIFO_SYND0_QW,
      ._desc = "Function 0 MSI-X Table Syndrome",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_err_info_msg_addr_detail[] = {
    { ._name = "MSG_ADDRESS",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_MSG_ADDRESS_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_MSG_ADDRESS_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_MSG_ADDRESS_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_MSG_ADDRESS_QW,
      ._desc = "Message AddressThis field is updated on the first rising edge of MSG_ABORTED or MSG_DISCARD",
      ._type_bitmsk = 0x0000000000000801ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_err_info_msg_data_detail[] = {
    { ._name = "MSG_DATA",
      ._bpos = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_MSG_DATA_BP,
      ._mask = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_MSG_DATA_MASK,
      ._rval = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_RSTDATA & AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_MSG_DATA_MASK,
      ._index = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_MSG_DATA_QW,
      ._desc = "This field is updated on the first rising edge of MSG_ABORTED or MSG_DISCARD",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pii_pclk_msg_stall_duration_detail[] = {
    { ._name = "MAX",
      ._bpos = AR_PI_PII_PCLK_MSG_STALL_DURATION_MAX_BP,
      ._mask = AR_PI_PII_PCLK_MSG_STALL_DURATION_MAX_MASK,
      ._rval = AR_PI_PII_PCLK_MSG_STALL_DURATION_RSTDATA & AR_PI_PII_PCLK_MSG_STALL_DURATION_MAX_MASK,
      ._index = AR_PI_PII_PCLK_MSG_STALL_DURATION_MAX_QW,
      ._desc = "Maximum duration of stall",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RWS"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_cfg_detail[] = {
    { ._name = "RSP_HALT_ON_FATAL_ERROR",
      ._bpos = AR_PI_PTI_PCLK_CFG_RSP_HALT_ON_FATAL_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_CFG_RSP_HALT_ON_FATAL_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_CFG_RSTDATA & AR_PI_PTI_PCLK_CFG_RSP_HALT_ON_FATAL_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_CFG_RSP_HALT_ON_FATAL_ERROR_QW,
      ._desc = "Response Halt on Fatal ErrorIf this bit is set and a tail error or MBE is detected on the LIF response OFIFO, the PTI will halt processing of LIF responses and instead discard all packets",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "NIF_REQ_IFIFO_AF_THRESH",
      ._bpos = AR_PI_PTI_PCLK_CFG_NIF_REQ_IFIFO_AF_THRESH_BP,
      ._mask = AR_PI_PTI_PCLK_CFG_NIF_REQ_IFIFO_AF_THRESH_MASK,
      ._rval = AR_PI_PTI_PCLK_CFG_RSTDATA & AR_PI_PTI_PCLK_CFG_NIF_REQ_IFIFO_AF_THRESH_MASK,
      ._index = AR_PI_PTI_PCLK_CFG_NIF_REQ_IFIFO_AF_THRESH_QW,
      ._desc = "NIF Request Interface Input FIFO Almost Full ThresholdThis field is used to configure the almost full threshold of the asynchronous request FIFO between the PCIe Target Request Interface and the NIC Interface",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "LIF_REQ_IFIFO_AF_THRESH",
      ._bpos = AR_PI_PTI_PCLK_CFG_LIF_REQ_IFIFO_AF_THRESH_BP,
      ._mask = AR_PI_PTI_PCLK_CFG_LIF_REQ_IFIFO_AF_THRESH_MASK,
      ._rval = AR_PI_PTI_PCLK_CFG_RSTDATA & AR_PI_PTI_PCLK_CFG_LIF_REQ_IFIFO_AF_THRESH_MASK,
      ._index = AR_PI_PTI_PCLK_CFG_LIF_REQ_IFIFO_AF_THRESH_QW,
      ._desc = "LIF Request Interface Input FIFO Almost Full ThresholdThis field is used to configure the almost full threshold of the asynchronous request FIFO between the PCIe Target Request Interface and the Local Block Interface",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_dbg_errinj_fifo_detail[] = {
    { ._name = "ECC1",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_ECC1_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_ECC1_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_ECC1_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_ECC1_QW,
      ._desc = "When an error is injected on a flit, this field indicates which bits of ECC1 should be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ECC0",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_ECC0_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_ECC0_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_ECC0_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_ECC0_QW,
      ._desc = "When an error is injected on a flit, this field indicates which bits of ECC0 should be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TRIGGERED",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_TRIGGERED_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_TRIGGERED_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_TRIGGERED_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_TRIGGERED_QW,
      ._desc = "Error has been injected",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "SELECT",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_SELECT_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_SELECT_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_SELECT_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_SELECT_QW,
      ._desc = "SELECT=00: LIF OFIFOSELECT=01: ReservedSELECT=10: ReservedSELECT=11: Reserved",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "COUNT",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_COUNT_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_COUNT_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_COUNT_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_COUNT_QW,
      ._desc = "Indicates the spacing between flits with errors injected",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "MODE",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_MODE_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_MODE_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_MODE_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_MODE_QW,
      ._desc = "0: Inject error once1: Inject error continuously",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "EN",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_EN_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_EN_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_EN_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_EN_QW,
      ._desc = "Enable error injection",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_dbg_errinj_hal_detail[] = {
    { ._name = "PARITY",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_PARITY_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_PARITY_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_PARITY_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_PARITY_QW,
      ._desc = "When an error is injected on a flit, this field indicates which bits of parity should be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TRIGGERED",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_TRIGGERED_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_TRIGGERED_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_TRIGGERED_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_TRIGGERED_QW,
      ._desc = "Error has been injected",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "SELECT",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_SELECT_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_SELECT_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_SELECT_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_SELECT_QW,
      ._desc = "SELECT=00: Target RequestSELECT=01: Target ResponseSELECT=10: ReservedSELECT=11: Reserved",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "COUNT",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_COUNT_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_COUNT_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_COUNT_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_COUNT_QW,
      ._desc = "Indicates the spacing between flits with errors injected",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "MODE",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_MODE_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_MODE_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_MODE_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_MODE_QW,
      ._desc = "0: Inject error once1: Inject error continuously",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "EN",
      ._bpos = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_EN_BP,
      ._mask = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_EN_MASK,
      ._rval = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RSTDATA & AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_EN_MASK,
      ._index = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_EN_QW,
      ._desc = "Enable error injection",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_err_flg_detail[] = {
    { ._name = "TREQ_HAL_PARITY_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_PARITY_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_PARITY_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_PARITY_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_PARITY_ERROR_QW,
      ._desc = "Target Request HAL Parity ErrorIndicates a parity error has been detected on the HAL target interface",
      ._type_bitmsk = 0x0000000000080001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "TREQ_HAL_TTYPE_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_TTYPE_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_TTYPE_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_TTYPE_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_TTYPE_ERROR_QW,
      ._desc = "Target Request HAL Transaction Type ErrorIndicates a packet with an unexpected transaction type has been received from the HAL target interface",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "TREQ_HAL_WR_EOP_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_WR_EOP_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_TREQ_HAL_WR_EOP_ERROR_QW,
      ._desc = "Target Request HAL Write End Of Packet ErrorIndicates that the Target Request state machine didn't receive a Write EOP signal when it was expected",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "LIF_RSP_OFIFO_SBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_SBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_SBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_SBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_SBE_QW,
      ._desc = "LIF Response Output FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000004001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "LIF_RSP_OFIFO_MBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_MBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_MBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_MBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_MBE_QW,
      ._desc = "LIF Response Output FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "LIF_RSP_OFIFO_TAIL_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_TAIL_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_TAIL_ERROR_QW,
      ._desc = "LIF Response OFIFO Tail Error",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "LIF_RSP_OFIFO_UN",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_UN_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_UN_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_UN_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_LIF_RSP_OFIFO_UN_QW,
      ._desc = "LIF Response OFIFO Underun",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "LIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_LIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_LIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_LIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_LIF_REQ_IFIFO_OV_QW,
      ._desc = "LIF Request IFIFO Overrun",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "NIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_NIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_NIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_NIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_NIF_REQ_IFIFO_OV_QW,
      ._desc = "NIF Request IFIFO Overrun",
      ._type_bitmsk = 0x0000000000008001ull,
      ._access = "RW1,HWO"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PTI_PCLK_ERR_FLG_DIAG_ONLY_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FLG_DIAG_ONLY_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FLG_DIAG_ONLY_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FLG_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000100001ull,
      ._access = "RW1,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_err_clr_detail[] = {
    { ._name = "TREQ_HAL_PARITY_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_PARITY_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_PARITY_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_PARITY_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_PARITY_ERROR_QW,
      ._desc = "Target Request HAL Parity ErrorIndicates a parity error has been detected on the HAL target interface",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "TREQ_HAL_TTYPE_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_TTYPE_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_TTYPE_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_TTYPE_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_TTYPE_ERROR_QW,
      ._desc = "Target Request HAL Transaction Type ErrorIndicates a packet with an unexpected transaction type has been received from the HAL target interface",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "TREQ_HAL_WR_EOP_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_WR_EOP_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_TREQ_HAL_WR_EOP_ERROR_QW,
      ._desc = "Target Request HAL Write End Of Packet ErrorIndicates that the Target Request state machine didn't receive a Write EOP signal when it was expected",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_SBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_SBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_SBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_SBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_SBE_QW,
      ._desc = "LIF Response Output FIFO Single-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_MBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_MBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_MBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_MBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_MBE_QW,
      ._desc = "LIF Response Output FIFO Multi-Bit Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_TAIL_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_TAIL_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_TAIL_ERROR_QW,
      ._desc = "LIF Response OFIFO Tail Error",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_UN",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_UN_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_UN_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_UN_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_LIF_RSP_OFIFO_UN_QW,
      ._desc = "LIF Response OFIFO Underun",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "LIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_LIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_LIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_LIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_LIF_REQ_IFIFO_OV_QW,
      ._desc = "LIF Request IFIFO Overrun",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "NIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_NIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_NIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_NIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_NIF_REQ_IFIFO_OV_QW,
      ._desc = "NIF Request IFIFO Overrun",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PTI_PCLK_ERR_CLR_DIAG_ONLY_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_CLR_DIAG_ONLY_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA & AR_PI_PTI_PCLK_ERR_CLR_DIAG_ONLY_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_CLR_DIAG_ONLY_QW,
      ._desc = "Reserved for diagnostics",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_err_hss_msk_detail[] = {
    { ._name = "TREQ_HAL_PARITY_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_PARITY_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_PARITY_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_PARITY_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_PARITY_ERROR_QW,
      ._desc = "11:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "TREQ_HAL_TTYPE_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_TTYPE_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_TTYPE_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_TTYPE_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_TTYPE_ERROR_QW,
      ._desc = "10:10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "TREQ_HAL_WR_EOP_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_WR_EOP_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_TREQ_HAL_WR_EOP_ERROR_QW,
      ._desc = "9:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_SBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_SBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_SBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_SBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_SBE_QW,
      ._desc = "8:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_MBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_MBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_MBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_MBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_MBE_QW,
      ._desc = "6:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_TAIL_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_TAIL_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_TAIL_ERROR_QW,
      ._desc = "4:4",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_UN",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_UN_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_UN_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_UN_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_RSP_OFIFO_UN_QW,
      ._desc = "3:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_LIF_REQ_IFIFO_OV_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "NIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_NIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_NIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_NIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_NIF_REQ_IFIFO_OV_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PTI_PCLK_ERR_HSS_MSK_DIAG_ONLY_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_HSS_MSK_DIAG_ONLY_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_HSS_MSK_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_err_os_msk_detail[] = {
    { ._name = "TREQ_HAL_PARITY_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_PARITY_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_PARITY_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_PARITY_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_PARITY_ERROR_QW,
      ._desc = "11:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "TREQ_HAL_TTYPE_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_TTYPE_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_TTYPE_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_TTYPE_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_TTYPE_ERROR_QW,
      ._desc = "10:10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "TREQ_HAL_WR_EOP_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_WR_EOP_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_TREQ_HAL_WR_EOP_ERROR_QW,
      ._desc = "9:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_SBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_SBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_SBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_SBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_SBE_QW,
      ._desc = "8:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_MBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_MBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_MBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_MBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_MBE_QW,
      ._desc = "6:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_TAIL_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_TAIL_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_TAIL_ERROR_QW,
      ._desc = "4:4",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_UN",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_UN_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_UN_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_UN_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_RSP_OFIFO_UN_QW,
      ._desc = "3:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_LIF_REQ_IFIFO_OV_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "NIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_NIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_NIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_NIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_NIF_REQ_IFIFO_OV_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PTI_PCLK_ERR_OS_MSK_DIAG_ONLY_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_OS_MSK_DIAG_ONLY_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA & AR_PI_PTI_PCLK_ERR_OS_MSK_DIAG_ONLY_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_OS_MSK_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_err_first_flg_detail[] = {
    { ._name = "TREQ_HAL_PARITY_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_PARITY_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_PARITY_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_PARITY_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_PARITY_ERROR_QW,
      ._desc = "11:11",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "TREQ_HAL_TTYPE_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_TTYPE_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_TTYPE_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_TTYPE_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_TTYPE_ERROR_QW,
      ._desc = "10:10",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "TREQ_HAL_WR_EOP_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_WR_EOP_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_WR_EOP_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_TREQ_HAL_WR_EOP_ERROR_QW,
      ._desc = "9:9",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_SBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_SBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_SBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_SBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_SBE_QW,
      ._desc = "8:7",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_MBE",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_MBE_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_MBE_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_MBE_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_MBE_QW,
      ._desc = "6:5",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_TAIL_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_TAIL_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_TAIL_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_TAIL_ERROR_QW,
      ._desc = "4:4",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_RSP_OFIFO_UN",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_UN_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_UN_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_UN_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_RSP_OFIFO_UN_QW,
      ._desc = "3:3",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "LIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_LIF_REQ_IFIFO_OV_QW,
      ._desc = "2:2",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "NIF_REQ_IFIFO_OV",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_NIF_REQ_IFIFO_OV_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_NIF_REQ_IFIFO_OV_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_NIF_REQ_IFIFO_OV_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_NIF_REQ_IFIFO_OV_QW,
      ._desc = "1:1",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = "DIAG_ONLY",
      ._bpos = AR_PI_PTI_PCLK_ERR_FIRST_FLG_DIAG_ONLY_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA & AR_PI_PTI_PCLK_ERR_FIRST_FLG_DIAG_ONLY_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_FIRST_FLG_DIAG_ONLY_QW,
      ._desc = "0:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HNA"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_err_info_ecc_detail[] = {
    { ._name = "LIF_RSP_OFIFO_SBE_SYND1",
      ._bpos = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_SBE_SYND1_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_SBE_SYND1_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_INFO_ECC_RSTDATA & AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_SBE_SYND1_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_SBE_SYND1_QW,
      ._desc = "LIF Request IFIFO Syndrome",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "LIF_RSP_OFIFO_SBE_SYND0",
      ._bpos = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_SBE_SYND0_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_SBE_SYND0_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_INFO_ECC_RSTDATA & AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_SBE_SYND0_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_SBE_SYND0_QW,
      ._desc = "LIF Request IFIFO Syndrome",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "LIF_RSP_OFIFO_MBE_SYND1",
      ._bpos = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_MBE_SYND1_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_MBE_SYND1_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_INFO_ECC_RSTDATA & AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_MBE_SYND1_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_MBE_SYND1_QW,
      ._desc = "LIF Request IFIFO Syndrome",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "LIF_RSP_OFIFO_MBE_SYND0",
      ._bpos = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_MBE_SYND0_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_MBE_SYND0_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_INFO_ECC_RSTDATA & AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_MBE_SYND0_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_INFO_ECC_LIF_RSP_OFIFO_MBE_SYND0_QW,
      ._desc = "LIF Request IFIFO Syndrome",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pti_pclk_err_info_misc_detail[] = {
    { ._name = "TREQ_PARITY_ERROR",
      ._bpos = AR_PI_PTI_PCLK_ERR_INFO_MISC_TREQ_PARITY_ERROR_BP,
      ._mask = AR_PI_PTI_PCLK_ERR_INFO_MISC_TREQ_PARITY_ERROR_MASK,
      ._rval = AR_PI_PTI_PCLK_ERR_INFO_MISC_RSTDATA & AR_PI_PTI_PCLK_ERR_INFO_MISC_TREQ_PARITY_ERROR_MASK,
      ._index = AR_PI_PTI_PCLK_ERR_INFO_MISC_TREQ_PARITY_ERROR_QW,
      ._desc = "Target Request Parity ErrorThis field is updated on the first rising edge of TREQ_HAL_PARITY_ERROR",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pm_pclk_dbg_errinj_cntr_perr_detail[] = {
    { ._name = "ADDRESS",
      ._bpos = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_ADDRESS_BP,
      ._mask = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_ADDRESS_MASK,
      ._rval = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_RSTDATA & AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_ADDRESS_MASK,
      ._index = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_ADDRESS_QW,
      ._desc = "This field indicates the address within the memory for which error injection is to occur",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CHECKBITS",
      ._bpos = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_CHECKBITS_BP,
      ._mask = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_CHECKBITS_MASK,
      ._rval = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_RSTDATA & AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_CHECKBITS_MASK,
      ._index = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_CHECKBITS_QW,
      ._desc = "When an error in injected, each bit that is set to one is this field causes the corresponding parity bit to be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TRIGGERED",
      ._bpos = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_TRIGGERED_BP,
      ._mask = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_TRIGGERED_MASK,
      ._rval = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_RSTDATA & AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_TRIGGERED_MASK,
      ._index = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_TRIGGERED_QW,
      ._desc = "This status bit is set when an error is injected",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "MODE",
      ._bpos = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_MODE_BP,
      ._mask = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_MODE_MASK,
      ._rval = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_RSTDATA & AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_MODE_MASK,
      ._index = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_MODE_QW,
      ._desc = "Mode 0: Inject error onceMode 1: Inject error alwaysMode 2: Inject error once if address matchesMode 3: Inject error always if address matches",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE",
      ._bpos = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_ENABLE_BP,
      ._mask = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_ENABLE_MASK,
      ._rval = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_RSTDATA & AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_ENABLE_MASK,
      ._index = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_ENABLE_QW,
      ._desc = "Enable error injection",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pm_pclk_err_info_cntr_perr_detail[] = {
    { ._name = "ADDRESS",
      ._bpos = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_ADDRESS_BP,
      ._mask = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_ADDRESS_MASK,
      ._rval = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_RSTDATA & AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_ADDRESS_MASK,
      ._index = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_ADDRESS_QW,
      ._desc = "Parity Error Address",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "MMR_DETECTED_PERR",
      ._bpos = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_MMR_DETECTED_PERR_BP,
      ._mask = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_MMR_DETECTED_PERR_MASK,
      ._rval = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_RSTDATA & AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_MMR_DETECTED_PERR_MASK,
      ._index = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_MMR_DETECTED_PERR_QW,
      ._desc = "The parity error was observed during an MMR read",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pm_pclk_err_info_cntr_perr_cnt_detail[] = {
    { ._name = "PERR_COUNT",
      ._bpos = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_PERR_COUNT_BP,
      ._mask = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_PERR_COUNT_MASK,
      ._rval = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_RSTDATA & AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_PERR_COUNT_MASK,
      ._index = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_PERR_COUNT_QW,
      ._desc = "Number of parity errors that have occurred",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pm_pclk_event_cntr_ctrl_detail[] = {
    { ._name = "DISABLE_AUTO_UPDATE",
      ._bpos = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_DISABLE_AUTO_UPDATE_BP,
      ._mask = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_DISABLE_AUTO_UPDATE_MASK,
      ._rval = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_RSTDATA & AR_PI_PM_PCLK_EVENT_CNTR_CTRL_DISABLE_AUTO_UPDATE_MASK,
      ._index = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_DISABLE_AUTO_UPDATE_QW,
      ._desc = "Disables the auto-updating of the performance counters, turns off widget",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE",
      ._bpos = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_ENABLE_BP,
      ._mask = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_ENABLE_MASK,
      ._rval = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_RSTDATA & AR_PI_PM_PCLK_EVENT_CNTR_CTRL_ENABLE_MASK,
      ._index = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_ENABLE_QW,
      ._desc = "Writing a 1'b1 enables performance counters, writing 1'b0 disable counting",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CLEAR",
      ._bpos = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_CLEAR_BP,
      ._mask = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_CLEAR_MASK,
      ._rval = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_RSTDATA & AR_PI_PM_PCLK_EVENT_CNTR_CTRL_CLEAR_MASK,
      ._index = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_CLEAR_QW,
      ._desc = "Initiates the clear sequence which clears al l performance counters, read returns zero",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "WS,HRO"
    },
    { ._name = "COUNTERS_CLEAR",
      ._bpos = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_COUNTERS_CLEAR_BP,
      ._mask = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_COUNTERS_CLEAR_MASK,
      ._rval = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_RSTDATA & AR_PI_PM_PCLK_EVENT_CNTR_CTRL_COUNTERS_CLEAR_MASK,
      ._index = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_COUNTERS_CLEAR_QW,
      ._desc = "This bit becomes set upon the completion of the clear sequence",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pm_pclk_event_cntr_detail[] = {
    { ._name = "CNT",
      ._bpos = AR_PI_PM_PCLK_EVENT_CNTR_CNT_BP,
      ._mask = AR_PI_PM_PCLK_EVENT_CNTR_CNT_MASK,
      ._rval = AR_PI_PM_PCLK_EVENT_CNTR_RSTDATA & AR_PI_PM_PCLK_EVENT_CNTR_CNT_MASK,
      ._index = AR_PI_PM_PCLK_EVENT_CNTR_CNT_QW,
      ._desc = "Event counters",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_cfg_diag_trans_detail[] = {
    { ._name = "NO_CPU_CAPTURE",
      ._bpos = AR_PI_CFG_DIAG_TRANS_NO_CPU_CAPTURE_BP,
      ._mask = AR_PI_CFG_DIAG_TRANS_NO_CPU_CAPTURE_MASK,
      ._rval = AR_PI_CFG_DIAG_TRANS_RSTDATA & AR_PI_CFG_DIAG_TRANS_NO_CPU_CAPTURE_MASK,
      ._index = AR_PI_CFG_DIAG_TRANS_NO_CPU_CAPTURE_QW,
      ._desc = "Enable capturing and injecting transactions without the CPU installed or Denali core configured",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CAPTURE_COUNT",
      ._bpos = AR_PI_CFG_DIAG_TRANS_CAPTURE_COUNT_BP,
      ._mask = AR_PI_CFG_DIAG_TRANS_CAPTURE_COUNT_MASK,
      ._rval = AR_PI_CFG_DIAG_TRANS_RSTDATA & AR_PI_CFG_DIAG_TRANS_CAPTURE_COUNT_MASK,
      ._index = AR_PI_CFG_DIAG_TRANS_CAPTURE_COUNT_QW,
      ._desc = "Number of flits to capture",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CAPTURE_TYPE",
      ._bpos = AR_PI_CFG_DIAG_TRANS_CAPTURE_TYPE_BP,
      ._mask = AR_PI_CFG_DIAG_TRANS_CAPTURE_TYPE_MASK,
      ._rval = AR_PI_CFG_DIAG_TRANS_RSTDATA & AR_PI_CFG_DIAG_TRANS_CAPTURE_TYPE_MASK,
      ._index = AR_PI_CFG_DIAG_TRANS_CAPTURE_TYPE_QW,
      ._desc = "010 = Capture Matched only 011 = Capture non Matching only 100 = Start Capture on Match 101 = Stop Capture on Match Any other = Capture every cycle",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "RESET_CAPTURE",
      ._bpos = AR_PI_CFG_DIAG_TRANS_RESET_CAPTURE_BP,
      ._mask = AR_PI_CFG_DIAG_TRANS_RESET_CAPTURE_MASK,
      ._rval = AR_PI_CFG_DIAG_TRANS_RSTDATA & AR_PI_CFG_DIAG_TRANS_RESET_CAPTURE_MASK,
      ._index = AR_PI_CFG_DIAG_TRANS_RESET_CAPTURE_QW,
      ._desc = "Writing a 1 will reset the Capture Array Status",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRW"
    },
    { ._name = "CAPTURE_BUS",
      ._bpos = AR_PI_CFG_DIAG_TRANS_CAPTURE_BUS_BP,
      ._mask = AR_PI_CFG_DIAG_TRANS_CAPTURE_BUS_MASK,
      ._rval = AR_PI_CFG_DIAG_TRANS_RSTDATA & AR_PI_CFG_DIAG_TRANS_CAPTURE_BUS_MASK,
      ._index = AR_PI_CFG_DIAG_TRANS_CAPTURE_BUS_QW,
      ._desc = "Indicates which HAL Interface to capture",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "WRAP_CAPTURE",
      ._bpos = AR_PI_CFG_DIAG_TRANS_WRAP_CAPTURE_BP,
      ._mask = AR_PI_CFG_DIAG_TRANS_WRAP_CAPTURE_MASK,
      ._rval = AR_PI_CFG_DIAG_TRANS_RSTDATA & AR_PI_CFG_DIAG_TRANS_WRAP_CAPTURE_MASK,
      ._index = AR_PI_CFG_DIAG_TRANS_WRAP_CAPTURE_QW,
      ._desc = "Ignore the Capture Count, and continue to capture until STOP_CAPTURE is activated",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "STOP_CAPTURE",
      ._bpos = AR_PI_CFG_DIAG_TRANS_STOP_CAPTURE_BP,
      ._mask = AR_PI_CFG_DIAG_TRANS_STOP_CAPTURE_MASK,
      ._rval = AR_PI_CFG_DIAG_TRANS_RSTDATA & AR_PI_CFG_DIAG_TRANS_STOP_CAPTURE_MASK,
      ._index = AR_PI_CFG_DIAG_TRANS_STOP_CAPTURE_QW,
      ._desc = "Writing a 1 will interrupt any Capture in progess",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRW"
    },
    { ._name = "START_CAPTURE",
      ._bpos = AR_PI_CFG_DIAG_TRANS_START_CAPTURE_BP,
      ._mask = AR_PI_CFG_DIAG_TRANS_START_CAPTURE_MASK,
      ._rval = AR_PI_CFG_DIAG_TRANS_RSTDATA & AR_PI_CFG_DIAG_TRANS_START_CAPTURE_MASK,
      ._index = AR_PI_CFG_DIAG_TRANS_START_CAPTURE_QW,
      ._desc = "Writing a 1 will begin Capturing the downsteam transactions",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_sts_diag_trans_detail[] = {
    { ._name = "CAPTURE_COUNT",
      ._bpos = AR_PI_STS_DIAG_TRANS_CAPTURE_COUNT_BP,
      ._mask = AR_PI_STS_DIAG_TRANS_CAPTURE_COUNT_MASK,
      ._rval = AR_PI_STS_DIAG_TRANS_RSTDATA & AR_PI_STS_DIAG_TRANS_CAPTURE_COUNT_MASK,
      ._index = AR_PI_STS_DIAG_TRANS_CAPTURE_COUNT_QW,
      ._desc = "Number of flits captured since last reset",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RO,HWO"
    },
    { ._name = "CAPTURE_FULL",
      ._bpos = AR_PI_STS_DIAG_TRANS_CAPTURE_FULL_BP,
      ._mask = AR_PI_STS_DIAG_TRANS_CAPTURE_FULL_MASK,
      ._rval = AR_PI_STS_DIAG_TRANS_RSTDATA & AR_PI_STS_DIAG_TRANS_CAPTURE_FULL_MASK,
      ._index = AR_PI_STS_DIAG_TRANS_CAPTURE_FULL_QW,
      ._desc = "RAM has filled with transactions since last reset",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RO,HWO"
    },
    { ._name = "IN_PROGRESS",
      ._bpos = AR_PI_STS_DIAG_TRANS_IN_PROGRESS_BP,
      ._mask = AR_PI_STS_DIAG_TRANS_IN_PROGRESS_MASK,
      ._rval = AR_PI_STS_DIAG_TRANS_RSTDATA & AR_PI_STS_DIAG_TRANS_IN_PROGRESS_MASK,
      ._index = AR_PI_STS_DIAG_TRANS_IN_PROGRESS_QW,
      ._desc = "Capture is enabled",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RO,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_ctl_0_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_TRANS_CTL_0_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_TRANS_CTL_0_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_TRANS_CTL_0_RSTDATA & AR_PI_DBG_TRANS_CTL_0_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_TRANS_CTL_0_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 63:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_ctl_1_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_TRANS_CTL_1_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_TRANS_CTL_1_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_TRANS_CTL_1_RSTDATA & AR_PI_DBG_TRANS_CTL_1_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_TRANS_CTL_1_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 127:64",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_ctl_2_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_TRANS_CTL_2_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_TRANS_CTL_2_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_TRANS_CTL_2_RSTDATA & AR_PI_DBG_TRANS_CTL_2_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_TRANS_CTL_2_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 191:128",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_ctl_3_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_TRANS_CTL_3_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_TRANS_CTL_3_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_TRANS_CTL_3_RSTDATA & AR_PI_DBG_TRANS_CTL_3_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_TRANS_CTL_3_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 255:192",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_ctl_4_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_TRANS_CTL_4_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_TRANS_CTL_4_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_TRANS_CTL_4_RSTDATA & AR_PI_DBG_TRANS_CTL_4_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_TRANS_CTL_4_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 319:256",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_mask_0_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_TRANS_MASK_0_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_TRANS_MASK_0_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_TRANS_MASK_0_RSTDATA & AR_PI_DBG_TRANS_MASK_0_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_TRANS_MASK_0_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 63:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_mask_1_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_TRANS_MASK_1_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_TRANS_MASK_1_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_TRANS_MASK_1_RSTDATA & AR_PI_DBG_TRANS_MASK_1_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_TRANS_MASK_1_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 127:64",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_mask_2_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_TRANS_MASK_2_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_TRANS_MASK_2_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_TRANS_MASK_2_RSTDATA & AR_PI_DBG_TRANS_MASK_2_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_TRANS_MASK_2_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 191:128",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_mask_3_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_TRANS_MASK_3_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_TRANS_MASK_3_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_TRANS_MASK_3_RSTDATA & AR_PI_DBG_TRANS_MASK_3_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_TRANS_MASK_3_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 255:192",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_trans_mask_4_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_TRANS_MASK_4_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_TRANS_MASK_4_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_TRANS_MASK_4_RSTDATA & AR_PI_DBG_TRANS_MASK_4_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_TRANS_MASK_4_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 319:256",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_cfg_diag_recv_detail[] = {
    { ._name = "CAPTURE_COUNT",
      ._bpos = AR_PI_CFG_DIAG_RECV_CAPTURE_COUNT_BP,
      ._mask = AR_PI_CFG_DIAG_RECV_CAPTURE_COUNT_MASK,
      ._rval = AR_PI_CFG_DIAG_RECV_RSTDATA & AR_PI_CFG_DIAG_RECV_CAPTURE_COUNT_MASK,
      ._index = AR_PI_CFG_DIAG_RECV_CAPTURE_COUNT_QW,
      ._desc = "Number of flits to capture",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CAPTURE_TYPE",
      ._bpos = AR_PI_CFG_DIAG_RECV_CAPTURE_TYPE_BP,
      ._mask = AR_PI_CFG_DIAG_RECV_CAPTURE_TYPE_MASK,
      ._rval = AR_PI_CFG_DIAG_RECV_RSTDATA & AR_PI_CFG_DIAG_RECV_CAPTURE_TYPE_MASK,
      ._index = AR_PI_CFG_DIAG_RECV_CAPTURE_TYPE_QW,
      ._desc = "010 = Capture Matched only 011 = Capture non Matching only 100 = Start Capture on Match 101 = Stop Capture on Match Any other = Capture every cycle",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "RESET_CAPTURE",
      ._bpos = AR_PI_CFG_DIAG_RECV_RESET_CAPTURE_BP,
      ._mask = AR_PI_CFG_DIAG_RECV_RESET_CAPTURE_MASK,
      ._rval = AR_PI_CFG_DIAG_RECV_RSTDATA & AR_PI_CFG_DIAG_RECV_RESET_CAPTURE_MASK,
      ._index = AR_PI_CFG_DIAG_RECV_RESET_CAPTURE_QW,
      ._desc = "Writing a 1 will reset the Capture Array Status",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRW"
    },
    { ._name = "CAPTURE_BUS",
      ._bpos = AR_PI_CFG_DIAG_RECV_CAPTURE_BUS_BP,
      ._mask = AR_PI_CFG_DIAG_RECV_CAPTURE_BUS_MASK,
      ._rval = AR_PI_CFG_DIAG_RECV_RSTDATA & AR_PI_CFG_DIAG_RECV_CAPTURE_BUS_MASK,
      ._index = AR_PI_CFG_DIAG_RECV_CAPTURE_BUS_QW,
      ._desc = "Indicates which HAL Interface to capture",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "WRAP_CAPTURE",
      ._bpos = AR_PI_CFG_DIAG_RECV_WRAP_CAPTURE_BP,
      ._mask = AR_PI_CFG_DIAG_RECV_WRAP_CAPTURE_MASK,
      ._rval = AR_PI_CFG_DIAG_RECV_RSTDATA & AR_PI_CFG_DIAG_RECV_WRAP_CAPTURE_MASK,
      ._index = AR_PI_CFG_DIAG_RECV_WRAP_CAPTURE_QW,
      ._desc = "Ignore the Capture Count, and continue to capture until STOP_CAPTURE is activated",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "STOP_CAPTURE",
      ._bpos = AR_PI_CFG_DIAG_RECV_STOP_CAPTURE_BP,
      ._mask = AR_PI_CFG_DIAG_RECV_STOP_CAPTURE_MASK,
      ._rval = AR_PI_CFG_DIAG_RECV_RSTDATA & AR_PI_CFG_DIAG_RECV_STOP_CAPTURE_MASK,
      ._index = AR_PI_CFG_DIAG_RECV_STOP_CAPTURE_QW,
      ._desc = "Writing a 1 will interrupt any Capture in progess",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRW"
    },
    { ._name = "START_CAPTURE",
      ._bpos = AR_PI_CFG_DIAG_RECV_START_CAPTURE_BP,
      ._mask = AR_PI_CFG_DIAG_RECV_START_CAPTURE_MASK,
      ._rval = AR_PI_CFG_DIAG_RECV_RSTDATA & AR_PI_CFG_DIAG_RECV_START_CAPTURE_MASK,
      ._index = AR_PI_CFG_DIAG_RECV_START_CAPTURE_QW,
      ._desc = "Writing a 1 will begin Capturing the downsteam transactions",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_sts_diag_recv_detail[] = {
    { ._name = "CAPTURE_COUNT",
      ._bpos = AR_PI_STS_DIAG_RECV_CAPTURE_COUNT_BP,
      ._mask = AR_PI_STS_DIAG_RECV_CAPTURE_COUNT_MASK,
      ._rval = AR_PI_STS_DIAG_RECV_RSTDATA & AR_PI_STS_DIAG_RECV_CAPTURE_COUNT_MASK,
      ._index = AR_PI_STS_DIAG_RECV_CAPTURE_COUNT_QW,
      ._desc = "Number of flits captured since last reset",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RO,HWO"
    },
    { ._name = "CAPTURE_FULL",
      ._bpos = AR_PI_STS_DIAG_RECV_CAPTURE_FULL_BP,
      ._mask = AR_PI_STS_DIAG_RECV_CAPTURE_FULL_MASK,
      ._rval = AR_PI_STS_DIAG_RECV_RSTDATA & AR_PI_STS_DIAG_RECV_CAPTURE_FULL_MASK,
      ._index = AR_PI_STS_DIAG_RECV_CAPTURE_FULL_QW,
      ._desc = "RAM has filled with transactions since last reset",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RO,HWO"
    },
    { ._name = "IN_PROGRESS",
      ._bpos = AR_PI_STS_DIAG_RECV_IN_PROGRESS_BP,
      ._mask = AR_PI_STS_DIAG_RECV_IN_PROGRESS_MASK,
      ._rval = AR_PI_STS_DIAG_RECV_RSTDATA & AR_PI_STS_DIAG_RECV_IN_PROGRESS_MASK,
      ._index = AR_PI_STS_DIAG_RECV_IN_PROGRESS_QW,
      ._desc = "Capture is enabled",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RO,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_ctl_0_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_RECV_CTL_0_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_RECV_CTL_0_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_RECV_CTL_0_RSTDATA & AR_PI_DBG_RECV_CTL_0_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_RECV_CTL_0_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 63:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_ctl_1_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_RECV_CTL_1_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_RECV_CTL_1_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_RECV_CTL_1_RSTDATA & AR_PI_DBG_RECV_CTL_1_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_RECV_CTL_1_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 127:64",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_ctl_2_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_RECV_CTL_2_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_RECV_CTL_2_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_RECV_CTL_2_RSTDATA & AR_PI_DBG_RECV_CTL_2_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_RECV_CTL_2_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 191:128",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_ctl_3_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_RECV_CTL_3_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_RECV_CTL_3_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_RECV_CTL_3_RSTDATA & AR_PI_DBG_RECV_CTL_3_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_RECV_CTL_3_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 255:192",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_ctl_4_detail[] = {
    { ._name = "CAPTURE_CNTL",
      ._bpos = AR_PI_DBG_RECV_CTL_4_CAPTURE_CNTL_BP,
      ._mask = AR_PI_DBG_RECV_CTL_4_CAPTURE_CNTL_MASK,
      ._rval = AR_PI_DBG_RECV_CTL_4_RSTDATA & AR_PI_DBG_RECV_CTL_4_CAPTURE_CNTL_MASK,
      ._index = AR_PI_DBG_RECV_CTL_4_CAPTURE_CNTL_QW,
      ._desc = "Trace Control Data 319:256",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_mask_0_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_RECV_MASK_0_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_RECV_MASK_0_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_RECV_MASK_0_RSTDATA & AR_PI_DBG_RECV_MASK_0_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_RECV_MASK_0_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 63:0",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_mask_1_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_RECV_MASK_1_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_RECV_MASK_1_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_RECV_MASK_1_RSTDATA & AR_PI_DBG_RECV_MASK_1_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_RECV_MASK_1_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 127:64",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_mask_2_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_RECV_MASK_2_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_RECV_MASK_2_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_RECV_MASK_2_RSTDATA & AR_PI_DBG_RECV_MASK_2_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_RECV_MASK_2_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 191:128",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_mask_3_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_RECV_MASK_3_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_RECV_MASK_3_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_RECV_MASK_3_RSTDATA & AR_PI_DBG_RECV_MASK_3_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_RECV_MASK_3_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 255:192",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_recv_mask_4_detail[] = {
    { ._name = "CAPTURE_MASK",
      ._bpos = AR_PI_DBG_RECV_MASK_4_CAPTURE_MASK_BP,
      ._mask = AR_PI_DBG_RECV_MASK_4_CAPTURE_MASK_MASK,
      ._rval = AR_PI_DBG_RECV_MASK_4_RSTDATA & AR_PI_DBG_RECV_MASK_4_CAPTURE_MASK_MASK,
      ._index = AR_PI_DBG_RECV_MASK_4_CAPTURE_MASK_QW,
      ._desc = "Trace Control Mask 319:256",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_debug_den_ip_detail[] = {
    { ._name = "DEN_DEBUG_PORTS",
      ._bpos = AR_PI_DEBUG_DEN_IP_DEN_DEBUG_PORTS_BP,
      ._mask = AR_PI_DEBUG_DEN_IP_DEN_DEBUG_PORTS_MASK,
      ._rval = AR_PI_DEBUG_DEN_IP_RSTDATA & AR_PI_DEBUG_DEN_IP_DEN_DEBUG_PORTS_MASK,
      ._index = AR_PI_DEBUG_DEN_IP_DEN_DEBUG_PORTS_QW,
      ._desc = "See Denali document for mux selection and information on the debug ports debug muxselection is done via Denali CSR",
      ._type_bitmsk = 0x0000000000000000ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_cfg_diag_inj_detail[] = {
    { ._name = "ONE_TRANS",
      ._bpos = AR_PI_CFG_DIAG_INJ_ONE_TRANS_BP,
      ._mask = AR_PI_CFG_DIAG_INJ_ONE_TRANS_MASK,
      ._rval = AR_PI_CFG_DIAG_INJ_RSTDATA & AR_PI_CFG_DIAG_INJ_ONE_TRANS_MASK,
      ._index = AR_PI_CFG_DIAG_INJ_ONE_TRANS_QW,
      ._desc = "Instructs injection logic to inject until an EOP is encountered in the injection stream",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "INJECT_COUNT",
      ._bpos = AR_PI_CFG_DIAG_INJ_INJECT_COUNT_BP,
      ._mask = AR_PI_CFG_DIAG_INJ_INJECT_COUNT_MASK,
      ._rval = AR_PI_CFG_DIAG_INJ_RSTDATA & AR_PI_CFG_DIAG_INJ_INJECT_COUNT_MASK,
      ._index = AR_PI_CFG_DIAG_INJ_INJECT_COUNT_QW,
      ._desc = "Number of flits to inject",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "RESET_INJECT",
      ._bpos = AR_PI_CFG_DIAG_INJ_RESET_INJECT_BP,
      ._mask = AR_PI_CFG_DIAG_INJ_RESET_INJECT_MASK,
      ._rval = AR_PI_CFG_DIAG_INJ_RSTDATA & AR_PI_CFG_DIAG_INJ_RESET_INJECT_MASK,
      ._index = AR_PI_CFG_DIAG_INJ_RESET_INJECT_QW,
      ._desc = "Writing a 1 will reset the Inject Array Status",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRW"
    },
    { ._name = "STOP_INJECT",
      ._bpos = AR_PI_CFG_DIAG_INJ_STOP_INJECT_BP,
      ._mask = AR_PI_CFG_DIAG_INJ_STOP_INJECT_MASK,
      ._rval = AR_PI_CFG_DIAG_INJ_RSTDATA & AR_PI_CFG_DIAG_INJ_STOP_INJECT_MASK,
      ._index = AR_PI_CFG_DIAG_INJ_STOP_INJECT_QW,
      ._desc = "Writing a 1 will interrupt and stop any Injection in progess",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRW"
    },
    { ._name = "START_INJECT",
      ._bpos = AR_PI_CFG_DIAG_INJ_START_INJECT_BP,
      ._mask = AR_PI_CFG_DIAG_INJ_START_INJECT_MASK,
      ._rval = AR_PI_CFG_DIAG_INJ_RSTDATA & AR_PI_CFG_DIAG_INJ_START_INJECT_MASK,
      ._index = AR_PI_CFG_DIAG_INJ_START_INJECT_QW,
      ._desc = "Writing a 1 will begin Injecting the downsteam transactions",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "WS,HRW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_sts_diag_inj_detail[] = {
    { ._name = "INJECT_COUNT",
      ._bpos = AR_PI_STS_DIAG_INJ_INJECT_COUNT_BP,
      ._mask = AR_PI_STS_DIAG_INJ_INJECT_COUNT_MASK,
      ._rval = AR_PI_STS_DIAG_INJ_RSTDATA & AR_PI_STS_DIAG_INJ_INJECT_COUNT_MASK,
      ._index = AR_PI_STS_DIAG_INJ_INJECT_COUNT_QW,
      ._desc = "Number of flits injected since last reset",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RO,HWO"
    },
    { ._name = "INJECT_COMPLETE",
      ._bpos = AR_PI_STS_DIAG_INJ_INJECT_COMPLETE_BP,
      ._mask = AR_PI_STS_DIAG_INJ_INJECT_COMPLETE_MASK,
      ._rval = AR_PI_STS_DIAG_INJ_RSTDATA & AR_PI_STS_DIAG_INJ_INJECT_COMPLETE_MASK,
      ._index = AR_PI_STS_DIAG_INJ_INJECT_COMPLETE_QW,
      ._desc = "Injection has injected all of the valid transactions in the injection array",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RO,HWO"
    },
    { ._name = "IN_PROGRESS",
      ._bpos = AR_PI_STS_DIAG_INJ_IN_PROGRESS_BP,
      ._mask = AR_PI_STS_DIAG_INJ_IN_PROGRESS_MASK,
      ._rval = AR_PI_STS_DIAG_INJ_RSTDATA & AR_PI_STS_DIAG_INJ_IN_PROGRESS_MASK,
      ._index = AR_PI_STS_DIAG_INJ_IN_PROGRESS_QW,
      ._desc = "Injection is occuring",
      ._type_bitmsk = 0x0000000000001001ull,
      ._access = "RO,HWO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_pcic_mems_dbg_errinj_detail[] = {
    { ._name = "ADDRESS",
      ._bpos = AR_PI_PCIC_MEMS_DBG_ERRINJ_ADDRESS_BP,
      ._mask = AR_PI_PCIC_MEMS_DBG_ERRINJ_ADDRESS_MASK,
      ._rval = AR_PI_PCIC_MEMS_DBG_ERRINJ_RSTDATA & AR_PI_PCIC_MEMS_DBG_ERRINJ_ADDRESS_MASK,
      ._index = AR_PI_PCIC_MEMS_DBG_ERRINJ_ADDRESS_QW,
      ._desc = "This field indicates the address within the memory for which error injection is to occur",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "CHECKBITS",
      ._bpos = AR_PI_PCIC_MEMS_DBG_ERRINJ_CHECKBITS_BP,
      ._mask = AR_PI_PCIC_MEMS_DBG_ERRINJ_CHECKBITS_MASK,
      ._rval = AR_PI_PCIC_MEMS_DBG_ERRINJ_RSTDATA & AR_PI_PCIC_MEMS_DBG_ERRINJ_CHECKBITS_MASK,
      ._index = AR_PI_PCIC_MEMS_DBG_ERRINJ_CHECKBITS_QW,
      ._desc = "When an error is injected, each bit that is set to one in this field causes the cooresponding bit of the error detection syndrome to be inverted",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "RAMSELECT",
      ._bpos = AR_PI_PCIC_MEMS_DBG_ERRINJ_RAMSELECT_BP,
      ._mask = AR_PI_PCIC_MEMS_DBG_ERRINJ_RAMSELECT_MASK,
      ._rval = AR_PI_PCIC_MEMS_DBG_ERRINJ_RSTDATA & AR_PI_PCIC_MEMS_DBG_ERRINJ_RAMSELECT_MASK,
      ._index = AR_PI_PCIC_MEMS_DBG_ERRINJ_RAMSELECT_QW,
      ._desc = "5'b000xx: SCTE RF5'b001aa: Posted Diag RF A5'b010aa: Non-Posted Diag RF A5'b011aa: Completion Diag RF 5'b100aa: Replay Diag RF aa=00,01,10,11 for 63:0, 127:64, 191:128, 255:192 data bit error injection per array",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "TRIGGERED",
      ._bpos = AR_PI_PCIC_MEMS_DBG_ERRINJ_TRIGGERED_BP,
      ._mask = AR_PI_PCIC_MEMS_DBG_ERRINJ_TRIGGERED_MASK,
      ._rval = AR_PI_PCIC_MEMS_DBG_ERRINJ_RSTDATA & AR_PI_PCIC_MEMS_DBG_ERRINJ_TRIGGERED_MASK,
      ._index = AR_PI_PCIC_MEMS_DBG_ERRINJ_TRIGGERED_QW,
      ._desc = "Error has been injected",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HWO"
    },
    { ._name = "MODE",
      ._bpos = AR_PI_PCIC_MEMS_DBG_ERRINJ_MODE_BP,
      ._mask = AR_PI_PCIC_MEMS_DBG_ERRINJ_MODE_MASK,
      ._rval = AR_PI_PCIC_MEMS_DBG_ERRINJ_RSTDATA & AR_PI_PCIC_MEMS_DBG_ERRINJ_MODE_MASK,
      ._index = AR_PI_PCIC_MEMS_DBG_ERRINJ_MODE_QW,
      ._desc = "0: Inject error once1: Inject error always 2: Inject error once if address matches 3: Inject error always if address matches",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = "ENABLE",
      ._bpos = AR_PI_PCIC_MEMS_DBG_ERRINJ_ENABLE_BP,
      ._mask = AR_PI_PCIC_MEMS_DBG_ERRINJ_ENABLE_MASK,
      ._rval = AR_PI_PCIC_MEMS_DBG_ERRINJ_RSTDATA & AR_PI_PCIC_MEMS_DBG_ERRINJ_ENABLE_MASK,
      ._index = AR_PI_PCIC_MEMS_DBG_ERRINJ_ENABLE_QW,
      ._desc = "Enable error injection",
      ._type_bitmsk = 0x0000000000000001ull,
      ._access = "RW,HRO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_csrs_detail[] = {
    { ._name = "CSR_DATA_Q3_A1",
      ._bpos = AR_PI_PHY_CSRS_CSR_DATA_Q3_A1_BP,
      ._mask = AR_PI_PHY_CSRS_CSR_DATA_Q3_A1_MASK,
      ._rval = AR_PI_PHY_CSRS_RSTDATA & AR_PI_PHY_CSRS_CSR_DATA_Q3_A1_MASK,
      ._index = AR_PI_PHY_CSRS_CSR_DATA_Q3_A1_QW,
      ._desc = "CSR Data for Quad 3, LSB=1",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = "CSR_DATA_Q2_A1",
      ._bpos = AR_PI_PHY_CSRS_CSR_DATA_Q2_A1_BP,
      ._mask = AR_PI_PHY_CSRS_CSR_DATA_Q2_A1_MASK,
      ._rval = AR_PI_PHY_CSRS_RSTDATA & AR_PI_PHY_CSRS_CSR_DATA_Q2_A1_MASK,
      ._index = AR_PI_PHY_CSRS_CSR_DATA_Q2_A1_QW,
      ._desc = "CSR Data for Quad 2, LSB=1",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = "CSR_DATA_Q1_A1",
      ._bpos = AR_PI_PHY_CSRS_CSR_DATA_Q1_A1_BP,
      ._mask = AR_PI_PHY_CSRS_CSR_DATA_Q1_A1_MASK,
      ._rval = AR_PI_PHY_CSRS_RSTDATA & AR_PI_PHY_CSRS_CSR_DATA_Q1_A1_MASK,
      ._index = AR_PI_PHY_CSRS_CSR_DATA_Q1_A1_QW,
      ._desc = "CSR Data for Quad 1, LSB=1",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = "CSR_DATA_Q0_A1",
      ._bpos = AR_PI_PHY_CSRS_CSR_DATA_Q0_A1_BP,
      ._mask = AR_PI_PHY_CSRS_CSR_DATA_Q0_A1_MASK,
      ._rval = AR_PI_PHY_CSRS_RSTDATA & AR_PI_PHY_CSRS_CSR_DATA_Q0_A1_MASK,
      ._index = AR_PI_PHY_CSRS_CSR_DATA_Q0_A1_QW,
      ._desc = "CSR Data for Quad 0, LSB=1",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = "CSR_DATA_Q3_A0",
      ._bpos = AR_PI_PHY_CSRS_CSR_DATA_Q3_A0_BP,
      ._mask = AR_PI_PHY_CSRS_CSR_DATA_Q3_A0_MASK,
      ._rval = AR_PI_PHY_CSRS_RSTDATA & AR_PI_PHY_CSRS_CSR_DATA_Q3_A0_MASK,
      ._index = AR_PI_PHY_CSRS_CSR_DATA_Q3_A0_QW,
      ._desc = "CSR Data for Quad 3, LSB=0",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = "CSR_DATA_Q2_A0",
      ._bpos = AR_PI_PHY_CSRS_CSR_DATA_Q2_A0_BP,
      ._mask = AR_PI_PHY_CSRS_CSR_DATA_Q2_A0_MASK,
      ._rval = AR_PI_PHY_CSRS_RSTDATA & AR_PI_PHY_CSRS_CSR_DATA_Q2_A0_MASK,
      ._index = AR_PI_PHY_CSRS_CSR_DATA_Q2_A0_QW,
      ._desc = "CSR Data for Quad 2, LSB=0",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = "CSR_DATA_Q1_A0",
      ._bpos = AR_PI_PHY_CSRS_CSR_DATA_Q1_A0_BP,
      ._mask = AR_PI_PHY_CSRS_CSR_DATA_Q1_A0_MASK,
      ._rval = AR_PI_PHY_CSRS_RSTDATA & AR_PI_PHY_CSRS_CSR_DATA_Q1_A0_MASK,
      ._index = AR_PI_PHY_CSRS_CSR_DATA_Q1_A0_QW,
      ._desc = "CSR Data for Quad 1, LSB=0",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = "CSR_DATA_Q0_A0",
      ._bpos = AR_PI_PHY_CSRS_CSR_DATA_Q0_A0_BP,
      ._mask = AR_PI_PHY_CSRS_CSR_DATA_Q0_A0_MASK,
      ._rval = AR_PI_PHY_CSRS_RSTDATA & AR_PI_PHY_CSRS_CSR_DATA_Q0_A0_MASK,
      ._index = AR_PI_PHY_CSRS_CSR_DATA_Q0_A0_QW,
      ._desc = "CSR Data for Quad 0, LSB=0",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_csr_cmu_0_detail[] = {
    { ._name = "SSC_CLK_DIV_Q3",
      ._bpos = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q3_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q3_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q3_QW,
      ._desc = "Clock division control for SSC block [0:1] in quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "GCFSM_CLK_DIV_Q3",
      ._bpos = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q3_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q3_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q3_QW,
      ._desc = "Clock division control for GCFSM",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_NUM_CYCLES_9_6_Q3",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q3_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q3_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q3_QW,
      ._desc = "Number of cycles qsample must be equal to [0:3] in quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "SSC_CLK_DIV_Q2",
      ._bpos = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q2_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q2_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q2_QW,
      ._desc = "Clock division control for SSC block [0:1] in quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "GCFSM_CLK_DIV_Q2",
      ._bpos = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q2_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q2_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q2_QW,
      ._desc = "Clock division control for GCFSM",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_NUM_CYCLES_9_6_Q2",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q2_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q2_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q2_QW,
      ._desc = "Number of cycles qsample must be equal to [0:3] in quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "SSC_CLK_DIV_Q1",
      ._bpos = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q1_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q1_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q1_QW,
      ._desc = "Clock division control for SSC block [0:1] in quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "GCFSM_CLK_DIV_Q1",
      ._bpos = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q1_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q1_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q1_QW,
      ._desc = "Clock division control for GCFSM",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_NUM_CYCLES_9_6_Q1",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q1_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q1_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q1_QW,
      ._desc = "Number of cycles qsample must be equal to [0:3] in quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "SSC_CLK_DIV_Q0",
      ._bpos = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q0_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q0_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_SSC_CLK_DIV_Q0_QW,
      ._desc = "Clock division control for SSC block [0:1] in quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "GCFSM_CLK_DIV_Q0",
      ._bpos = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q0_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q0_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_GCFSM_CLK_DIV_Q0_QW,
      ._desc = "Clock division control for GCFSM",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_NUM_CYCLES_9_6_Q0",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q0_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q0_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_9_6_Q0_QW,
      ._desc = "Number of cycles qsample must be equal to [0:3] in quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_NUM_CYCLES_5_0_Q3",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q3_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q3_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q3_QW,
      ._desc = "Number of cycles qsample must be equal to [4:9] in quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_GOOD_STATE_Q3",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q3_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q3_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q3_QW,
      ._desc = "State of qsample for PLL to be considered locked in quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "CMU_MASTER_CDN_Q3",
      ._bpos = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q3_QW,
      ._desc = "Master Reset for CMU in quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_NUM_CYCLES_5_0_Q2",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q2_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q2_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q2_QW,
      ._desc = "Number of cycles qsample must be equal to [4:9] in quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_GOOD_STATE_Q2",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q2_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q2_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q2_QW,
      ._desc = "State of qsample for PLL to be considered locked in quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "CMU_MASTER_CDN_Q2",
      ._bpos = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q2_QW,
      ._desc = "Master Reset for CMU in quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_NUM_CYCLES_5_0_Q1",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q1_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q1_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q1_QW,
      ._desc = "Number of cycles qsample must be equal to [4:9] in quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_GOOD_STATE_Q1",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q1_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q1_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q1_QW,
      ._desc = "State of qsample for PLL to be considered locked in quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "CMU_MASTER_CDN_Q1",
      ._bpos = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q1_QW,
      ._desc = "Master Reset for CMU in quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_NUM_CYCLES_5_0_Q0",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q0_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q0_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_NUM_CYCLES_5_0_Q0_QW,
      ._desc = "Number of cycles qsample must be equal to [4:9] in quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PLL_CTRL_GOOD_STATE_Q0",
      ._bpos = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q0_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q0_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_PLL_CTRL_GOOD_STATE_Q0_QW,
      ._desc = "State of qsample for PLL to be considered locked in quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "CMU_MASTER_CDN_Q0",
      ._bpos = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_CMU_0_RSTDATA & AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_CMU_0_CMU_MASTER_CDN_Q0_QW,
      ._desc = "Master Reset for CMU in quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_csr_lane1_0_detail[] = {
    { ._name = "NEIM_LB_ENA_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FES_LB_ENA_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_WORD_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_BIT_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_POL_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_WORD_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_BIT_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_POL_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NEIM_LB_ENA_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FES_LB_ENA_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_WORD_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_BIT_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_POL_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_WORD_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_BIT_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_POL_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NEIM_LB_ENA_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FES_LB_ENA_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_WORD_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_BIT_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_POL_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_WORD_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_BIT_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_POL_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NEIM_LB_ENA_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_NEIM_LB_ENA_O_Q0_QW,
      ._desc = "NEIM loopback enable",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FES_LB_ENA_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_FES_LB_ENA_O_Q0_QW,
      ._desc = "FES loopback enable",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_WORD_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_WORD_O_Q0_QW,
      ._desc = "Reg1 data bank word order select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_BIT_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_BIT_O_Q0_QW,
      ._desc = "Reg1 data bank bit order select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "REG1_POL_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_REG1_POL_O_Q0_QW,
      ._desc = "Reg1 data bank polarity select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_WORD_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_WORD_O_Q0_QW,
      ._desc = "TReg1 data bank word order select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_BIT_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_BIT_O_Q0_QW,
      ._desc = "TReg1 data bank bit order select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG1_POL_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG1_POL_O_Q0_QW,
      ._desc = "TReg1 data bank polarity select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "DMUX_TXA_SEL_O_1_0_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_WORD_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_BIT_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_POL_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RX_SRC_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RX_CLK_SRC_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TX_CLK_SRC_O_Q3",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q3_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q3_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q3_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "DMUX_TXA_SEL_O_1_0_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_WORD_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_BIT_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_POL_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RX_SRC_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RX_CLK_SRC_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TX_CLK_SRC_O_Q2",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q2_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q2_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q2_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "DMUX_TXA_SEL_O_1_0_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_WORD_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_BIT_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_POL_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RX_SRC_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RX_CLK_SRC_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TX_CLK_SRC_O_Q1",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q1_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q1_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q1_QW,
      ._desc = "See _Q0 description above",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "DMUX_TXA_SEL_O_1_0_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_DMUX_TXA_SEL_O_1_0_Q0_QW,
      ._desc = "Transmit mux A data input select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_WORD_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_WORD_O_Q0_QW,
      ._desc = "TReg0 data bank word order select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_BIT_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_BIT_O_Q0_QW,
      ._desc = "TReg0 data bank bit order select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TREG0_POL_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TREG0_POL_O_Q0_QW,
      ._desc = "TReg0 data bank polarity select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RX_SRC_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_RX_SRC_O_Q0_QW,
      ._desc = "RX loopback mux input select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RX_CLK_SRC_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_RX_CLK_SRC_O_Q0_QW,
      ._desc = "RX path (post elastic buffer) clock select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TX_CLK_SRC_O_Q0",
      ._bpos = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q0_BP,
      ._mask = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_LANE1_0_RSTDATA & AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q0_MASK,
      ._index = AR_PI_PHY_CSR_LANE1_0_TX_CLK_SRC_O_Q0_QW,
      ._desc = "TX path clock select",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_phy_csr_comlane_0_detail[] = {
    { ._name = "EBUF_EN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q3_QW,
      ._desc = "Elastic Buffer Enable for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "QUAD_EN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q3_QW,
      ._desc = "QUAD interface block enable for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "SAPIS_EN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q3_QW,
      ._desc = "SAPIS interface block enable for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PIPE_EN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q3_QW,
      ._desc = "PIPE interface block enable for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RXEQ_CDR_LOCK_WAIT_3_0_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q3_QW,
      ._desc = "Number of wait cycles for the CDR to lock [0:3] (times 64) for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "EBUF_EN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q2_QW,
      ._desc = "Elastic Buffer Enable for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "QUAD_EN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q2_QW,
      ._desc = "QUAD interface block enable for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "SAPIS_EN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q2_QW,
      ._desc = "SAPIS interface block enable for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PIPE_EN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q2_QW,
      ._desc = "PIPE interface block enable for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RXEQ_CDR_LOCK_WAIT_3_0_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q2_QW,
      ._desc = "Number of wait cycles for the CDR to lock [0:3] (times 64) for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "EBUF_EN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q1_QW,
      ._desc = "Elastic Buffer Enable for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "QUAD_EN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q1_QW,
      ._desc = "QUAD interface block enable for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "SAPIS_EN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q1_QW,
      ._desc = "SAPIS interface block enable for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PIPE_EN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q1_QW,
      ._desc = "PIPE interface block enable for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RXEQ_CDR_LOCK_WAIT_3_0_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q1_QW,
      ._desc = "Number of wait cycles for the CDR to lock [0:3] (times 64) for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "EBUF_EN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_EBUF_EN_Q0_QW,
      ._desc = "Elastic Buffer Enable for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "QUAD_EN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_QUAD_EN_Q0_QW,
      ._desc = "QUAD interface block enable for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "SAPIS_EN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_SAPIS_EN_Q0_QW,
      ._desc = "SAPIS interface block enable for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "PIPE_EN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_PIPE_EN_Q0_QW,
      ._desc = "PIPE interface block enable for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RXEQ_CDR_LOCK_WAIT_3_0_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_RXEQ_CDR_LOCK_WAIT_3_0_Q0_QW,
      ._desc = "Number of wait cycles for the CDR to lock [0:3] (times 64) for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "DEC_EN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q3_QW,
      ._desc = "8b/10b decoder enable for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "ENC_EN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q3_QW,
      ._desc = "8b/10b encoder enable for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RLD_EN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q3_QW,
      ._desc = "Maximum run length detector enable for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L3_MASTER_CDN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q3_QW,
      ._desc = "Lane3 master reset for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L2_MASTER_CDN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q3_QW,
      ._desc = "Lane2 master reset for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L1_MASTER_CDN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q3_QW,
      ._desc = "Lane1 master reset for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L0_MASTER_CDN_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q3_QW,
      ._desc = "Lane0 master reset for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "LN_MASTER_CDN_OVR_Q3",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q3_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q3_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q3_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q3_QW,
      ._desc = "Lane master reset override for quad 3",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "DEC_EN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q2_QW,
      ._desc = "8b/10b decoder enable for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "ENC_EN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q2_QW,
      ._desc = "8b/10b encoder enable for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RLD_EN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q2_QW,
      ._desc = "Maximum run length detector enable for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L3_MASTER_CDN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q2_QW,
      ._desc = "Lane3 master reset for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L2_MASTER_CDN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q2_QW,
      ._desc = "Lane2 master reset for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L1_MASTER_CDN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q2_QW,
      ._desc = "Lane1 master reset for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L0_MASTER_CDN_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q2_QW,
      ._desc = "Lane0 master reset for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "LN_MASTER_CDN_OVR_Q2",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q2_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q2_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q2_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q2_QW,
      ._desc = "Lane master reset override for quad 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "DEC_EN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q1_QW,
      ._desc = "8b/10b decoder enable for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "ENC_EN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q1_QW,
      ._desc = "8b/10b encoder enable for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RLD_EN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q1_QW,
      ._desc = "Maximum run length detector enable for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L3_MASTER_CDN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q1_QW,
      ._desc = "Lane3 master reset for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L2_MASTER_CDN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q1_QW,
      ._desc = "Lane2 master reset for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L1_MASTER_CDN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q1_QW,
      ._desc = "Lane1 master reset for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L0_MASTER_CDN_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q1_QW,
      ._desc = "Lane0 master reset for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "LN_MASTER_CDN_OVR_Q1",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q1_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q1_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q1_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q1_QW,
      ._desc = "Lane master reset override for quad 1",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "DEC_EN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_DEC_EN_Q0_QW,
      ._desc = "8b/10b decoder enable for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "ENC_EN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_ENC_EN_Q0_QW,
      ._desc = "8b/10b encoder enable for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RLD_EN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_RLD_EN_Q0_QW,
      ._desc = "Maximum run length detector enable for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L3_MASTER_CDN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L3_MASTER_CDN_Q0_QW,
      ._desc = "Lane3 master reset for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L2_MASTER_CDN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L2_MASTER_CDN_Q0_QW,
      ._desc = "Lane2 master reset for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L1_MASTER_CDN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L1_MASTER_CDN_Q0_QW,
      ._desc = "Lane1 master reset for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "L0_MASTER_CDN_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_L0_MASTER_CDN_Q0_QW,
      ._desc = "Lane0 master reset for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "LN_MASTER_CDN_OVR_Q0",
      ._bpos = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q0_BP,
      ._mask = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q0_MASK,
      ._rval = AR_PI_PHY_CSR_COMLANE_0_RSTDATA & AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q0_MASK,
      ._index = AR_PI_PHY_CSR_COMLANE_0_LN_MASTER_CDN_OVR_Q0_QW,
      ._desc = "Lane master reset override for quad 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_databahn_csrs_detail[] = {
    { ._name = "CSR_DATA_A1",
      ._bpos = AR_PI_DATABAHN_CSRS_CSR_DATA_A1_BP,
      ._mask = AR_PI_DATABAHN_CSRS_CSR_DATA_A1_MASK,
      ._rval = AR_PI_DATABAHN_CSRS_RSTDATA & AR_PI_DATABAHN_CSRS_CSR_DATA_A1_MASK,
      ._index = AR_PI_DATABAHN_CSRS_CSR_DATA_A1_QW,
      ._desc = "CSR Data for LSB=1",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = "CSR_DATA_A0",
      ._bpos = AR_PI_DATABAHN_CSRS_CSR_DATA_A0_BP,
      ._mask = AR_PI_DATABAHN_CSRS_CSR_DATA_A0_MASK,
      ._rval = AR_PI_DATABAHN_CSRS_RSTDATA & AR_PI_DATABAHN_CSRS_CSR_DATA_A0_MASK,
      ._index = AR_PI_DATABAHN_CSRS_CSR_DATA_A0_QW,
      ._desc = "CSR Data for LSB=0",
      ._type_bitmsk = 0x0000000000002008ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_f0_db_rev_id_class_code_detail[] = {
    { ._name = "BIST",
      ._bpos = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_BIST_BP,
      ._mask = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_BIST_MASK,
      ._rval = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_BIST_MASK,
      ._index = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_BIST_QW,
      ._desc = "BIST field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "HEADER_TYPE",
      ._bpos = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_HEADER_TYPE_BP,
      ._mask = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_HEADER_TYPE_MASK,
      ._rval = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_HEADER_TYPE_MASK,
      ._index = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_HEADER_TYPE_QW,
      ._desc = "Header Type field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "LATENCY_TIMER",
      ._bpos = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_BP,
      ._mask = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_MASK,
      ._rval = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_MASK,
      ._index = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_QW,
      ._desc = "Latency Timer field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "CACHE_LINE_SIZE",
      ._bpos = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_BP,
      ._mask = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_MASK,
      ._rval = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_MASK,
      ._index = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_QW,
      ._desc = "Cache Line Size field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000006ull,
      ._access = "RW"
    },
    { ._name = "CLASS_CODE",
      ._bpos = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_CLASS_CODE_BP,
      ._mask = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_CLASS_CODE_MASK,
      ._rval = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_CLASS_CODE_MASK,
      ._index = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_CLASS_CODE_QW,
      ._desc = "Class Code field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "REVISION_ID",
      ._bpos = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_REVISION_ID_BP,
      ._mask = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_REVISION_ID_MASK,
      ._rval = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_REVISION_ID_MASK,
      ._index = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_REVISION_ID_QW,
      ._desc = "For Aries 1",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_f0_bar_0_1_detail[] = {
    { ._name = "WRITEABLE_128G",
      ._bpos = AR_PI_DB_F0_BAR_0_1_WRITEABLE_128G_BP,
      ._mask = AR_PI_DB_F0_BAR_0_1_WRITEABLE_128G_MASK,
      ._rval = AR_PI_DB_F0_BAR_0_1_RSTDATA & AR_PI_DB_F0_BAR_0_1_WRITEABLE_128G_MASK,
      ._index = AR_PI_DB_F0_BAR_0_1_WRITEABLE_128G_QW,
      ._desc = "Function 0 defaults to 128G, so this is a writeable address section",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "BASE_ADDR_HIGH",
      ._bpos = AR_PI_DB_F0_BAR_0_1_BASE_ADDR_HIGH_BP,
      ._mask = AR_PI_DB_F0_BAR_0_1_BASE_ADDR_HIGH_MASK,
      ._rval = AR_PI_DB_F0_BAR_0_1_RSTDATA & AR_PI_DB_F0_BAR_0_1_BASE_ADDR_HIGH_MASK,
      ._index = AR_PI_DB_F0_BAR_0_1_BASE_ADDR_HIGH_QW,
      ._desc = "This field defines the upper 32 bits of the base address",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "BASE_ADDR",
      ._bpos = AR_PI_DB_F0_BAR_0_1_BASE_ADDR_BP,
      ._mask = AR_PI_DB_F0_BAR_0_1_BASE_ADDR_MASK,
      ._rval = AR_PI_DB_F0_BAR_0_1_RSTDATA & AR_PI_DB_F0_BAR_0_1_BASE_ADDR_MASK,
      ._index = AR_PI_DB_F0_BAR_0_1_BASE_ADDR_QW,
      ._desc = "This is an overloaded entry to allow access to the entire base address if needed",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "READ_ONLY_128G",
      ._bpos = AR_PI_DB_F0_BAR_0_1_READ_ONLY_128G_BP,
      ._mask = AR_PI_DB_F0_BAR_0_1_READ_ONLY_128G_MASK,
      ._rval = AR_PI_DB_F0_BAR_0_1_RSTDATA & AR_PI_DB_F0_BAR_0_1_READ_ONLY_128G_MASK,
      ._index = AR_PI_DB_F0_BAR_0_1_READ_ONLY_128G_QW,
      ._desc = "Function 0 defaults to 128G, so this is a read only address section",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "BASE_ADDR_LOW",
      ._bpos = AR_PI_DB_F0_BAR_0_1_BASE_ADDR_LOW_BP,
      ._mask = AR_PI_DB_F0_BAR_0_1_BASE_ADDR_LOW_MASK,
      ._rval = AR_PI_DB_F0_BAR_0_1_RSTDATA & AR_PI_DB_F0_BAR_0_1_BASE_ADDR_LOW_MASK,
      ._index = AR_PI_DB_F0_BAR_0_1_BASE_ADDR_LOW_QW,
      ._desc = "This field defines the base address and range of the BAR when it is used to define a memory address range",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "PREFETCHABILITY",
      ._bpos = AR_PI_DB_F0_BAR_0_1_PREFETCHABILITY_BP,
      ._mask = AR_PI_DB_F0_BAR_0_1_PREFETCHABILITY_MASK,
      ._rval = AR_PI_DB_F0_BAR_0_1_RSTDATA & AR_PI_DB_F0_BAR_0_1_PREFETCHABILITY_MASK,
      ._index = AR_PI_DB_F0_BAR_0_1_PREFETCHABILITY_QW,
      ._desc = "When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SIZE",
      ._bpos = AR_PI_DB_F0_BAR_0_1_SIZE_BP,
      ._mask = AR_PI_DB_F0_BAR_0_1_SIZE_MASK,
      ._rval = AR_PI_DB_F0_BAR_0_1_RSTDATA & AR_PI_DB_F0_BAR_0_1_SIZE_MASK,
      ._index = AR_PI_DB_F0_BAR_0_1_SIZE_QW,
      ._desc = "When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "MEM_SPACE",
      ._bpos = AR_PI_DB_F0_BAR_0_1_MEM_SPACE_BP,
      ._mask = AR_PI_DB_F0_BAR_0_1_MEM_SPACE_MASK,
      ._rval = AR_PI_DB_F0_BAR_0_1_RSTDATA & AR_PI_DB_F0_BAR_0_1_MEM_SPACE_MASK,
      ._index = AR_PI_DB_F0_BAR_0_1_MEM_SPACE_QW,
      ._desc = "Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_msi_x_cntl_2c_0_detail[] = {
    { ._name = "TABLE_OFFSET",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_0_TABLE_OFFSET_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_0_TABLE_OFFSET_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_0_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_0_TABLE_OFFSET_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_0_TABLE_OFFSET_QW,
      ._desc = "Offset of the memory address where the MSI-X Table is located, relative to the selected BAR",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "BAR_INDICATOR_EG",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_0_BAR_INDICATOR_EG_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_0_BAR_INDICATOR_EG_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_0_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_0_BAR_INDICATOR_EG_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_0_BAR_INDICATOR_EG_QW,
      ._desc = "Identifies the BAR corresponding to the memory address range where the MSI-X Table is located (000 = BAR 0, 001 = BAR 1, …, 101 = BAR 5)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "MSI_X_ENABLE",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_0_MSI_X_ENABLE_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_0_MSI_X_ENABLE_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_0_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_0_MSI_X_ENABLE_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_0_MSI_X_ENABLE_QW,
      ._desc = "Set by the configuration program to enable the MSI-X feature",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FUNCTION_MASK",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_0_FUNCTION_MASK_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_0_FUNCTION_MASK_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_0_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_0_FUNCTION_MASK_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_0_FUNCTION_MASK_QW,
      ._desc = "This bit serves as a global mask to all the interrupt conditions associated with this Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MSI_X_TABLE_SIZE",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_0_MSI_X_TABLE_SIZE_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_0_MSI_X_TABLE_SIZE_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_0_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_0_MSI_X_TABLE_SIZE_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_0_MSI_X_TABLE_SIZE_QW,
      ._desc = "Specifies the size of the MSI-X Table, that is, the number of interrupt vectors defined for the Function",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "CAPABILITY_PTR",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_0_CAPABILITY_PTR_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_0_CAPABILITY_PTR_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_0_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_0_CAPABILITY_PTR_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_0_CAPABILITY_PTR_QW,
      ._desc = "Contains pointer to the next PCI Capability Structure",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "CAPABILITY_ID",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_0_CAPABILITY_ID_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_0_CAPABILITY_ID_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_0_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_0_CAPABILITY_ID_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_0_CAPABILITY_ID_QW,
      ._desc = "Identifies that the capability structure is for MSI-X",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_msi_x_pendi_2e_0_detail[] = {
    { ._name = "PBA_OFFSET",
      ._bpos = AR_PI_DB_MSI_X_PENDI_2E_0_PBA_OFFSET_BP,
      ._mask = AR_PI_DB_MSI_X_PENDI_2E_0_PBA_OFFSET_MASK,
      ._rval = AR_PI_DB_MSI_X_PENDI_2E_0_RSTDATA & AR_PI_DB_MSI_X_PENDI_2E_0_PBA_OFFSET_MASK,
      ._index = AR_PI_DB_MSI_X_PENDI_2E_0_PBA_OFFSET_QW,
      ._desc = "Offset of the memory address where the PBA is located, relative to the selected BAR",
      ._type_bitmsk = 0x0000000000002001ull,
      ._access = "RW"
    },
    { ._name = "BAR_INDICATOR_REG",
      ._bpos = AR_PI_DB_MSI_X_PENDI_2E_0_BAR_INDICATOR_REG_BP,
      ._mask = AR_PI_DB_MSI_X_PENDI_2E_0_BAR_INDICATOR_REG_MASK,
      ._rval = AR_PI_DB_MSI_X_PENDI_2E_0_RSTDATA & AR_PI_DB_MSI_X_PENDI_2E_0_BAR_INDICATOR_REG_MASK,
      ._index = AR_PI_DB_MSI_X_PENDI_2E_0_BAR_INDICATOR_REG_QW,
      ._desc = "Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, …, 101 = BAR 5)",
      ._type_bitmsk = 0x0000000000002001ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_cntl_sts_0_detail[] = {
    { ._name = "PORT_NUMBER",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_PORT_NUMBER_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_PORT_NUMBER_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_PORT_NUMBER_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_PORT_NUMBER_QW,
      ._desc = "Specifies the port number assigned to the PCI Express link connected to this device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_55",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_55_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_55_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_55_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_55_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ASPM_OPTIONALITY_COMPLIANCE",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_ASPM_OPTIONALITY_COMPLIANCE_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_ASPM_OPTIONALITY_COMPLIANCE_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_ASPM_OPTIONALITY_COMPLIANCE_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_ASPM_OPTIONALITY_COMPLIANCE_QW,
      ._desc = "A 1 in this position indicates the device supports the ASPM Optionality feature",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_53",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_53_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_53_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_53_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_53_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "DATA_LINK_REPORT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_DATA_LINK_REPORT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_DATA_LINK_REPORT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_DATA_LINK_REPORT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_DATA_LINK_REPORT_QW,
      ._desc = "Set to 1 if the device is capable of reporting that the DL Control and Management State Machine has reached the DL_Active state",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SURP_DOWN_REPORT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_SURP_DOWN_REPORT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_SURP_DOWN_REPORT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_SURP_DOWN_REPORT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_SURP_DOWN_REPORT_QW,
      ._desc = "Indicates the capability of the device to report a Surprise Down error condition",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "CLK_PWR_MNGT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_CLK_PWR_MNGT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_CLK_PWR_MNGT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_CLK_PWR_MNGT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_CLK_PWR_MNGT_QW,
      ._desc = "Indicates that the device supports removal of reference clocks",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "L1_EXIT_LAT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_L1_EXIT_LAT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_L1_EXIT_LAT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_L1_EXIT_LAT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_L1_EXIT_LAT_QW,
      ._desc = "Specifies the exit latency from L1 state",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "LOS_EXIT_LAT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_LOS_EXIT_LAT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_LOS_EXIT_LAT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_LOS_EXIT_LAT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_LOS_EXIT_LAT_QW,
      ._desc = "Specifies the time required for the device to transition from L0S to L0",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "ACTIVE_PWR_STATE",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_ACTIVE_PWR_STATE_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_ACTIVE_PWR_STATE_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_ACTIVE_PWR_STATE_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_ACTIVE_PWR_STATE_QW,
      ._desc = "Indicates the level of ASPM support provided by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MAX_LINK_WIDTH",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_MAX_LINK_WIDTH_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_MAX_LINK_WIDTH_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_MAX_LINK_WIDTH_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_MAX_LINK_WIDTH_QW,
      ._desc = "Indicates the maximum number of lanes supported by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "MAX_LINK_SPEED",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_MAX_LINK_SPEED_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_MAX_LINK_SPEED_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_MAX_LINK_SPEED_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_MAX_LINK_SPEED_QW,
      ._desc = "Indicates the speeds supported by the link (2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_31_22",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_31_22_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_31_22_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_31_22_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_RESERVED_31_22_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TRANS_PENDING",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_TRANS_PENDING_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_TRANS_PENDING_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_TRANS_PENDING_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_TRANS_PENDING_QW,
      ._desc = "Indicates if any of the Non-Posted requests issued by the Function are still pending",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "AUX_POWER_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_AUX_POWER_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_AUX_POWER_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_AUX_POWER_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_AUX_POWER_DET_QW,
      ._desc = "Set when auxiliary power is detected by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "UNSUP_REQ_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_UNSUP_REQ_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_UNSUP_REQ_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_UNSUP_REQ_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_UNSUP_REQ_DET_QW,
      ._desc = "Set to 1 by the core when it receives an unsupported request, regardless of whether its reporting is enabled or not",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "FATAL_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_FATAL_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_FATAL_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_FATAL_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_FATAL_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "NON_FATAL_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_NON_FATAL_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_NON_FATAL_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_NON_FATAL_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_NON_FATAL_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a non-fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "CORR_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_CORR_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_CORR_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_CORR_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_CORR_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a correctable error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "FUNC_LEVEL_RESET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_FUNC_LEVEL_RESET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_FUNC_LEVEL_RESET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_FUNC_LEVEL_RESET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_FUNC_LEVEL_RESET_QW,
      ._desc = "Writing a 1 into this bit position generated a Function-Level Reset for the selected Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1"
    },
    { ._name = "MAX_READ_REQ",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_MAX_READ_REQ_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_MAX_READ_REQ_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_MAX_READ_REQ_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_MAX_READ_REQ_QW,
      ._desc = "Specifies the maximum size allowed in read requests generated by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NO_SNOOP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_NO_SNOOP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_NO_SNOOP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_NO_SNOOP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_NO_SNOOP_EN_QW,
      ._desc = "When set to 1, the device is allowed to set the No Snoop bit in initiated transactions in which cache coherency is not needed",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "AUX_POWER_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_AUX_POWER_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_AUX_POWER_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_AUX_POWER_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_AUX_POWER_EN_QW,
      ._desc = "Used only when device used aux power",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "PHANTOM_FUNC_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_PHANTOM_FUNC_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_PHANTOM_FUNC_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_PHANTOM_FUNC_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_PHANTOM_FUNC_EN_QW,
      ._desc = "Enables the use of Phantom Functions in generated requests from the master side",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TAG_FIELD_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_TAG_FIELD_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_TAG_FIELD_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_TAG_FIELD_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_TAG_FIELD_EN_QW,
      ._desc = "Enables the extension of the tag field from 5 to 8 bits",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MAX_PAYLOAD",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_MAX_PAYLOAD_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_MAX_PAYLOAD_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_MAX_PAYLOAD_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_MAX_PAYLOAD_QW,
      ._desc = "Specifies the maximum TLP payload size configured",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RELAX_ORD_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_RELAX_ORD_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_RELAX_ORD_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_RELAX_ORD_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_RELAX_ORD_EN_QW,
      ._desc = "When set, this bit indicates that the device is allowed to set the Relaxed Ordering bit in the Attributes field of transactions initiated from it",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "UNS_REQ_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_UNS_REQ_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_UNS_REQ_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_UNS_REQ_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_UNS_REQ_REP_EN_QW,
      ._desc = "Enables the sending of error messages by the core on receiving unsupported requests",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FATAL_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_FATAL_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_FATAL_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_FATAL_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_FATAL_REP_EN_QW,
      ._desc = "Enables the sending of ERR_FATAL messages by the core on the detection of fatal errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NONFATAL_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_NONFATAL_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_NONFATAL_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_NONFATAL_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_NONFATAL_REP_EN_QW,
      ._desc = "Enables the sending of ERR_NONFATAL messages by the core on the detection of non-fatal errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "COR_ERR_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_0_COR_ERR_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_0_COR_ERR_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_0_COR_ERR_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_0_COR_ERR_REP_EN_QW,
      ._desc = "Enables the sending of ERR_COR messages by the core on the detection of correctable errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_cntl_sts_2_0_detail[] = {
    { ._name = "RESERVED_63_36",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_63_36_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_63_36_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_63_36_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_63_36_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SUP_LINK_SPEED",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_SUP_LINK_SPEED_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_SUP_LINK_SPEED_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_SUP_LINK_SPEED_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_SUP_LINK_SPEED_QW,
      ._desc = "This field indicates the supported link speeds of the core",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_32",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_32_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_32_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_32_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_32_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_31_15",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_31_15_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_31_15_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_31_15_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_31_15_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "OBFF_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_OBFF_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_OBFF_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_OBFF_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_OBFF_EN_QW,
      ._desc = "Enables the Optimized Buffer Flush/Fill (OBFF) capability in the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_12_11",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_12_11_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_12_11_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_12_11_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_12_11_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "LTR_MECH_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_LTR_MECH_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_LTR_MECH_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_LTR_MECH_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_LTR_MECH_EN_QW,
      ._desc = "This must be set to 1 to enable the Latency Tolerance Reporting Mechanism",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "IDO_COMP",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_IDO_COMP_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_IDO_COMP_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_IDO_COMP_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_IDO_COMP_QW,
      ._desc = "When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the Completions it generates",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "IDO_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_IDO_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_IDO_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_IDO_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_IDO_REQ_EN_QW,
      ._desc = "When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the requests it generates",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_7",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_7_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_7_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_7_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_7_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ATOM_OP_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_ATOM_OP_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_ATOM_OP_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_ATOM_OP_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_ATOM_OP_REQ_EN_QW,
      ._desc = "This bit must be set to enable the generation of Atomic Op Requests from the Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_5",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_5_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_5_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_5_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_RESERVED_5_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "CMP_TIMEOUT_DIS",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_CMP_TIMEOUT_DIS_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_CMP_TIMEOUT_DIS_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_CMP_TIMEOUT_DIS_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_CMP_TIMEOUT_DIS_QW,
      ._desc = "Setting this bit disables Completion Timeout in the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "CMP_TIMEOUT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_0_CMP_TIMEOUT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_0_CMP_TIMEOUT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_0_CMP_TIMEOUT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_0_CMP_TIMEOUT_QW,
      ._desc = "Specifies the Completion Timeout value for the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_tph_req_cntl_0_detail[] = {
    { ._name = "RESERVED_63_41",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_63_41_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_63_41_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_63_41_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_63_41_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TPH_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_TPH_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_TPH_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_TPH_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_TPH_REQ_EN_QW,
      ._desc = "When set to 1, the Function is allowed to generate requests with Transaction Processing Hints",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_39_35",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_39_35_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_39_35_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_39_35_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_39_35_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_MODE",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_MODE_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_MODE_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_MODE_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_MODE_QW,
      ._desc = "This field selects the ST mode (000 = No Steering Tag Mode,001 = Interrupt Vector Mode, 010 = Device-Specific Mode, other values are reserved)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_31_27",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_31_27_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_31_27_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_31_27_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_31_27_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_SIZE",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_SIZE_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_SIZE_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_SIZE_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_SIZE_QW,
      ._desc = "Specifies the number of entries in the Steering Tag Table (0 = 1 entry, 1 = 2 entries, and so on)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_15_11",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_15_11_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_15_11_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_15_11_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_15_11_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_LOC",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_LOC_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_LOC_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_LOC_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_LOC_QW,
      ._desc = "The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "EXT_TPH_REG_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_EXT_TPH_REG_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_EXT_TPH_REG_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_EXT_TPH_REG_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_EXT_TPH_REG_SUP_QW,
      ._desc = "When set to 1, indicates that the Function is capable of generating requests with a TPH TLP Prefix",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_LOC_WA",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_LOC_WA_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_LOC_WA_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_LOC_WA_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_ST_TABLE_LOC_WA_QW,
      ._desc = "The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "W"
    },
    { ._name = "RESERVED_7_3",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_7_3_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_7_3_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_7_3_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RESERVED_7_3_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "DEV_SPECMODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_DEV_SPECMODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_DEV_SPECMODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_DEV_SPECMODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_DEV_SPECMODE_SUP_QW,
      ._desc = "A setting of 1 indicates that the Function supports the Device- Specific Mode for TPH Steering Tag generation",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "INT_VECTMODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_INT_VECTMODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_INT_VECTMODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_INT_VECTMODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_INT_VECTMODE_SUP_QW,
      ._desc = "A setting of 1 indicates that the Function supports the Interrupt Vector Mode for TPH Steering Tag generation",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "NO_ST_MODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_NO_ST_MODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_NO_ST_MODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_0_NO_ST_MODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_NO_ST_MODE_SUP_QW,
      ._desc = "When set to 1, indicates that this Function supports the ",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_f1_db_rev_id_class_code_detail[] = {
    { ._name = "BIST",
      ._bpos = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_BIST_BP,
      ._mask = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_BIST_MASK,
      ._rval = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_BIST_MASK,
      ._index = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_BIST_QW,
      ._desc = "BIST field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "HEADER_TYPE",
      ._bpos = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_HEADER_TYPE_BP,
      ._mask = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_HEADER_TYPE_MASK,
      ._rval = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_HEADER_TYPE_MASK,
      ._index = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_HEADER_TYPE_QW,
      ._desc = "Header Type field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "LATENCY_TIMER",
      ._bpos = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_BP,
      ._mask = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_MASK,
      ._rval = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_MASK,
      ._index = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_QW,
      ._desc = "Latency Timer field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "CACHE_LINE_SIZE",
      ._bpos = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_BP,
      ._mask = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_MASK,
      ._rval = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_MASK,
      ._index = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_QW,
      ._desc = "Cache Line Size field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000006ull,
      ._access = "RW"
    },
    { ._name = "CLASS_CODE",
      ._bpos = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_CLASS_CODE_BP,
      ._mask = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_CLASS_CODE_MASK,
      ._rval = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_CLASS_CODE_MASK,
      ._index = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_CLASS_CODE_QW,
      ._desc = "Class Code field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "REVISION_ID",
      ._bpos = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_REVISION_ID_BP,
      ._mask = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_REVISION_ID_MASK,
      ._rval = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_REVISION_ID_MASK,
      ._index = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_REVISION_ID_QW,
      ._desc = "For Aries 1",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_f1_bar_0_1_detail[] = {
    { ._name = "BASE_ADDR_HIGH",
      ._bpos = AR_PI_DB_F1_BAR_0_1_BASE_ADDR_HIGH_BP,
      ._mask = AR_PI_DB_F1_BAR_0_1_BASE_ADDR_HIGH_MASK,
      ._rval = AR_PI_DB_F1_BAR_0_1_RSTDATA & AR_PI_DB_F1_BAR_0_1_BASE_ADDR_HIGH_MASK,
      ._index = AR_PI_DB_F1_BAR_0_1_BASE_ADDR_HIGH_QW,
      ._desc = "This field defines the upper 32 bits of the base address",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "WRITEABLE_8K",
      ._bpos = AR_PI_DB_F1_BAR_0_1_WRITEABLE_8K_BP,
      ._mask = AR_PI_DB_F1_BAR_0_1_WRITEABLE_8K_MASK,
      ._rval = AR_PI_DB_F1_BAR_0_1_RSTDATA & AR_PI_DB_F1_BAR_0_1_WRITEABLE_8K_MASK,
      ._index = AR_PI_DB_F1_BAR_0_1_WRITEABLE_8K_QW,
      ._desc = "Function 1 defaults to 8K, so this is a writeable address section",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "BASE_ADDR",
      ._bpos = AR_PI_DB_F1_BAR_0_1_BASE_ADDR_BP,
      ._mask = AR_PI_DB_F1_BAR_0_1_BASE_ADDR_MASK,
      ._rval = AR_PI_DB_F1_BAR_0_1_RSTDATA & AR_PI_DB_F1_BAR_0_1_BASE_ADDR_MASK,
      ._index = AR_PI_DB_F1_BAR_0_1_BASE_ADDR_QW,
      ._desc = "This is an overloaded entry to allow access to the entire base address if needed",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "READ_ONLY_8K",
      ._bpos = AR_PI_DB_F1_BAR_0_1_READ_ONLY_8K_BP,
      ._mask = AR_PI_DB_F1_BAR_0_1_READ_ONLY_8K_MASK,
      ._rval = AR_PI_DB_F1_BAR_0_1_RSTDATA & AR_PI_DB_F1_BAR_0_1_READ_ONLY_8K_MASK,
      ._index = AR_PI_DB_F1_BAR_0_1_READ_ONLY_8K_QW,
      ._desc = "Function 1 defaults to 8K, so this is a read only address section",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "BASE_ADDR_LOW",
      ._bpos = AR_PI_DB_F1_BAR_0_1_BASE_ADDR_LOW_BP,
      ._mask = AR_PI_DB_F1_BAR_0_1_BASE_ADDR_LOW_MASK,
      ._rval = AR_PI_DB_F1_BAR_0_1_RSTDATA & AR_PI_DB_F1_BAR_0_1_BASE_ADDR_LOW_MASK,
      ._index = AR_PI_DB_F1_BAR_0_1_BASE_ADDR_LOW_QW,
      ._desc = "This field defines the base address and range of the BAR when it is used to define a memory address range",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "PREFETCHABILITY",
      ._bpos = AR_PI_DB_F1_BAR_0_1_PREFETCHABILITY_BP,
      ._mask = AR_PI_DB_F1_BAR_0_1_PREFETCHABILITY_MASK,
      ._rval = AR_PI_DB_F1_BAR_0_1_RSTDATA & AR_PI_DB_F1_BAR_0_1_PREFETCHABILITY_MASK,
      ._index = AR_PI_DB_F1_BAR_0_1_PREFETCHABILITY_QW,
      ._desc = "When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SIZE",
      ._bpos = AR_PI_DB_F1_BAR_0_1_SIZE_BP,
      ._mask = AR_PI_DB_F1_BAR_0_1_SIZE_MASK,
      ._rval = AR_PI_DB_F1_BAR_0_1_RSTDATA & AR_PI_DB_F1_BAR_0_1_SIZE_MASK,
      ._index = AR_PI_DB_F1_BAR_0_1_SIZE_QW,
      ._desc = "When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "MEM_SPACE",
      ._bpos = AR_PI_DB_F1_BAR_0_1_MEM_SPACE_BP,
      ._mask = AR_PI_DB_F1_BAR_0_1_MEM_SPACE_MASK,
      ._rval = AR_PI_DB_F1_BAR_0_1_RSTDATA & AR_PI_DB_F1_BAR_0_1_MEM_SPACE_MASK,
      ._index = AR_PI_DB_F1_BAR_0_1_MEM_SPACE_QW,
      ._desc = "Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_msi_x_cntl_2c_1_detail[] = {
    { ._name = "TABLE_OFFSET",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_1_TABLE_OFFSET_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_1_TABLE_OFFSET_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_1_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_1_TABLE_OFFSET_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_1_TABLE_OFFSET_QW,
      ._desc = "Offset of the memory address where the MSI-X Table is located, relative to the selected BAR",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "BAR_INDICATOR_EG",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_1_BAR_INDICATOR_EG_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_1_BAR_INDICATOR_EG_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_1_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_1_BAR_INDICATOR_EG_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_1_BAR_INDICATOR_EG_QW,
      ._desc = "Identifies the BAR corresponding to the memory address range where the MSI-X Table is located (000 = BAR 0, 001 = BAR 1, …, 101 = BAR 5)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "MSI_X_ENABLE",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_1_MSI_X_ENABLE_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_1_MSI_X_ENABLE_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_1_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_1_MSI_X_ENABLE_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_1_MSI_X_ENABLE_QW,
      ._desc = "Set by the configuration program to enable the MSI-X feature",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FUNCTION_MASK",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_1_FUNCTION_MASK_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_1_FUNCTION_MASK_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_1_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_1_FUNCTION_MASK_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_1_FUNCTION_MASK_QW,
      ._desc = "This bit serves as a global mask to all the interrupt conditions associated with this Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MSI_X_TABLE_SIZE",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_1_MSI_X_TABLE_SIZE_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_1_MSI_X_TABLE_SIZE_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_1_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_1_MSI_X_TABLE_SIZE_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_1_MSI_X_TABLE_SIZE_QW,
      ._desc = "Specifies the size of the MSI-X Table, that is, the number of interrupt vectors defined for the Function",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "CAPABILITY_PTR",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_1_CAPABILITY_PTR_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_1_CAPABILITY_PTR_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_1_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_1_CAPABILITY_PTR_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_1_CAPABILITY_PTR_QW,
      ._desc = "Contains pointer to the next PCI Capability Structure",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "CAPABILITY_ID",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_1_CAPABILITY_ID_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_1_CAPABILITY_ID_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_1_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_1_CAPABILITY_ID_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_1_CAPABILITY_ID_QW,
      ._desc = "Identifies that the capability structure is for MSI-X",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_msi_x_pendi_2e_1_detail[] = {
    { ._name = "PBA_OFFSET",
      ._bpos = AR_PI_DB_MSI_X_PENDI_2E_1_PBA_OFFSET_BP,
      ._mask = AR_PI_DB_MSI_X_PENDI_2E_1_PBA_OFFSET_MASK,
      ._rval = AR_PI_DB_MSI_X_PENDI_2E_1_RSTDATA & AR_PI_DB_MSI_X_PENDI_2E_1_PBA_OFFSET_MASK,
      ._index = AR_PI_DB_MSI_X_PENDI_2E_1_PBA_OFFSET_QW,
      ._desc = "Offset of the memory address where the PBA is located, relative to the selected BAR",
      ._type_bitmsk = 0x0000000000002001ull,
      ._access = "RW"
    },
    { ._name = "BAR_INDICATOR_REG",
      ._bpos = AR_PI_DB_MSI_X_PENDI_2E_1_BAR_INDICATOR_REG_BP,
      ._mask = AR_PI_DB_MSI_X_PENDI_2E_1_BAR_INDICATOR_REG_MASK,
      ._rval = AR_PI_DB_MSI_X_PENDI_2E_1_RSTDATA & AR_PI_DB_MSI_X_PENDI_2E_1_BAR_INDICATOR_REG_MASK,
      ._index = AR_PI_DB_MSI_X_PENDI_2E_1_BAR_INDICATOR_REG_QW,
      ._desc = "Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, …, 101 = BAR 5)",
      ._type_bitmsk = 0x0000000000002001ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_cntl_sts_1_detail[] = {
    { ._name = "PORT_NUMBER",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_PORT_NUMBER_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_PORT_NUMBER_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_PORT_NUMBER_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_PORT_NUMBER_QW,
      ._desc = "Specifies the port number assigned to the PCI Express link connected to this device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_55",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_55_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_55_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_55_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_55_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ASPM_OPTIONALITY_COMPLIANCE",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_ASPM_OPTIONALITY_COMPLIANCE_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_ASPM_OPTIONALITY_COMPLIANCE_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_ASPM_OPTIONALITY_COMPLIANCE_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_ASPM_OPTIONALITY_COMPLIANCE_QW,
      ._desc = "A 1 in this position indicates the device supports the ASPM Optionality feature",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_53",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_53_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_53_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_53_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_53_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "DATA_LINK_REPORT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_DATA_LINK_REPORT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_DATA_LINK_REPORT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_DATA_LINK_REPORT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_DATA_LINK_REPORT_QW,
      ._desc = "Set to 1 if the device is capable of reporting that the DL Control and Management State Machine has reached the DL_Active state",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SURP_DOWN_REPORT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_SURP_DOWN_REPORT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_SURP_DOWN_REPORT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_SURP_DOWN_REPORT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_SURP_DOWN_REPORT_QW,
      ._desc = "Indicates the capability of the device to report a Surprise Down error condition",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "CLK_PWR_MNGT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_CLK_PWR_MNGT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_CLK_PWR_MNGT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_CLK_PWR_MNGT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_CLK_PWR_MNGT_QW,
      ._desc = "Indicates that the device supports removal of reference clocks",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "L1_EXIT_LAT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_L1_EXIT_LAT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_L1_EXIT_LAT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_L1_EXIT_LAT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_L1_EXIT_LAT_QW,
      ._desc = "Specifies the exit latency from L1 state",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "LOS_EXIT_LAT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_LOS_EXIT_LAT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_LOS_EXIT_LAT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_LOS_EXIT_LAT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_LOS_EXIT_LAT_QW,
      ._desc = "Specifies the time required for the device to transition from L0S to L0",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "ACTIVE_PWR_STATE",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_ACTIVE_PWR_STATE_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_ACTIVE_PWR_STATE_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_ACTIVE_PWR_STATE_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_ACTIVE_PWR_STATE_QW,
      ._desc = "Indicates the level of ASPM support provided by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MAX_LINK_WIDTH",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_MAX_LINK_WIDTH_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_MAX_LINK_WIDTH_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_MAX_LINK_WIDTH_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_MAX_LINK_WIDTH_QW,
      ._desc = "Indicates the maximum number of lanes supported by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "MAX_LINK_SPEED",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_MAX_LINK_SPEED_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_MAX_LINK_SPEED_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_MAX_LINK_SPEED_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_MAX_LINK_SPEED_QW,
      ._desc = "Indicates the speeds supported by the link (2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_31_22",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_31_22_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_31_22_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_31_22_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_RESERVED_31_22_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TRANS_PENDING",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_TRANS_PENDING_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_TRANS_PENDING_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_TRANS_PENDING_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_TRANS_PENDING_QW,
      ._desc = "Indicates if any of the Non-Posted requests issued by the Function are still pending",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "AUX_POWER_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_AUX_POWER_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_AUX_POWER_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_AUX_POWER_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_AUX_POWER_DET_QW,
      ._desc = "Set when auxiliary power is detected by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "UNSUP_REQ_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_UNSUP_REQ_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_UNSUP_REQ_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_UNSUP_REQ_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_UNSUP_REQ_DET_QW,
      ._desc = "Set to 1 by the core when it receives an unsupported request, regardless of whether its reporting is enabled or not",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "FATAL_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_FATAL_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_FATAL_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_FATAL_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_FATAL_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "NON_FATAL_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_NON_FATAL_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_NON_FATAL_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_NON_FATAL_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_NON_FATAL_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a non-fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "CORR_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_CORR_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_CORR_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_CORR_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_CORR_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a correctable error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "FUNC_LEVEL_RESET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_FUNC_LEVEL_RESET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_FUNC_LEVEL_RESET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_FUNC_LEVEL_RESET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_FUNC_LEVEL_RESET_QW,
      ._desc = "Writing a 1 into this bit position generated a Function-Level Reset for the selected Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1"
    },
    { ._name = "MAX_READ_REQ",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_MAX_READ_REQ_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_MAX_READ_REQ_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_MAX_READ_REQ_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_MAX_READ_REQ_QW,
      ._desc = "Specifies the maximum size allowed in read requests generated by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NO_SNOOP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_NO_SNOOP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_NO_SNOOP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_NO_SNOOP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_NO_SNOOP_EN_QW,
      ._desc = "When set to 1, the device is allowed to set the No Snoop bit in initiated transactions in which cache coherency is not needed",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "AUX_POWER_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_AUX_POWER_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_AUX_POWER_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_AUX_POWER_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_AUX_POWER_EN_QW,
      ._desc = "Used only when device used aux power",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "PHANTOM_FUNC_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_PHANTOM_FUNC_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_PHANTOM_FUNC_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_PHANTOM_FUNC_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_PHANTOM_FUNC_EN_QW,
      ._desc = "Enables the use of Phantom Functions in generated requests from the master side",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TAG_FIELD_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_TAG_FIELD_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_TAG_FIELD_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_TAG_FIELD_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_TAG_FIELD_EN_QW,
      ._desc = "Enables the extension of the tag field from 5 to 8 bits",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MAX_PAYLOAD",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_MAX_PAYLOAD_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_MAX_PAYLOAD_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_MAX_PAYLOAD_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_MAX_PAYLOAD_QW,
      ._desc = "Specifies the maximum TLP payload size configured",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RELAX_ORD_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_RELAX_ORD_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_RELAX_ORD_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_RELAX_ORD_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_RELAX_ORD_EN_QW,
      ._desc = "When set, this bit indicates that the device is allowed to set the Relaxed Ordering bit in the Attributes field of transactions initiated from it",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "UNS_REQ_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_UNS_REQ_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_UNS_REQ_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_UNS_REQ_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_UNS_REQ_REP_EN_QW,
      ._desc = "Enables the sending of error messages by the core on receiving unsupported requests",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FATAL_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_FATAL_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_FATAL_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_FATAL_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_FATAL_REP_EN_QW,
      ._desc = "Enables the sending of ERR_FATAL messages by the core on the detection of fatal errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NONFATAL_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_NONFATAL_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_NONFATAL_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_NONFATAL_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_NONFATAL_REP_EN_QW,
      ._desc = "Enables the sending of ERR_NONFATAL messages by the core on the detection of non-fatal errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "COR_ERR_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_1_COR_ERR_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_1_COR_ERR_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_1_COR_ERR_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_1_COR_ERR_REP_EN_QW,
      ._desc = "Enables the sending of ERR_COR messages by the core on the detection of correctable errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_cntl_sts_2_1_detail[] = {
    { ._name = "RESERVED_63_36",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_63_36_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_63_36_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_63_36_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_63_36_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SUP_LINK_SPEED",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_SUP_LINK_SPEED_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_SUP_LINK_SPEED_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_SUP_LINK_SPEED_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_SUP_LINK_SPEED_QW,
      ._desc = "This field indicates the supported link speeds of the core",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_32",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_32_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_32_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_32_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_32_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_31_15",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_31_15_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_31_15_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_31_15_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_31_15_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "OBFF_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_OBFF_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_OBFF_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_OBFF_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_OBFF_EN_QW,
      ._desc = "Enables the Optimized Buffer Flush/Fill (OBFF) capability in the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_12_11",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_12_11_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_12_11_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_12_11_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_12_11_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "LTR_MECH_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_LTR_MECH_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_LTR_MECH_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_LTR_MECH_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_LTR_MECH_EN_QW,
      ._desc = "This must be set to 1 to enable the Latency Tolerance Reporting Mechanism",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "IDO_COMP",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_IDO_COMP_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_IDO_COMP_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_IDO_COMP_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_IDO_COMP_QW,
      ._desc = "When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the Completions it generates",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "IDO_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_IDO_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_IDO_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_IDO_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_IDO_REQ_EN_QW,
      ._desc = "When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the requests it generates",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_7",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_7_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_7_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_7_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_7_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ATOM_OP_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_ATOM_OP_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_ATOM_OP_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_ATOM_OP_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_ATOM_OP_REQ_EN_QW,
      ._desc = "This bit must be set to enable the generation of Atomic Op Requests from the Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_5",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_5_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_5_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_5_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_RESERVED_5_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "CMP_TIMEOUT_DIS",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_CMP_TIMEOUT_DIS_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_CMP_TIMEOUT_DIS_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_CMP_TIMEOUT_DIS_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_CMP_TIMEOUT_DIS_QW,
      ._desc = "Setting this bit disables Completion Timeout in the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "CMP_TIMEOUT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_1_CMP_TIMEOUT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_1_CMP_TIMEOUT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_1_CMP_TIMEOUT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_1_CMP_TIMEOUT_QW,
      ._desc = "Specifies the Completion Timeout value for the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_tph_req_cntl_1_detail[] = {
    { ._name = "RESERVED_63_41",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_63_41_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_63_41_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_63_41_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_63_41_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TPH_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_TPH_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_TPH_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_TPH_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_TPH_REQ_EN_QW,
      ._desc = "When set to 1, the Function is allowed to generate requests with Transaction Processing Hints",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_39_35",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_39_35_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_39_35_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_39_35_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_39_35_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_MODE",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_MODE_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_MODE_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_MODE_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_MODE_QW,
      ._desc = "This field selects the ST mode (000 = No Steering Tag Mode,001 = Interrupt Vector Mode, 010 = Device-Specific Mode, other values are reserved)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_31_27",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_31_27_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_31_27_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_31_27_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_31_27_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_SIZE",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_SIZE_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_SIZE_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_SIZE_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_SIZE_QW,
      ._desc = "Specifies the number of entries in the Steering Tag Table (0 = 1 entry, 1 = 2 entries, and so on)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_15_11",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_15_11_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_15_11_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_15_11_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_15_11_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_LOC",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_LOC_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_LOC_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_LOC_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_LOC_QW,
      ._desc = "The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "EXT_TPH_REG_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_EXT_TPH_REG_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_EXT_TPH_REG_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_EXT_TPH_REG_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_EXT_TPH_REG_SUP_QW,
      ._desc = "When set to 1, indicates that the Function is capable of generating requests with a TPH TLP Prefix",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_LOC_WA",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_LOC_WA_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_LOC_WA_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_LOC_WA_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_ST_TABLE_LOC_WA_QW,
      ._desc = "The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "W"
    },
    { ._name = "RESERVED_7_3",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_7_3_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_7_3_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_7_3_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RESERVED_7_3_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "DEV_SPECMODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_DEV_SPECMODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_DEV_SPECMODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_DEV_SPECMODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_DEV_SPECMODE_SUP_QW,
      ._desc = "A setting of 1 indicates that the Function supports the Device- Specific Mode for TPH Steering Tag generation",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "INT_VECTMODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_INT_VECTMODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_INT_VECTMODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_INT_VECTMODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_INT_VECTMODE_SUP_QW,
      ._desc = "A setting of 1 indicates that the Function supports the Interrupt Vector Mode for TPH Steering Tag generation",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "NO_ST_MODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_NO_ST_MODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_NO_ST_MODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_1_NO_ST_MODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_NO_ST_MODE_SUP_QW,
      ._desc = "When set to 1, indicates that this Function supports the ",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_f2_db_rev_id_class_code_detail[] = {
    { ._name = "BIST",
      ._bpos = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_BIST_BP,
      ._mask = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_BIST_MASK,
      ._rval = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_BIST_MASK,
      ._index = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_BIST_QW,
      ._desc = "BIST field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "HEADER_TYPE",
      ._bpos = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_HEADER_TYPE_BP,
      ._mask = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_HEADER_TYPE_MASK,
      ._rval = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_HEADER_TYPE_MASK,
      ._index = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_HEADER_TYPE_QW,
      ._desc = "Header Type field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "LATENCY_TIMER",
      ._bpos = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_BP,
      ._mask = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_MASK,
      ._rval = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_MASK,
      ._index = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_QW,
      ._desc = "Latency Timer field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "CACHE_LINE_SIZE",
      ._bpos = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_BP,
      ._mask = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_MASK,
      ._rval = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_MASK,
      ._index = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_QW,
      ._desc = "Cache Line Size field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000006ull,
      ._access = "RW"
    },
    { ._name = "CLASS_CODE",
      ._bpos = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_CLASS_CODE_BP,
      ._mask = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_CLASS_CODE_MASK,
      ._rval = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_CLASS_CODE_MASK,
      ._index = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_CLASS_CODE_QW,
      ._desc = "Class Code field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "REVISION_ID",
      ._bpos = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_REVISION_ID_BP,
      ._mask = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_REVISION_ID_MASK,
      ._rval = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_REVISION_ID_MASK,
      ._index = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_REVISION_ID_QW,
      ._desc = "For Aries 1",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_f2_bar_0_1_detail[] = {
    { ._name = "BASE_ADDR_HIGH",
      ._bpos = AR_PI_DB_F2_BAR_0_1_BASE_ADDR_HIGH_BP,
      ._mask = AR_PI_DB_F2_BAR_0_1_BASE_ADDR_HIGH_MASK,
      ._rval = AR_PI_DB_F2_BAR_0_1_RSTDATA & AR_PI_DB_F2_BAR_0_1_BASE_ADDR_HIGH_MASK,
      ._index = AR_PI_DB_F2_BAR_0_1_BASE_ADDR_HIGH_QW,
      ._desc = "This field defines the upper 32 bits of the base address",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "WRITEABLE_8K",
      ._bpos = AR_PI_DB_F2_BAR_0_1_WRITEABLE_8K_BP,
      ._mask = AR_PI_DB_F2_BAR_0_1_WRITEABLE_8K_MASK,
      ._rval = AR_PI_DB_F2_BAR_0_1_RSTDATA & AR_PI_DB_F2_BAR_0_1_WRITEABLE_8K_MASK,
      ._index = AR_PI_DB_F2_BAR_0_1_WRITEABLE_8K_QW,
      ._desc = "Function 1 defaults to 8K, so this is a writeable address section",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "BASE_ADDR",
      ._bpos = AR_PI_DB_F2_BAR_0_1_BASE_ADDR_BP,
      ._mask = AR_PI_DB_F2_BAR_0_1_BASE_ADDR_MASK,
      ._rval = AR_PI_DB_F2_BAR_0_1_RSTDATA & AR_PI_DB_F2_BAR_0_1_BASE_ADDR_MASK,
      ._index = AR_PI_DB_F2_BAR_0_1_BASE_ADDR_QW,
      ._desc = "This is an overloaded entry to allow access to the entire base address if needed",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "READ_ONLY_8K",
      ._bpos = AR_PI_DB_F2_BAR_0_1_READ_ONLY_8K_BP,
      ._mask = AR_PI_DB_F2_BAR_0_1_READ_ONLY_8K_MASK,
      ._rval = AR_PI_DB_F2_BAR_0_1_RSTDATA & AR_PI_DB_F2_BAR_0_1_READ_ONLY_8K_MASK,
      ._index = AR_PI_DB_F2_BAR_0_1_READ_ONLY_8K_QW,
      ._desc = "Function 1 defaults to 8K, so this is a read only address section",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "BASE_ADDR_LOW",
      ._bpos = AR_PI_DB_F2_BAR_0_1_BASE_ADDR_LOW_BP,
      ._mask = AR_PI_DB_F2_BAR_0_1_BASE_ADDR_LOW_MASK,
      ._rval = AR_PI_DB_F2_BAR_0_1_RSTDATA & AR_PI_DB_F2_BAR_0_1_BASE_ADDR_LOW_MASK,
      ._index = AR_PI_DB_F2_BAR_0_1_BASE_ADDR_LOW_QW,
      ._desc = "This field defines the base address and range of the BAR when it is used to define a memory address range",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "PREFETCHABILITY",
      ._bpos = AR_PI_DB_F2_BAR_0_1_PREFETCHABILITY_BP,
      ._mask = AR_PI_DB_F2_BAR_0_1_PREFETCHABILITY_MASK,
      ._rval = AR_PI_DB_F2_BAR_0_1_RSTDATA & AR_PI_DB_F2_BAR_0_1_PREFETCHABILITY_MASK,
      ._index = AR_PI_DB_F2_BAR_0_1_PREFETCHABILITY_QW,
      ._desc = "When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SIZE",
      ._bpos = AR_PI_DB_F2_BAR_0_1_SIZE_BP,
      ._mask = AR_PI_DB_F2_BAR_0_1_SIZE_MASK,
      ._rval = AR_PI_DB_F2_BAR_0_1_RSTDATA & AR_PI_DB_F2_BAR_0_1_SIZE_MASK,
      ._index = AR_PI_DB_F2_BAR_0_1_SIZE_QW,
      ._desc = "When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "MEM_SPACE",
      ._bpos = AR_PI_DB_F2_BAR_0_1_MEM_SPACE_BP,
      ._mask = AR_PI_DB_F2_BAR_0_1_MEM_SPACE_MASK,
      ._rval = AR_PI_DB_F2_BAR_0_1_RSTDATA & AR_PI_DB_F2_BAR_0_1_MEM_SPACE_MASK,
      ._index = AR_PI_DB_F2_BAR_0_1_MEM_SPACE_QW,
      ._desc = "Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_msi_x_cntl_2c_2_detail[] = {
    { ._name = "TABLE_OFFSET",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_2_TABLE_OFFSET_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_2_TABLE_OFFSET_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_2_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_2_TABLE_OFFSET_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_2_TABLE_OFFSET_QW,
      ._desc = "Offset of the memory address where the MSI-X Table is located, relative to the selected BAR",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "BAR_INDICATOR_EG",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_2_BAR_INDICATOR_EG_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_2_BAR_INDICATOR_EG_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_2_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_2_BAR_INDICATOR_EG_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_2_BAR_INDICATOR_EG_QW,
      ._desc = "Identifies the BAR corresponding to the memory address range where the MSI-X Table is located (000 = BAR 0, 001 = BAR 1, …, 101 = BAR 5)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "MSI_X_ENABLE",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_2_MSI_X_ENABLE_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_2_MSI_X_ENABLE_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_2_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_2_MSI_X_ENABLE_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_2_MSI_X_ENABLE_QW,
      ._desc = "Set by the configuration program to enable the MSI-X feature",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FUNCTION_MASK",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_2_FUNCTION_MASK_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_2_FUNCTION_MASK_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_2_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_2_FUNCTION_MASK_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_2_FUNCTION_MASK_QW,
      ._desc = "This bit serves as a global mask to all the interrupt conditions associated with this Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MSI_X_TABLE_SIZE",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_2_MSI_X_TABLE_SIZE_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_2_MSI_X_TABLE_SIZE_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_2_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_2_MSI_X_TABLE_SIZE_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_2_MSI_X_TABLE_SIZE_QW,
      ._desc = "Specifies the size of the MSI-X Table, that is, the number of interrupt vectors defined for the Function",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "CAPABILITY_PTR",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_2_CAPABILITY_PTR_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_2_CAPABILITY_PTR_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_2_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_2_CAPABILITY_PTR_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_2_CAPABILITY_PTR_QW,
      ._desc = "Contains pointer to the next PCI Capability Structure",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "CAPABILITY_ID",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_2_CAPABILITY_ID_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_2_CAPABILITY_ID_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_2_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_2_CAPABILITY_ID_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_2_CAPABILITY_ID_QW,
      ._desc = "Identifies that the capability structure is for MSI-X",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_msi_x_pendi_2e_2_detail[] = {
    { ._name = "PBA_OFFSET",
      ._bpos = AR_PI_DB_MSI_X_PENDI_2E_2_PBA_OFFSET_BP,
      ._mask = AR_PI_DB_MSI_X_PENDI_2E_2_PBA_OFFSET_MASK,
      ._rval = AR_PI_DB_MSI_X_PENDI_2E_2_RSTDATA & AR_PI_DB_MSI_X_PENDI_2E_2_PBA_OFFSET_MASK,
      ._index = AR_PI_DB_MSI_X_PENDI_2E_2_PBA_OFFSET_QW,
      ._desc = "Offset of the memory address where the PBA is located, relative to the selected BAR",
      ._type_bitmsk = 0x0000000000002001ull,
      ._access = "RW"
    },
    { ._name = "BAR_INDICATOR_REG",
      ._bpos = AR_PI_DB_MSI_X_PENDI_2E_2_BAR_INDICATOR_REG_BP,
      ._mask = AR_PI_DB_MSI_X_PENDI_2E_2_BAR_INDICATOR_REG_MASK,
      ._rval = AR_PI_DB_MSI_X_PENDI_2E_2_RSTDATA & AR_PI_DB_MSI_X_PENDI_2E_2_BAR_INDICATOR_REG_MASK,
      ._index = AR_PI_DB_MSI_X_PENDI_2E_2_BAR_INDICATOR_REG_QW,
      ._desc = "Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, …, 101 = BAR 5)",
      ._type_bitmsk = 0x0000000000002001ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_cntl_sts_2_detail[] = {
    { ._name = "PORT_NUMBER",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_PORT_NUMBER_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_PORT_NUMBER_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_PORT_NUMBER_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_PORT_NUMBER_QW,
      ._desc = "Specifies the port number assigned to the PCI Express link connected to this device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_55",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_55_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_55_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_55_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_55_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ASPM_OPTIONALITY_COMPLIANCE",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_ASPM_OPTIONALITY_COMPLIANCE_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_ASPM_OPTIONALITY_COMPLIANCE_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_ASPM_OPTIONALITY_COMPLIANCE_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_ASPM_OPTIONALITY_COMPLIANCE_QW,
      ._desc = "A 1 in this position indicates the device supports the ASPM Optionality feature",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_53",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_53_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_53_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_53_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_53_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "DATA_LINK_REPORT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_DATA_LINK_REPORT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_DATA_LINK_REPORT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_DATA_LINK_REPORT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_DATA_LINK_REPORT_QW,
      ._desc = "Set to 1 if the device is capable of reporting that the DL Control and Management State Machine has reached the DL_Active state",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SURP_DOWN_REPORT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_SURP_DOWN_REPORT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_SURP_DOWN_REPORT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_SURP_DOWN_REPORT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_SURP_DOWN_REPORT_QW,
      ._desc = "Indicates the capability of the device to report a Surprise Down error condition",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "CLK_PWR_MNGT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_CLK_PWR_MNGT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_CLK_PWR_MNGT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_CLK_PWR_MNGT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_CLK_PWR_MNGT_QW,
      ._desc = "Indicates that the device supports removal of reference clocks",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "L1_EXIT_LAT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_L1_EXIT_LAT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_L1_EXIT_LAT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_L1_EXIT_LAT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_L1_EXIT_LAT_QW,
      ._desc = "Specifies the exit latency from L1 state",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "LOS_EXIT_LAT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_LOS_EXIT_LAT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_LOS_EXIT_LAT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_LOS_EXIT_LAT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_LOS_EXIT_LAT_QW,
      ._desc = "Specifies the time required for the device to transition from L0S to L0",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "ACTIVE_PWR_STATE",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_ACTIVE_PWR_STATE_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_ACTIVE_PWR_STATE_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_ACTIVE_PWR_STATE_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_ACTIVE_PWR_STATE_QW,
      ._desc = "Indicates the level of ASPM support provided by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MAX_LINK_WIDTH",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_MAX_LINK_WIDTH_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_MAX_LINK_WIDTH_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_MAX_LINK_WIDTH_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_MAX_LINK_WIDTH_QW,
      ._desc = "Indicates the maximum number of lanes supported by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "MAX_LINK_SPEED",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_MAX_LINK_SPEED_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_MAX_LINK_SPEED_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_MAX_LINK_SPEED_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_MAX_LINK_SPEED_QW,
      ._desc = "Indicates the speeds supported by the link (2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_31_22",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_31_22_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_31_22_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_31_22_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_RESERVED_31_22_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TRANS_PENDING",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_TRANS_PENDING_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_TRANS_PENDING_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_TRANS_PENDING_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_TRANS_PENDING_QW,
      ._desc = "Indicates if any of the Non-Posted requests issued by the Function are still pending",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "AUX_POWER_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_AUX_POWER_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_AUX_POWER_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_AUX_POWER_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_AUX_POWER_DET_QW,
      ._desc = "Set when auxiliary power is detected by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "UNSUP_REQ_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_UNSUP_REQ_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_UNSUP_REQ_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_UNSUP_REQ_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_UNSUP_REQ_DET_QW,
      ._desc = "Set to 1 by the core when it receives an unsupported request, regardless of whether its reporting is enabled or not",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "FATAL_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_FATAL_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_FATAL_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_FATAL_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_FATAL_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "NON_FATAL_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_NON_FATAL_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_NON_FATAL_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_NON_FATAL_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_NON_FATAL_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a non-fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "CORR_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_CORR_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_CORR_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_CORR_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_CORR_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a correctable error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "FUNC_LEVEL_RESET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_FUNC_LEVEL_RESET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_FUNC_LEVEL_RESET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_FUNC_LEVEL_RESET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_FUNC_LEVEL_RESET_QW,
      ._desc = "Writing a 1 into this bit position generated a Function-Level Reset for the selected Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1"
    },
    { ._name = "MAX_READ_REQ",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_MAX_READ_REQ_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_MAX_READ_REQ_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_MAX_READ_REQ_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_MAX_READ_REQ_QW,
      ._desc = "Specifies the maximum size allowed in read requests generated by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NO_SNOOP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_NO_SNOOP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_NO_SNOOP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_NO_SNOOP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_NO_SNOOP_EN_QW,
      ._desc = "When set to 1, the device is allowed to set the No Snoop bit in initiated transactions in which cache coherency is not needed",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "AUX_POWER_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_AUX_POWER_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_AUX_POWER_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_AUX_POWER_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_AUX_POWER_EN_QW,
      ._desc = "Used only when device used aux power",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "PHANTOM_FUNC_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_PHANTOM_FUNC_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_PHANTOM_FUNC_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_PHANTOM_FUNC_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_PHANTOM_FUNC_EN_QW,
      ._desc = "Enables the use of Phantom Functions in generated requests from the master side",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TAG_FIELD_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_TAG_FIELD_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_TAG_FIELD_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_TAG_FIELD_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_TAG_FIELD_EN_QW,
      ._desc = "Enables the extension of the tag field from 5 to 8 bits",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MAX_PAYLOAD",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_MAX_PAYLOAD_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_MAX_PAYLOAD_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_MAX_PAYLOAD_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_MAX_PAYLOAD_QW,
      ._desc = "Specifies the maximum TLP payload size configured",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RELAX_ORD_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_RELAX_ORD_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_RELAX_ORD_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_RELAX_ORD_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_RELAX_ORD_EN_QW,
      ._desc = "When set, this bit indicates that the device is allowed to set the Relaxed Ordering bit in the Attributes field of transactions initiated from it",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "UNS_REQ_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_UNS_REQ_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_UNS_REQ_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_UNS_REQ_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_UNS_REQ_REP_EN_QW,
      ._desc = "Enables the sending of error messages by the core on receiving unsupported requests",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FATAL_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_FATAL_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_FATAL_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_FATAL_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_FATAL_REP_EN_QW,
      ._desc = "Enables the sending of ERR_FATAL messages by the core on the detection of fatal errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NONFATAL_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_NONFATAL_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_NONFATAL_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_NONFATAL_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_NONFATAL_REP_EN_QW,
      ._desc = "Enables the sending of ERR_NONFATAL messages by the core on the detection of non-fatal errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "COR_ERR_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_COR_ERR_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_COR_ERR_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_COR_ERR_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_COR_ERR_REP_EN_QW,
      ._desc = "Enables the sending of ERR_COR messages by the core on the detection of correctable errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_cntl_sts_2_2_detail[] = {
    { ._name = "RESERVED_63_36",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_63_36_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_63_36_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_63_36_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_63_36_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SUP_LINK_SPEED",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_SUP_LINK_SPEED_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_SUP_LINK_SPEED_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_SUP_LINK_SPEED_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_SUP_LINK_SPEED_QW,
      ._desc = "This field indicates the supported link speeds of the core",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_32",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_32_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_32_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_32_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_32_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_31_15",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_31_15_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_31_15_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_31_15_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_31_15_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "OBFF_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_OBFF_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_OBFF_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_OBFF_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_OBFF_EN_QW,
      ._desc = "Enables the Optimized Buffer Flush/Fill (OBFF) capability in the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_12_11",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_12_11_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_12_11_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_12_11_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_12_11_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "LTR_MECH_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_LTR_MECH_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_LTR_MECH_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_LTR_MECH_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_LTR_MECH_EN_QW,
      ._desc = "This must be set to 1 to enable the Latency Tolerance Reporting Mechanism",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "IDO_COMP",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_IDO_COMP_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_IDO_COMP_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_IDO_COMP_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_IDO_COMP_QW,
      ._desc = "When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the Completions it generates",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "IDO_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_IDO_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_IDO_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_IDO_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_IDO_REQ_EN_QW,
      ._desc = "When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the requests it generates",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_7",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_7_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_7_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_7_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_7_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ATOM_OP_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_ATOM_OP_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_ATOM_OP_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_ATOM_OP_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_ATOM_OP_REQ_EN_QW,
      ._desc = "This bit must be set to enable the generation of Atomic Op Requests from the Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_5",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_5_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_5_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_5_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_RESERVED_5_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "CMP_TIMEOUT_DIS",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_CMP_TIMEOUT_DIS_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_CMP_TIMEOUT_DIS_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_CMP_TIMEOUT_DIS_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_CMP_TIMEOUT_DIS_QW,
      ._desc = "Setting this bit disables Completion Timeout in the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "CMP_TIMEOUT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_2_CMP_TIMEOUT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_2_CMP_TIMEOUT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_2_CMP_TIMEOUT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_2_CMP_TIMEOUT_QW,
      ._desc = "Specifies the Completion Timeout value for the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_tph_req_cntl_2_detail[] = {
    { ._name = "RESERVED_63_41",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_63_41_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_63_41_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_63_41_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_63_41_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TPH_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_TPH_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_TPH_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_TPH_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_TPH_REQ_EN_QW,
      ._desc = "When set to 1, the Function is allowed to generate requests with Transaction Processing Hints",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_39_35",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_39_35_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_39_35_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_39_35_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_39_35_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_MODE",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_MODE_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_MODE_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_MODE_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_MODE_QW,
      ._desc = "This field selects the ST mode (000 = No Steering Tag Mode,001 = Interrupt Vector Mode, 010 = Device-Specific Mode, other values are reserved)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_31_27",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_31_27_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_31_27_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_31_27_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_31_27_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_SIZE",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_SIZE_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_SIZE_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_SIZE_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_SIZE_QW,
      ._desc = "Specifies the number of entries in the Steering Tag Table (0 = 1 entry, 1 = 2 entries, and so on)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_15_11",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_15_11_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_15_11_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_15_11_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_15_11_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_LOC",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_LOC_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_LOC_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_LOC_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_LOC_QW,
      ._desc = "The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "EXT_TPH_REG_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_EXT_TPH_REG_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_EXT_TPH_REG_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_EXT_TPH_REG_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_EXT_TPH_REG_SUP_QW,
      ._desc = "When set to 1, indicates that the Function is capable of generating requests with a TPH TLP Prefix",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_LOC_WA",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_LOC_WA_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_LOC_WA_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_LOC_WA_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_ST_TABLE_LOC_WA_QW,
      ._desc = "The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "W"
    },
    { ._name = "RESERVED_7_3",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_7_3_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_7_3_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_7_3_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RESERVED_7_3_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "DEV_SPECMODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_DEV_SPECMODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_DEV_SPECMODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_DEV_SPECMODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_DEV_SPECMODE_SUP_QW,
      ._desc = "A setting of 1 indicates that the Function supports the Device- Specific Mode for TPH Steering Tag generation",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "INT_VECTMODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_INT_VECTMODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_INT_VECTMODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_INT_VECTMODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_INT_VECTMODE_SUP_QW,
      ._desc = "A setting of 1 indicates that the Function supports the Interrupt Vector Mode for TPH Steering Tag generation",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "NO_ST_MODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_NO_ST_MODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_NO_ST_MODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_2_NO_ST_MODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_NO_ST_MODE_SUP_QW,
      ._desc = "When set to 1, indicates that this Function supports the ",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_f3_db_rev_id_class_code_detail[] = {
    { ._name = "BIST",
      ._bpos = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_BIST_BP,
      ._mask = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_BIST_MASK,
      ._rval = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_BIST_MASK,
      ._index = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_BIST_QW,
      ._desc = "BIST field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "HEADER_TYPE",
      ._bpos = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_HEADER_TYPE_BP,
      ._mask = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_HEADER_TYPE_MASK,
      ._rval = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_HEADER_TYPE_MASK,
      ._index = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_HEADER_TYPE_QW,
      ._desc = "Header Type field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "LATENCY_TIMER",
      ._bpos = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_BP,
      ._mask = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_MASK,
      ._rval = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_MASK,
      ._index = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_LATENCY_TIMER_QW,
      ._desc = "Latency Timer field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "CACHE_LINE_SIZE",
      ._bpos = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_BP,
      ._mask = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_MASK,
      ._rval = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_MASK,
      ._index = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_CACHE_LINE_SIZE_QW,
      ._desc = "Cache Line Size field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000006ull,
      ._access = "RW"
    },
    { ._name = "CLASS_CODE",
      ._bpos = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_CLASS_CODE_BP,
      ._mask = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_CLASS_CODE_MASK,
      ._rval = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_CLASS_CODE_MASK,
      ._index = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_CLASS_CODE_QW,
      ._desc = "Class Code field defined in PCI Specifications 3",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "REVISION_ID",
      ._bpos = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_REVISION_ID_BP,
      ._mask = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_REVISION_ID_MASK,
      ._rval = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RSTDATA & AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_REVISION_ID_MASK,
      ._index = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_REVISION_ID_QW,
      ._desc = "For Aries 1",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_f3_bar_0_1_detail[] = {
    { ._name = "BASE_ADDR_HIGH",
      ._bpos = AR_PI_DB_F3_BAR_0_1_BASE_ADDR_HIGH_BP,
      ._mask = AR_PI_DB_F3_BAR_0_1_BASE_ADDR_HIGH_MASK,
      ._rval = AR_PI_DB_F3_BAR_0_1_RSTDATA & AR_PI_DB_F3_BAR_0_1_BASE_ADDR_HIGH_MASK,
      ._index = AR_PI_DB_F3_BAR_0_1_BASE_ADDR_HIGH_QW,
      ._desc = "This field defines the upper 32 bits of the base address",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "WRITEABLE_8K",
      ._bpos = AR_PI_DB_F3_BAR_0_1_WRITEABLE_8K_BP,
      ._mask = AR_PI_DB_F3_BAR_0_1_WRITEABLE_8K_MASK,
      ._rval = AR_PI_DB_F3_BAR_0_1_RSTDATA & AR_PI_DB_F3_BAR_0_1_WRITEABLE_8K_MASK,
      ._index = AR_PI_DB_F3_BAR_0_1_WRITEABLE_8K_QW,
      ._desc = "Function 1 defaults to 8K, so this is a writeable address section",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "BASE_ADDR",
      ._bpos = AR_PI_DB_F3_BAR_0_1_BASE_ADDR_BP,
      ._mask = AR_PI_DB_F3_BAR_0_1_BASE_ADDR_MASK,
      ._rval = AR_PI_DB_F3_BAR_0_1_RSTDATA & AR_PI_DB_F3_BAR_0_1_BASE_ADDR_MASK,
      ._index = AR_PI_DB_F3_BAR_0_1_BASE_ADDR_QW,
      ._desc = "This is an overloaded entry to allow access to the entire base address if needed",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "READ_ONLY_8K",
      ._bpos = AR_PI_DB_F3_BAR_0_1_READ_ONLY_8K_BP,
      ._mask = AR_PI_DB_F3_BAR_0_1_READ_ONLY_8K_MASK,
      ._rval = AR_PI_DB_F3_BAR_0_1_RSTDATA & AR_PI_DB_F3_BAR_0_1_READ_ONLY_8K_MASK,
      ._index = AR_PI_DB_F3_BAR_0_1_READ_ONLY_8K_QW,
      ._desc = "Function 1 defaults to 8K, so this is a read only address section",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "BASE_ADDR_LOW",
      ._bpos = AR_PI_DB_F3_BAR_0_1_BASE_ADDR_LOW_BP,
      ._mask = AR_PI_DB_F3_BAR_0_1_BASE_ADDR_LOW_MASK,
      ._rval = AR_PI_DB_F3_BAR_0_1_RSTDATA & AR_PI_DB_F3_BAR_0_1_BASE_ADDR_LOW_MASK,
      ._index = AR_PI_DB_F3_BAR_0_1_BASE_ADDR_LOW_QW,
      ._desc = "This field defines the base address and range of the BAR when it is used to define a memory address range",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "RW"
    },
    { ._name = "PREFETCHABILITY",
      ._bpos = AR_PI_DB_F3_BAR_0_1_PREFETCHABILITY_BP,
      ._mask = AR_PI_DB_F3_BAR_0_1_PREFETCHABILITY_MASK,
      ._rval = AR_PI_DB_F3_BAR_0_1_RSTDATA & AR_PI_DB_F3_BAR_0_1_PREFETCHABILITY_MASK,
      ._index = AR_PI_DB_F3_BAR_0_1_PREFETCHABILITY_QW,
      ._desc = "When the BAR is used to define a memory address range, this field declares whether data from the address range is prefetchable (0 = non-prefetchable, 1 = prefetchable)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SIZE",
      ._bpos = AR_PI_DB_F3_BAR_0_1_SIZE_BP,
      ._mask = AR_PI_DB_F3_BAR_0_1_SIZE_MASK,
      ._rval = AR_PI_DB_F3_BAR_0_1_RSTDATA & AR_PI_DB_F3_BAR_0_1_SIZE_MASK,
      ._index = AR_PI_DB_F3_BAR_0_1_SIZE_QW,
      ._desc = "When the BAR is used to define a memory address range, this field indicates whether the address range is 32-bit or 64-bit (0 = 32-bit, 1 = 64 bit)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "MEM_SPACE",
      ._bpos = AR_PI_DB_F3_BAR_0_1_MEM_SPACE_BP,
      ._mask = AR_PI_DB_F3_BAR_0_1_MEM_SPACE_MASK,
      ._rval = AR_PI_DB_F3_BAR_0_1_RSTDATA & AR_PI_DB_F3_BAR_0_1_MEM_SPACE_MASK,
      ._index = AR_PI_DB_F3_BAR_0_1_MEM_SPACE_QW,
      ._desc = "Specifies whether this BAR defines a memory address range or an I/O address range (0 = memory, 1 = I/O)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_msi_x_cntl_2c_3_detail[] = {
    { ._name = "TABLE_OFFSET",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_3_TABLE_OFFSET_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_3_TABLE_OFFSET_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_3_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_3_TABLE_OFFSET_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_3_TABLE_OFFSET_QW,
      ._desc = "Offset of the memory address where the MSI-X Table is located, relative to the selected BAR",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "BAR_INDICATOR_EG",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_3_BAR_INDICATOR_EG_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_3_BAR_INDICATOR_EG_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_3_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_3_BAR_INDICATOR_EG_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_3_BAR_INDICATOR_EG_QW,
      ._desc = "Identifies the BAR corresponding to the memory address range where the MSI-X Table is located (000 = BAR 0, 001 = BAR 1, …, 101 = BAR 5)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "MSI_X_ENABLE",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_3_MSI_X_ENABLE_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_3_MSI_X_ENABLE_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_3_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_3_MSI_X_ENABLE_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_3_MSI_X_ENABLE_QW,
      ._desc = "Set by the configuration program to enable the MSI-X feature",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FUNCTION_MASK",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_3_FUNCTION_MASK_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_3_FUNCTION_MASK_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_3_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_3_FUNCTION_MASK_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_3_FUNCTION_MASK_QW,
      ._desc = "This bit serves as a global mask to all the interrupt conditions associated with this Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MSI_X_TABLE_SIZE",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_3_MSI_X_TABLE_SIZE_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_3_MSI_X_TABLE_SIZE_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_3_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_3_MSI_X_TABLE_SIZE_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_3_MSI_X_TABLE_SIZE_QW,
      ._desc = "Specifies the size of the MSI-X Table, that is, the number of interrupt vectors defined for the Function",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "CAPABILITY_PTR",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_3_CAPABILITY_PTR_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_3_CAPABILITY_PTR_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_3_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_3_CAPABILITY_PTR_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_3_CAPABILITY_PTR_QW,
      ._desc = "Contains pointer to the next PCI Capability Structure",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "CAPABILITY_ID",
      ._bpos = AR_PI_DB_MSI_X_CNTL_2C_3_CAPABILITY_ID_BP,
      ._mask = AR_PI_DB_MSI_X_CNTL_2C_3_CAPABILITY_ID_MASK,
      ._rval = AR_PI_DB_MSI_X_CNTL_2C_3_RSTDATA & AR_PI_DB_MSI_X_CNTL_2C_3_CAPABILITY_ID_MASK,
      ._index = AR_PI_DB_MSI_X_CNTL_2C_3_CAPABILITY_ID_QW,
      ._desc = "Identifies that the capability structure is for MSI-X",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_msi_x_pendi_2e_3_detail[] = {
    { ._name = "PBA_OFFSET",
      ._bpos = AR_PI_DB_MSI_X_PENDI_2E_3_PBA_OFFSET_BP,
      ._mask = AR_PI_DB_MSI_X_PENDI_2E_3_PBA_OFFSET_MASK,
      ._rval = AR_PI_DB_MSI_X_PENDI_2E_3_RSTDATA & AR_PI_DB_MSI_X_PENDI_2E_3_PBA_OFFSET_MASK,
      ._index = AR_PI_DB_MSI_X_PENDI_2E_3_PBA_OFFSET_QW,
      ._desc = "Offset of the memory address where the PBA is located, relative to the selected BAR",
      ._type_bitmsk = 0x0000000000002001ull,
      ._access = "RW"
    },
    { ._name = "BAR_INDICATOR_REG",
      ._bpos = AR_PI_DB_MSI_X_PENDI_2E_3_BAR_INDICATOR_REG_BP,
      ._mask = AR_PI_DB_MSI_X_PENDI_2E_3_BAR_INDICATOR_REG_MASK,
      ._rval = AR_PI_DB_MSI_X_PENDI_2E_3_RSTDATA & AR_PI_DB_MSI_X_PENDI_2E_3_BAR_INDICATOR_REG_MASK,
      ._index = AR_PI_DB_MSI_X_PENDI_2E_3_BAR_INDICATOR_REG_QW,
      ._desc = "Identifies the BAR corresponding to the memory address range where the PBA Structure is located (000 = BAR 0, 001 = BAR 1, …, 101 = BAR 5)",
      ._type_bitmsk = 0x0000000000002001ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_cntl_sts_3_detail[] = {
    { ._name = "PORT_NUMBER",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_PORT_NUMBER_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_PORT_NUMBER_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_PORT_NUMBER_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_PORT_NUMBER_QW,
      ._desc = "Specifies the port number assigned to the PCI Express link connected to this device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_55",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_55_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_55_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_55_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_55_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ASPM_OPTIONALITY_COMPLIANCE",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_ASPM_OPTIONALITY_COMPLIANCE_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_ASPM_OPTIONALITY_COMPLIANCE_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_ASPM_OPTIONALITY_COMPLIANCE_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_ASPM_OPTIONALITY_COMPLIANCE_QW,
      ._desc = "A 1 in this position indicates the device supports the ASPM Optionality feature",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_53",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_53_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_53_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_53_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_53_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "DATA_LINK_REPORT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_DATA_LINK_REPORT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_DATA_LINK_REPORT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_DATA_LINK_REPORT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_DATA_LINK_REPORT_QW,
      ._desc = "Set to 1 if the device is capable of reporting that the DL Control and Management State Machine has reached the DL_Active state",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SURP_DOWN_REPORT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_SURP_DOWN_REPORT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_SURP_DOWN_REPORT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_SURP_DOWN_REPORT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_SURP_DOWN_REPORT_QW,
      ._desc = "Indicates the capability of the device to report a Surprise Down error condition",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "CLK_PWR_MNGT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_CLK_PWR_MNGT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_CLK_PWR_MNGT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_CLK_PWR_MNGT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_CLK_PWR_MNGT_QW,
      ._desc = "Indicates that the device supports removal of reference clocks",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "L1_EXIT_LAT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_L1_EXIT_LAT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_L1_EXIT_LAT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_L1_EXIT_LAT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_L1_EXIT_LAT_QW,
      ._desc = "Specifies the exit latency from L1 state",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "LOS_EXIT_LAT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_LOS_EXIT_LAT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_LOS_EXIT_LAT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_LOS_EXIT_LAT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_LOS_EXIT_LAT_QW,
      ._desc = "Specifies the time required for the device to transition from L0S to L0",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "ACTIVE_PWR_STATE",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_ACTIVE_PWR_STATE_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_ACTIVE_PWR_STATE_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_ACTIVE_PWR_STATE_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_ACTIVE_PWR_STATE_QW,
      ._desc = "Indicates the level of ASPM support provided by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MAX_LINK_WIDTH",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_MAX_LINK_WIDTH_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_MAX_LINK_WIDTH_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_MAX_LINK_WIDTH_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_MAX_LINK_WIDTH_QW,
      ._desc = "Indicates the maximum number of lanes supported by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "MAX_LINK_SPEED",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_MAX_LINK_SPEED_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_MAX_LINK_SPEED_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_MAX_LINK_SPEED_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_MAX_LINK_SPEED_QW,
      ._desc = "Indicates the speeds supported by the link (2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_31_22",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_31_22_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_31_22_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_31_22_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_RESERVED_31_22_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TRANS_PENDING",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_TRANS_PENDING_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_TRANS_PENDING_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_TRANS_PENDING_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_TRANS_PENDING_QW,
      ._desc = "Indicates if any of the Non-Posted requests issued by the Function are still pending",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "AUX_POWER_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_AUX_POWER_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_AUX_POWER_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_AUX_POWER_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_AUX_POWER_DET_QW,
      ._desc = "Set when auxiliary power is detected by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "UNSUP_REQ_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_UNSUP_REQ_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_UNSUP_REQ_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_UNSUP_REQ_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_UNSUP_REQ_DET_QW,
      ._desc = "Set to 1 by the core when it receives an unsupported request, regardless of whether its reporting is enabled or not",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "FATAL_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_FATAL_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_FATAL_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_FATAL_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_FATAL_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "NON_FATAL_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_NON_FATAL_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_NON_FATAL_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_NON_FATAL_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_NON_FATAL_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a non-fatal error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "CORR_ERR_DET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_CORR_ERR_DET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_CORR_ERR_DET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_CORR_ERR_DET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_CORR_ERR_DET_QW,
      ._desc = "Set to 1 by the core when it detects a correctable error, regardless of whether error reporting is enabled or not, and regardless of whether the error is masked",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1C"
    },
    { ._name = "FUNC_LEVEL_RESET",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_FUNC_LEVEL_RESET_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_FUNC_LEVEL_RESET_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_FUNC_LEVEL_RESET_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_FUNC_LEVEL_RESET_QW,
      ._desc = "Writing a 1 into this bit position generated a Function-Level Reset for the selected Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW1"
    },
    { ._name = "MAX_READ_REQ",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_MAX_READ_REQ_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_MAX_READ_REQ_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_MAX_READ_REQ_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_MAX_READ_REQ_QW,
      ._desc = "Specifies the maximum size allowed in read requests generated by the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NO_SNOOP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_NO_SNOOP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_NO_SNOOP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_NO_SNOOP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_NO_SNOOP_EN_QW,
      ._desc = "When set to 1, the device is allowed to set the No Snoop bit in initiated transactions in which cache coherency is not needed",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "AUX_POWER_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_AUX_POWER_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_AUX_POWER_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_AUX_POWER_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_AUX_POWER_EN_QW,
      ._desc = "Used only when device used aux power",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "PHANTOM_FUNC_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_PHANTOM_FUNC_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_PHANTOM_FUNC_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_PHANTOM_FUNC_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_PHANTOM_FUNC_EN_QW,
      ._desc = "Enables the use of Phantom Functions in generated requests from the master side",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TAG_FIELD_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_TAG_FIELD_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_TAG_FIELD_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_TAG_FIELD_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_TAG_FIELD_EN_QW,
      ._desc = "Enables the extension of the tag field from 5 to 8 bits",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "MAX_PAYLOAD",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_MAX_PAYLOAD_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_MAX_PAYLOAD_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_MAX_PAYLOAD_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_MAX_PAYLOAD_QW,
      ._desc = "Specifies the maximum TLP payload size configured",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RELAX_ORD_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_RELAX_ORD_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_RELAX_ORD_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_RELAX_ORD_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_RELAX_ORD_EN_QW,
      ._desc = "When set, this bit indicates that the device is allowed to set the Relaxed Ordering bit in the Attributes field of transactions initiated from it",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "UNS_REQ_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_UNS_REQ_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_UNS_REQ_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_UNS_REQ_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_UNS_REQ_REP_EN_QW,
      ._desc = "Enables the sending of error messages by the core on receiving unsupported requests",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "FATAL_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_FATAL_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_FATAL_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_FATAL_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_FATAL_REP_EN_QW,
      ._desc = "Enables the sending of ERR_FATAL messages by the core on the detection of fatal errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NONFATAL_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_NONFATAL_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_NONFATAL_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_NONFATAL_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_NONFATAL_REP_EN_QW,
      ._desc = "Enables the sending of ERR_NONFATAL messages by the core on the detection of non-fatal errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "COR_ERR_REP_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_3_COR_ERR_REP_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_3_COR_ERR_REP_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_3_COR_ERR_REP_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_3_COR_ERR_REP_EN_QW,
      ._desc = "Enables the sending of ERR_COR messages by the core on the detection of correctable errors",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_cntl_sts_2_3_detail[] = {
    { ._name = "RESERVED_63_36",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_63_36_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_63_36_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_63_36_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_63_36_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "SUP_LINK_SPEED",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_SUP_LINK_SPEED_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_SUP_LINK_SPEED_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_SUP_LINK_SPEED_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_SUP_LINK_SPEED_QW,
      ._desc = "This field indicates the supported link speeds of the core",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_32",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_32_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_32_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_32_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_32_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_31_15",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_31_15_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_31_15_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_31_15_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_31_15_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "OBFF_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_OBFF_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_OBFF_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_OBFF_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_OBFF_EN_QW,
      ._desc = "Enables the Optimized Buffer Flush/Fill (OBFF) capability in the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_12_11",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_12_11_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_12_11_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_12_11_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_12_11_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "LTR_MECH_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_LTR_MECH_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_LTR_MECH_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_LTR_MECH_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_LTR_MECH_EN_QW,
      ._desc = "This must be set to 1 to enable the Latency Tolerance Reporting Mechanism",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "IDO_COMP",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_IDO_COMP_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_IDO_COMP_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_IDO_COMP_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_IDO_COMP_QW,
      ._desc = "When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the Completions it generates",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "IDO_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_IDO_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_IDO_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_IDO_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_IDO_REQ_EN_QW,
      ._desc = "When this bit is 1, the Function is allowed to set the ID-based Ordering (IDO) Attribute bit in the requests it generates",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_7",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_7_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_7_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_7_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_7_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ATOM_OP_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_ATOM_OP_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_ATOM_OP_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_ATOM_OP_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_ATOM_OP_REQ_EN_QW,
      ._desc = "This bit must be set to enable the generation of Atomic Op Requests from the Function",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_5",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_5_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_5_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_5_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_RESERVED_5_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "CMP_TIMEOUT_DIS",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_CMP_TIMEOUT_DIS_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_CMP_TIMEOUT_DIS_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_CMP_TIMEOUT_DIS_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_CMP_TIMEOUT_DIS_QW,
      ._desc = "Setting this bit disables Completion Timeout in the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "CMP_TIMEOUT",
      ._bpos = AR_PI_DB_PCIE_CNTL_STS_2_3_CMP_TIMEOUT_BP,
      ._mask = AR_PI_DB_PCIE_CNTL_STS_2_3_CMP_TIMEOUT_MASK,
      ._rval = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA & AR_PI_DB_PCIE_CNTL_STS_2_3_CMP_TIMEOUT_MASK,
      ._index = AR_PI_DB_PCIE_CNTL_STS_2_3_CMP_TIMEOUT_QW,
      ._desc = "Specifies the Completion Timeout value for the device",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_pcie_tph_req_cntl_3_detail[] = {
    { ._name = "RESERVED_63_41",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_63_41_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_63_41_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_63_41_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_63_41_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TPH_REQ_EN",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_TPH_REQ_EN_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_TPH_REQ_EN_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_TPH_REQ_EN_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_TPH_REQ_EN_QW,
      ._desc = "When set to 1, the Function is allowed to generate requests with Transaction Processing Hints",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_39_35",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_39_35_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_39_35_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_39_35_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_39_35_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_MODE",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_MODE_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_MODE_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_MODE_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_MODE_QW,
      ._desc = "This field selects the ST mode (000 = No Steering Tag Mode,001 = Interrupt Vector Mode, 010 = Device-Specific Mode, other values are reserved)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_31_27",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_31_27_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_31_27_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_31_27_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_31_27_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_SIZE",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_SIZE_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_SIZE_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_SIZE_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_SIZE_QW,
      ._desc = "Specifies the number of entries in the Steering Tag Table (0 = 1 entry, 1 = 2 entries, and so on)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_15_11",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_15_11_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_15_11_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_15_11_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_15_11_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_LOC",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_LOC_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_LOC_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_LOC_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_LOC_QW,
      ._desc = "The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "EXT_TPH_REG_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_EXT_TPH_REG_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_EXT_TPH_REG_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_EXT_TPH_REG_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_EXT_TPH_REG_SUP_QW,
      ._desc = "When set to 1, indicates that the Function is capable of generating requests with a TPH TLP Prefix",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "ST_TABLE_LOC_WA",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_LOC_WA_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_LOC_WA_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_LOC_WA_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_ST_TABLE_LOC_WA_QW,
      ._desc = "The setting of this field indicates if a Steering Tag Table is implemented for this Function, and its location if present",
      ._type_bitmsk = 0x0000000000002006ull,
      ._access = "W"
    },
    { ._name = "RESERVED_7_3",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_7_3_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_7_3_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_7_3_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RESERVED_7_3_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "DEV_SPECMODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_DEV_SPECMODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_DEV_SPECMODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_DEV_SPECMODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_DEV_SPECMODE_SUP_QW,
      ._desc = "A setting of 1 indicates that the Function supports the Device- Specific Mode for TPH Steering Tag generation",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "INT_VECTMODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_INT_VECTMODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_INT_VECTMODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_INT_VECTMODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_INT_VECTMODE_SUP_QW,
      ._desc = "A setting of 1 indicates that the Function supports the Interrupt Vector Mode for TPH Steering Tag generation",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "NO_ST_MODE_SUP",
      ._bpos = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_NO_ST_MODE_SUP_BP,
      ._mask = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_NO_ST_MODE_SUP_MASK,
      ._rval = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA & AR_PI_DB_PCIE_TPH_REQ_CNTL_3_NO_ST_MODE_SUP_MASK,
      ._index = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_NO_ST_MODE_SUP_QW,
      ._desc = "When set to 1, indicates that this Function supports the ",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_phy_layer_cfg_detail[] = {
    { ._name = "TRANS_FTS_CNT_8",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_8_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_8_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_8_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_8_QW,
      ._desc = "FTS count transmitted by the core in TS1/TS2 sequences during link training",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TRANS_FTS_CNT_5",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_5_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_5_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_5_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_5_QW,
      ._desc = "FTS count transmitted by the core in TS1/TS2 sequences during link training",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "TRANS_FTS_CNT_2_5",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_2_5_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_2_5_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_2_5_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_TRANS_FTS_CNT_2_5_QW,
      ._desc = "FTS count transmitted by the core in TS1/TS2 sequences during link training",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_39_32",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_RESERVED_39_32_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_RESERVED_39_32_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_RESERVED_39_32_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_RESERVED_39_32_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "MASTER_LB_ENABLE",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_MASTER_LB_ENABLE_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_MASTER_LB_ENABLE_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_MASTER_LB_ENABLE_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_MASTER_LB_ENABLE_QW,
      ._desc = "When the core is operating as a Root Complex, setting this to 1 causes theLTSSM to initiate a loopback and become the loopback master",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_30",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_RESERVED_30_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_RESERVED_30_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_RESERVED_30_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_RESERVED_30_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "LTSSM_STATE",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_LTSSM_STATE_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_LTSSM_STATE_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_LTSSM_STATE_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_LTSSM_STATE_QW,
      ._desc = "Current state of the LTSSM",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RECV_LINK_ID",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_RECV_LINK_ID_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_RECV_LINK_ID_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_RECV_LINK_ID_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_RECV_LINK_ID_QW,
      ._desc = "Link id received from other side during link training",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RECV_FTS_CNT_2_5",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_RECV_FTS_CNT_2_5_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_RECV_FTS_CNT_2_5_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_RECV_FTS_CNT_2_5_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_RECV_FTS_CNT_2_5_QW,
      ._desc = "FTS count received from the other side during link training",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TX_SWING_SETTING",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_TX_SWING_SETTING_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_TX_SWING_SETTING_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_TX_SWING_SETTING_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_TX_SWING_SETTING_QW,
      ._desc = "This bit drives the PIPE_TX_SWING output of the core",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "ALL_PHY_ERR_RPT",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_ALL_PHY_ERR_RPT_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_ALL_PHY_ERR_RPT_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_ALL_PHY_ERR_RPT_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_ALL_PHY_ERR_RPT_QW,
      ._desc = "When this bit is set to 1, the core will report all phy errors detected at the PIPE interface, regardless of whether it caused packet corruption",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "NEG_SPEED",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_NEG_SPEED_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_NEG_SPEED_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_NEG_SPEED_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_NEG_SPEED_QW,
      ._desc = "Current operating speed of link (00 = 2",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "NEG_LANE_COUNT",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_NEG_LANE_COUNT_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_NEG_LANE_COUNT_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_NEG_LANE_COUNT_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_NEG_LANE_COUNT_QW,
      ._desc = "Lane count negotiated with other side during link training (000 = x1, 001 = x2, 010 = x4, 011 = x8, 100 = x16)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "LINK_STATUS",
      ._bpos = AR_PI_DB_PHY_LAYER_CFG_LINK_STATUS_BP,
      ._mask = AR_PI_DB_PHY_LAYER_CFG_LINK_STATUS_MASK,
      ._rval = AR_PI_DB_PHY_LAYER_CFG_RSTDATA & AR_PI_DB_PHY_LAYER_CFG_LINK_STATUS_MASK,
      ._index = AR_PI_DB_PHY_LAYER_CFG_LINK_STATUS_QW,
      ._desc = "Current state of link (1 = link training done, 0 = link training not complete)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_recv_credit_0_detail[] = {
    { ._name = "NONP_PAYL_CRED",
      ._bpos = AR_PI_DB_RECV_CREDIT_0_NONP_PAYL_CRED_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_0_NONP_PAYL_CRED_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_0_RSTDATA & AR_PI_DB_RECV_CREDIT_0_NONP_PAYL_CRED_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_0_NONP_PAYL_CRED_QW,
      ._desc = "Non-Posted payload credit limit advertised by the core for VC 0 (in units of 4 Dwords)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "POST_HEAD_CRED",
      ._bpos = AR_PI_DB_RECV_CREDIT_0_POST_HEAD_CRED_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_0_POST_HEAD_CRED_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_0_RSTDATA & AR_PI_DB_RECV_CREDIT_0_POST_HEAD_CRED_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_0_POST_HEAD_CRED_QW,
      ._desc = "Posted payload credit limit advertised by the core for VC 0 (in number of packets)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "POST_PAYL_CRED",
      ._bpos = AR_PI_DB_RECV_CREDIT_0_POST_PAYL_CRED_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_0_POST_PAYL_CRED_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_0_RSTDATA & AR_PI_DB_RECV_CREDIT_0_POST_PAYL_CRED_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_0_POST_PAYL_CRED_QW,
      ._desc = "Posted payload credit limit advertised by the core for VC 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_31_25",
      ._bpos = AR_PI_DB_RECV_CREDIT_0_RESERVED_31_25_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_0_RESERVED_31_25_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_0_RSTDATA & AR_PI_DB_RECV_CREDIT_0_RESERVED_31_25_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_0_RESERVED_31_25_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RECV_ACK_NAK_TO",
      ._bpos = AR_PI_DB_RECV_CREDIT_0_RECV_ACK_NAK_TO_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_0_RECV_ACK_NAK_TO_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_0_RSTDATA & AR_PI_DB_RECV_CREDIT_0_RECV_ACK_NAK_TO_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_0_RECV_ACK_NAK_TO_QW,
      ._desc = "Timeout setting of receive side CKNAK replay (in units of 4 ns)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_15_9",
      ._bpos = AR_PI_DB_RECV_CREDIT_0_RESERVED_15_9_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_0_RESERVED_15_9_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_0_RSTDATA & AR_PI_DB_RECV_CREDIT_0_RESERVED_15_9_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_0_RESERVED_15_9_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TRANS_REPLAY_TO",
      ._bpos = AR_PI_DB_RECV_CREDIT_0_TRANS_REPLAY_TO_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_0_TRANS_REPLAY_TO_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_0_RSTDATA & AR_PI_DB_RECV_CREDIT_0_TRANS_REPLAY_TO_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_0_TRANS_REPLAY_TO_QW,
      ._desc = "Transmit-side replay timer timeout value (in units of 4 ns)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_recv_credit_1_detail[] = {
    { ._name = "TRAN_NONP_PAYL",
      ._bpos = AR_PI_DB_RECV_CREDIT_1_TRAN_NONP_PAYL_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_1_TRAN_NONP_PAYL_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_1_RSTDATA & AR_PI_DB_RECV_CREDIT_1_TRAN_NONP_PAYL_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_1_TRAN_NONP_PAYL_QW,
      ._desc = "Non-Posted payload credit limit received by the core for Link 0 (in units of 4 DWORDs)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TRAN_POST_HEAD",
      ._bpos = AR_PI_DB_RECV_CREDIT_1_TRAN_POST_HEAD_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_1_TRAN_POST_HEAD_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_1_RSTDATA & AR_PI_DB_RECV_CREDIT_1_TRAN_POST_HEAD_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_1_TRAN_POST_HEAD_QW,
      ._desc = "Posted payload credit limit received by the core for this link (in number of packets)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "TRAN_POST_PAYL",
      ._bpos = AR_PI_DB_RECV_CREDIT_1_TRAN_POST_PAYL_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_1_TRAN_POST_PAYL_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_1_RSTDATA & AR_PI_DB_RECV_CREDIT_1_TRAN_POST_PAYL_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_1_TRAN_POST_PAYL_QW,
      ._desc = "Posted payload credit limit received by the core for this link (in units of 4 DWORDs)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RECV_COMP_HEAD",
      ._bpos = AR_PI_DB_RECV_CREDIT_1_RECV_COMP_HEAD_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_1_RECV_COMP_HEAD_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_1_RSTDATA & AR_PI_DB_RECV_CREDIT_1_RECV_COMP_HEAD_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_1_RECV_COMP_HEAD_QW,
      ._desc = "Completion header credit limit advertised by the core for VC 0 (in number of packets)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RESERVED_23_20",
      ._bpos = AR_PI_DB_RECV_CREDIT_1_RESERVED_23_20_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_1_RESERVED_23_20_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_1_RSTDATA & AR_PI_DB_RECV_CREDIT_1_RESERVED_23_20_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_1_RESERVED_23_20_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "RECV_COMP_PAYL",
      ._bpos = AR_PI_DB_RECV_CREDIT_1_RECV_COMP_PAYL_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_1_RECV_COMP_PAYL_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_1_RSTDATA & AR_PI_DB_RECV_CREDIT_1_RECV_COMP_PAYL_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_1_RECV_COMP_PAYL_QW,
      ._desc = "Completion payload credit limit advertised by the core for VC 0 (in units of 4 Dwords)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "RECV_NONP_HEAD",
      ._bpos = AR_PI_DB_RECV_CREDIT_1_RECV_NONP_HEAD_BP,
      ._mask = AR_PI_DB_RECV_CREDIT_1_RECV_NONP_HEAD_MASK,
      ._rval = AR_PI_DB_RECV_CREDIT_1_RSTDATA & AR_PI_DB_RECV_CREDIT_1_RECV_NONP_HEAD_MASK,
      ._index = AR_PI_DB_RECV_CREDIT_1_RECV_NONP_HEAD_QW,
      ._desc = "Non-Posted header credit limit advertised by the core for VC 0 (in number of packets)",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_recv_fts_count_detail[] = {
    { ._name = "RESERVED_63_48",
      ._bpos = AR_PI_DB_RECV_FTS_COUNT_RESERVED_63_48_BP,
      ._mask = AR_PI_DB_RECV_FTS_COUNT_RESERVED_63_48_MASK,
      ._rval = AR_PI_DB_RECV_FTS_COUNT_RSTDATA & AR_PI_DB_RECV_FTS_COUNT_RESERVED_63_48_MASK,
      ._index = AR_PI_DB_RECV_FTS_COUNT_RESERVED_63_48_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "RECV_FTS_CNT_8G",
      ._bpos = AR_PI_DB_RECV_FTS_COUNT_RECV_FTS_CNT_8G_BP,
      ._mask = AR_PI_DB_RECV_FTS_COUNT_RECV_FTS_CNT_8G_MASK,
      ._rval = AR_PI_DB_RECV_FTS_COUNT_RSTDATA & AR_PI_DB_RECV_FTS_COUNT_RECV_FTS_CNT_8G_MASK,
      ._index = AR_PI_DB_RECV_FTS_COUNT_RECV_FTS_CNT_8G_QW,
      ._desc = "FTS count received from the other side during link training for use at the 8 GT/s link speed",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "RECV_FTS_CNT_5G",
      ._bpos = AR_PI_DB_RECV_FTS_COUNT_RECV_FTS_CNT_5G_BP,
      ._mask = AR_PI_DB_RECV_FTS_COUNT_RECV_FTS_CNT_5G_MASK,
      ._rval = AR_PI_DB_RECV_FTS_COUNT_RSTDATA & AR_PI_DB_RECV_FTS_COUNT_RECV_FTS_CNT_5G_MASK,
      ._index = AR_PI_DB_RECV_FTS_COUNT_RECV_FTS_CNT_5G_QW,
      ._desc = "FTS count received from the other side during link training for use at the 5 GT/s link speed",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "RESERVED_31_17",
      ._bpos = AR_PI_DB_RECV_FTS_COUNT_RESERVED_31_17_BP,
      ._mask = AR_PI_DB_RECV_FTS_COUNT_RESERVED_31_17_MASK,
      ._rval = AR_PI_DB_RECV_FTS_COUNT_RSTDATA & AR_PI_DB_RECV_FTS_COUNT_RESERVED_31_17_MASK,
      ._index = AR_PI_DB_RECV_FTS_COUNT_RESERVED_31_17_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "LANE_REVERSAL",
      ._bpos = AR_PI_DB_RECV_FTS_COUNT_LANE_REVERSAL_BP,
      ._mask = AR_PI_DB_RECV_FTS_COUNT_LANE_REVERSAL_MASK,
      ._rval = AR_PI_DB_RECV_FTS_COUNT_RSTDATA & AR_PI_DB_RECV_FTS_COUNT_LANE_REVERSAL_MASK,
      ._index = AR_PI_DB_RECV_FTS_COUNT_LANE_REVERSAL_QW,
      ._desc = "This bit set by the core at the end of link training if the LTSSM had to reverse the lane numbers to form the link",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = "NEG_LANE_MAP",
      ._bpos = AR_PI_DB_RECV_FTS_COUNT_NEG_LANE_MAP_BP,
      ._mask = AR_PI_DB_RECV_FTS_COUNT_NEG_LANE_MAP_MASK,
      ._rval = AR_PI_DB_RECV_FTS_COUNT_RSTDATA & AR_PI_DB_RECV_FTS_COUNT_NEG_LANE_MAP_MASK,
      ._index = AR_PI_DB_RECV_FTS_COUNT_NEG_LANE_MAP_QW,
      ._desc = "Bit i of this field is set to 1 at the end of link training if Lane i is part of the PCIe link",
      ._type_bitmsk = 0x0000000000000004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_db_physical_cfg_reg_detail[] = {
    { ._name = "RESERVED_63_4",
      ._bpos = AR_PI_DB_PHYSICAL_CFG_REG_RESERVED_63_4_BP,
      ._mask = AR_PI_DB_PHYSICAL_CFG_REG_RESERVED_63_4_MASK,
      ._rval = AR_PI_DB_PHYSICAL_CFG_REG_RSTDATA & AR_PI_DB_PHYSICAL_CFG_REG_RESERVED_63_4_MASK,
      ._index = AR_PI_DB_PHYSICAL_CFG_REG_RESERVED_63_4_QW,
      ._desc = "Posted payload credit limit received by the core for this link (in units of 4 DWORDs)",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = "FUNC_3_ENABLE",
      ._bpos = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_3_ENABLE_BP,
      ._mask = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_3_ENABLE_MASK,
      ._rval = AR_PI_DB_PHYSICAL_CFG_REG_RSTDATA & AR_PI_DB_PHYSICAL_CFG_REG_FUNC_3_ENABLE_MASK,
      ._index = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_3_ENABLE_QW,
      ._desc = "Enable for Function 3",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "FUNC_2_ENABLE",
      ._bpos = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_2_ENABLE_BP,
      ._mask = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_2_ENABLE_MASK,
      ._rval = AR_PI_DB_PHYSICAL_CFG_REG_RSTDATA & AR_PI_DB_PHYSICAL_CFG_REG_FUNC_2_ENABLE_MASK,
      ._index = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_2_ENABLE_QW,
      ._desc = "Enable for Function 2",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "FUNC_1_ENABLE",
      ._bpos = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_1_ENABLE_BP,
      ._mask = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_1_ENABLE_MASK,
      ._rval = AR_PI_DB_PHYSICAL_CFG_REG_RSTDATA & AR_PI_DB_PHYSICAL_CFG_REG_FUNC_1_ENABLE_MASK,
      ._index = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_1_ENABLE_QW,
      ._desc = "Enable for Function 1",
      ._type_bitmsk = 0x0000000000002005ull,
      ._access = "RW"
    },
    { ._name = "FUNC_0_ENABLE",
      ._bpos = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_0_ENABLE_BP,
      ._mask = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_0_ENABLE_MASK,
      ._rval = AR_PI_DB_PHYSICAL_CFG_REG_RSTDATA & AR_PI_DB_PHYSICAL_CFG_REG_FUNC_0_ENABLE_MASK,
      ._index = AR_PI_DB_PHYSICAL_CFG_REG_FUNC_0_ENABLE_QW,
      ._desc = "Enable for Function 0",
      ._type_bitmsk = 0x0000000000002004ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_diag_inj_ram_detail[] = {
    { ._name = "ARRAY_DATA",
      ._bpos = AR_PI_DBG_DIAG_INJ_RAM_ARRAY_DATA_BP,
      ._mask = AR_PI_DBG_DIAG_INJ_RAM_ARRAY_DATA_MASK,
      ._rval = AR_PI_DBG_DIAG_INJ_RAM_RSTDATA & AR_PI_DBG_DIAG_INJ_RAM_ARRAY_DATA_MASK,
      ._index = AR_PI_DBG_DIAG_INJ_RAM_ARRAY_DATA_QW,
      ._desc = "Can not be read or written while an injection is in progress",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RW"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_diag_trans_ram_detail[] = {
    { ._name = "ARRAY_DATA",
      ._bpos = AR_PI_DBG_DIAG_TRANS_RAM_ARRAY_DATA_BP,
      ._mask = AR_PI_DBG_DIAG_TRANS_RAM_ARRAY_DATA_MASK,
      ._rval = AR_PI_DBG_DIAG_TRANS_RAM_RSTDATA & AR_PI_DBG_DIAG_TRANS_RAM_ARRAY_DATA_MASK,
      ._index = AR_PI_DBG_DIAG_TRANS_RAM_ARRAY_DATA_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};
static const cmmr_fr_t __ar_pi_dbg_diag_recv_ram_detail[] = {
    { ._name = "ARRAY_DATA",
      ._bpos = AR_PI_DBG_DIAG_RECV_RAM_ARRAY_DATA_BP,
      ._mask = AR_PI_DBG_DIAG_RECV_RAM_ARRAY_DATA_MASK,
      ._rval = AR_PI_DBG_DIAG_RECV_RAM_RSTDATA & AR_PI_DBG_DIAG_RECV_RAM_ARRAY_DATA_MASK,
      ._index = AR_PI_DBG_DIAG_RECV_RAM_ARRAY_DATA_QW,
      ._desc = "",
      ._type_bitmsk = 0x0000000000000009ull,
      ._access = "RO"
    },
    { ._name = NULL, ._bpos = 0, ._mask = 0, ._rval = 0, ._index = 0, ._desc = NULL, ._access = NULL }
};

/*
 *  AR PI_IP DESC MASK ARRAYS DECLARATIONS
 */

/*
 *  AR PI_IP MMR DECLARATIONS
 */
static const cmmr_br_t __ar_pi_cfg_den_ip = {
    ._name = "AR_PI_CFG_DEN_IP",
    ._addr = AR_PI_CFG_DEN_IP,
    ._rval.val = AR_PI_CFG_DEN_IP_RSTDATA,
    ._rmsk.val = AR_PI_CFG_DEN_IP_RSTMASK,
    ._wrmsk.val = AR_PI_CFG_DEN_IP_WRTMASK,
    ._rdmsk.val = AR_PI_CFG_DEN_IP_RDMASK,
    ._xsmsk.val = AR_PI_CFG_DEN_IP_XSMASK,
    ._wsemsk.val = AR_PI_CFG_DEN_IP_WSEMASK,
    ._rsemsk.val = AR_PI_CFG_DEN_IP_RSEMASK,
    ._w1smsk.val = AR_PI_CFG_DEN_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_CFG_DEN_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_CFG_DEN_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_CFG_DEN_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_CFG_DEN_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_cfg_den_ip_detail
};
static const cmmr_br_t __ar_pi_sts_den_ip = {
    ._name = "AR_PI_STS_DEN_IP",
    ._addr = AR_PI_STS_DEN_IP,
    ._rval.val = AR_PI_STS_DEN_IP_RSTDATA,
    ._rmsk.val = AR_PI_STS_DEN_IP_RSTMASK,
    ._wrmsk.val = AR_PI_STS_DEN_IP_WRTMASK,
    ._rdmsk.val = AR_PI_STS_DEN_IP_RDMASK,
    ._xsmsk.val = AR_PI_STS_DEN_IP_XSMASK,
    ._wsemsk.val = AR_PI_STS_DEN_IP_WSEMASK,
    ._rsemsk.val = AR_PI_STS_DEN_IP_RSEMASK,
    ._w1smsk.val = AR_PI_STS_DEN_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_STS_DEN_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_STS_DEN_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_STS_DEN_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_STS_DEN_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_pi_sts_den_ip_detail
};
static const cmmr_br_t __ar_pi_err_flg_ip = {
    ._name = "AR_PI_ERR_FLG_IP",
    ._addr = AR_PI_ERR_FLG_IP,
    ._rval.val = AR_PI_ERR_FLG_IP_RSTDATA,
    ._rmsk.val = AR_PI_ERR_FLG_IP_RSTMASK,
    ._wrmsk.val = AR_PI_ERR_FLG_IP_WRTMASK,
    ._rdmsk.val = AR_PI_ERR_FLG_IP_RDMASK,
    ._xsmsk.val = AR_PI_ERR_FLG_IP_XSMASK,
    ._wsemsk.val = AR_PI_ERR_FLG_IP_WSEMASK,
    ._rsemsk.val = AR_PI_ERR_FLG_IP_RSEMASK,
    ._w1smsk.val = AR_PI_ERR_FLG_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_ERR_FLG_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_ERR_FLG_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_ERR_FLG_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_ERR_FLG_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x000000000018c011ull,
    ._info = __ar_pi_err_flg_ip_detail
};
static const cmmr_br_t __ar_pi_err_clr_ip = {
    ._name = "AR_PI_ERR_CLR_IP",
    ._addr = AR_PI_ERR_CLR_IP,
    ._rval.val = AR_PI_ERR_CLR_IP_RSTDATA,
    ._rmsk.val = AR_PI_ERR_CLR_IP_RSTMASK,
    ._wrmsk.val = AR_PI_ERR_CLR_IP_WRTMASK,
    ._rdmsk.val = AR_PI_ERR_CLR_IP_RDMASK,
    ._xsmsk.val = AR_PI_ERR_CLR_IP_XSMASK,
    ._wsemsk.val = AR_PI_ERR_CLR_IP_WSEMASK,
    ._rsemsk.val = AR_PI_ERR_CLR_IP_RSEMASK,
    ._w1smsk.val = AR_PI_ERR_CLR_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_ERR_CLR_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_ERR_CLR_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_ERR_CLR_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_ERR_CLR_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000021ull,
    ._info = __ar_pi_err_clr_ip_detail
};
static const cmmr_br_t __ar_pi_err_hss_msk_ip = {
    ._name = "AR_PI_ERR_HSS_MSK_IP",
    ._addr = AR_PI_ERR_HSS_MSK_IP,
    ._rval.val = AR_PI_ERR_HSS_MSK_IP_RSTDATA,
    ._rmsk.val = AR_PI_ERR_HSS_MSK_IP_RSTMASK,
    ._wrmsk.val = AR_PI_ERR_HSS_MSK_IP_WRTMASK,
    ._rdmsk.val = AR_PI_ERR_HSS_MSK_IP_RDMASK,
    ._xsmsk.val = AR_PI_ERR_HSS_MSK_IP_XSMASK,
    ._wsemsk.val = AR_PI_ERR_HSS_MSK_IP_WSEMASK,
    ._rsemsk.val = AR_PI_ERR_HSS_MSK_IP_RSEMASK,
    ._w1smsk.val = AR_PI_ERR_HSS_MSK_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_ERR_HSS_MSK_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_ERR_HSS_MSK_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_ERR_HSS_MSK_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_ERR_HSS_MSK_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000041ull,
    ._info = __ar_pi_err_hss_msk_ip_detail
};
static const cmmr_br_t __ar_pi_err_os_msk_ip = {
    ._name = "AR_PI_ERR_OS_MSK_IP",
    ._addr = AR_PI_ERR_OS_MSK_IP,
    ._rval.val = AR_PI_ERR_OS_MSK_IP_RSTDATA,
    ._rmsk.val = AR_PI_ERR_OS_MSK_IP_RSTMASK,
    ._wrmsk.val = AR_PI_ERR_OS_MSK_IP_WRTMASK,
    ._rdmsk.val = AR_PI_ERR_OS_MSK_IP_RDMASK,
    ._xsmsk.val = AR_PI_ERR_OS_MSK_IP_XSMASK,
    ._wsemsk.val = AR_PI_ERR_OS_MSK_IP_WSEMASK,
    ._rsemsk.val = AR_PI_ERR_OS_MSK_IP_RSEMASK,
    ._w1smsk.val = AR_PI_ERR_OS_MSK_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_ERR_OS_MSK_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_ERR_OS_MSK_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_ERR_OS_MSK_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_ERR_OS_MSK_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000081ull,
    ._info = __ar_pi_err_os_msk_ip_detail
};
static const cmmr_br_t __ar_pi_err_first_flg_ip = {
    ._name = "AR_PI_ERR_FIRST_FLG_IP",
    ._addr = AR_PI_ERR_FIRST_FLG_IP,
    ._rval.val = AR_PI_ERR_FIRST_FLG_IP_RSTDATA,
    ._rmsk.val = AR_PI_ERR_FIRST_FLG_IP_RSTMASK,
    ._wrmsk.val = AR_PI_ERR_FIRST_FLG_IP_WRTMASK,
    ._rdmsk.val = AR_PI_ERR_FIRST_FLG_IP_RDMASK,
    ._xsmsk.val = AR_PI_ERR_FIRST_FLG_IP_XSMASK,
    ._wsemsk.val = AR_PI_ERR_FIRST_FLG_IP_WSEMASK,
    ._rsemsk.val = AR_PI_ERR_FIRST_FLG_IP_RSEMASK,
    ._w1smsk.val = AR_PI_ERR_FIRST_FLG_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_ERR_FIRST_FLG_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_ERR_FIRST_FLG_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_ERR_FIRST_FLG_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_ERR_FIRST_FLG_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000401ull,
    ._info = __ar_pi_err_first_flg_ip_detail
};
static const cmmr_br_t __ar_pi_phy_status_den_ip = {
    ._name = "AR_PI_PHY_STATUS_DEN_IP",
    ._addr = AR_PI_PHY_STATUS_DEN_IP,
    ._rval.val = AR_PI_PHY_STATUS_DEN_IP_RSTDATA,
    ._rmsk.val = AR_PI_PHY_STATUS_DEN_IP_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_STATUS_DEN_IP_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_STATUS_DEN_IP_RDMASK,
    ._xsmsk.val = AR_PI_PHY_STATUS_DEN_IP_XSMASK,
    ._wsemsk.val = AR_PI_PHY_STATUS_DEN_IP_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_STATUS_DEN_IP_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_STATUS_DEN_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_STATUS_DEN_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_STATUS_DEN_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_STATUS_DEN_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_STATUS_DEN_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_status_den_ip_detail
};
static const cmmr_br_t __ar_pi_phy_equal_den_ip = {
    ._name = "AR_PI_PHY_EQUAL_DEN_IP",
    ._addr = AR_PI_PHY_EQUAL_DEN_IP,
    ._rval.val = AR_PI_PHY_EQUAL_DEN_IP_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_DEN_IP_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_DEN_IP_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_DEN_IP_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_DEN_IP_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_DEN_IP_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_DEN_IP_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_DEN_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_DEN_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_DEN_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_DEN_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_DEN_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_den_ip_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_0 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_0",
    ._addr = AR_PI_PHY_EQUAL_COEFF_0,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_0_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_0_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_0_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_0_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_0_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_0_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_0_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_0_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_0_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_0_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_0_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_1 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_1",
    ._addr = AR_PI_PHY_EQUAL_COEFF_1,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_1_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_1_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_1_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_1_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_1_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_1_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_1_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_1_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_1_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_1_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_1_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_2 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_2",
    ._addr = AR_PI_PHY_EQUAL_COEFF_2,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_2_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_2_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_2_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_2_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_2_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_2_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_2_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_2_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_2_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_2_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_2_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_3 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_3",
    ._addr = AR_PI_PHY_EQUAL_COEFF_3,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_3_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_3_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_3_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_3_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_3_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_3_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_3_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_3_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_3_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_3_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_3_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_4 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_4",
    ._addr = AR_PI_PHY_EQUAL_COEFF_4,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_4_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_4_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_4_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_4_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_4_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_4_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_4_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_4_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_4_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_4_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_4_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_4_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_4_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_5 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_5",
    ._addr = AR_PI_PHY_EQUAL_COEFF_5,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_5_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_5_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_5_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_5_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_5_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_5_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_5_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_5_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_5_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_5_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_5_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_5_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_5_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_6 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_6",
    ._addr = AR_PI_PHY_EQUAL_COEFF_6,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_6_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_6_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_6_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_6_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_6_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_6_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_6_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_6_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_6_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_6_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_6_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_6_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_6_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_7 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_7",
    ._addr = AR_PI_PHY_EQUAL_COEFF_7,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_7_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_7_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_7_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_7_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_7_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_7_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_7_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_7_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_7_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_7_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_7_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_7_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_7_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_8 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_8",
    ._addr = AR_PI_PHY_EQUAL_COEFF_8,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_8_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_8_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_8_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_8_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_8_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_8_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_8_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_8_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_8_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_8_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_8_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_8_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_8_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_9 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_9",
    ._addr = AR_PI_PHY_EQUAL_COEFF_9,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_9_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_9_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_9_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_9_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_9_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_9_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_9_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_9_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_9_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_9_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_9_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_9_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_9_detail
};
static const cmmr_br_t __ar_pi_phy_equal_coeff_10 = {
    ._name = "AR_PI_PHY_EQUAL_COEFF_10",
    ._addr = AR_PI_PHY_EQUAL_COEFF_10,
    ._rval.val = AR_PI_PHY_EQUAL_COEFF_10_RSTDATA,
    ._rmsk.val = AR_PI_PHY_EQUAL_COEFF_10_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_EQUAL_COEFF_10_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_EQUAL_COEFF_10_RDMASK,
    ._xsmsk.val = AR_PI_PHY_EQUAL_COEFF_10_XSMASK,
    ._wsemsk.val = AR_PI_PHY_EQUAL_COEFF_10_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_EQUAL_COEFF_10_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_EQUAL_COEFF_10_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_EQUAL_COEFF_10_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_EQUAL_COEFF_10_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_EQUAL_COEFF_10_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_EQUAL_COEFF_10_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_phy_equal_coeff_10_detail
};
static const cmmr_br_t __ar_pi_pmi_pclk_cfg = {
    ._name = "AR_PI_PMI_PCLK_CFG",
    ._addr = AR_PI_PMI_PCLK_CFG,
    ._rval.val = AR_PI_PMI_PCLK_CFG_RSTDATA,
    ._rmsk.val = AR_PI_PMI_PCLK_CFG_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_PCLK_CFG_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_PCLK_CFG_RDMASK,
    ._xsmsk.val = AR_PI_PMI_PCLK_CFG_XSMASK,
    ._wsemsk.val = AR_PI_PMI_PCLK_CFG_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_PCLK_CFG_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_PCLK_CFG_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_PCLK_CFG_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_PCLK_CFG_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_PCLK_CFG_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_PCLK_CFG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_pmi_pclk_cfg_detail
};
static const cmmr_br_t __ar_pi_pmi_dbg_errinj_preq = {
    ._name = "AR_PI_PMI_DBG_ERRINJ_PREQ",
    ._addr = AR_PI_PMI_DBG_ERRINJ_PREQ,
    ._rval.val = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTDATA,
    ._rmsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_RDMASK,
    ._xsmsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_XSMASK,
    ._wsemsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_DBG_ERRINJ_PREQ_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pmi_dbg_errinj_preq_detail
};
static const cmmr_br_t __ar_pi_pmi_dbg_errinj_prsp_hal = {
    ._name = "AR_PI_PMI_DBG_ERRINJ_PRSP_HAL",
    ._addr = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL,
    ._rval.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_RSTDATA,
    ._rmsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_RDMASK,
    ._xsmsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_XSMASK,
    ._wsemsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_DBG_ERRINJ_PRSP_HAL_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pmi_dbg_errinj_prsp_hal_detail
};
static const cmmr_br_t __ar_pi_pmi_fifo2_err_flg = {
    ._name = "AR_PI_PMI_FIFO2_ERR_FLG",
    ._addr = AR_PI_PMI_FIFO2_ERR_FLG,
    ._rval.val = AR_PI_PMI_FIFO2_ERR_FLG_RSTDATA,
    ._rmsk.val = AR_PI_PMI_FIFO2_ERR_FLG_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_FIFO2_ERR_FLG_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_FIFO2_ERR_FLG_RDMASK,
    ._xsmsk.val = AR_PI_PMI_FIFO2_ERR_FLG_XSMASK,
    ._wsemsk.val = AR_PI_PMI_FIFO2_ERR_FLG_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_FIFO2_ERR_FLG_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_FIFO2_ERR_FLG_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_FIFO2_ERR_FLG_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_FIFO2_ERR_FLG_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_FIFO2_ERR_FLG_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_FIFO2_ERR_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x000000000010c011ull,
    ._info = __ar_pi_pmi_fifo2_err_flg_detail
};
static const cmmr_br_t __ar_pi_pmi_fifo2_err_clr = {
    ._name = "AR_PI_PMI_FIFO2_ERR_CLR",
    ._addr = AR_PI_PMI_FIFO2_ERR_CLR,
    ._rval.val = AR_PI_PMI_FIFO2_ERR_CLR_RSTDATA,
    ._rmsk.val = AR_PI_PMI_FIFO2_ERR_CLR_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_FIFO2_ERR_CLR_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_FIFO2_ERR_CLR_RDMASK,
    ._xsmsk.val = AR_PI_PMI_FIFO2_ERR_CLR_XSMASK,
    ._wsemsk.val = AR_PI_PMI_FIFO2_ERR_CLR_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_FIFO2_ERR_CLR_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_FIFO2_ERR_CLR_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_FIFO2_ERR_CLR_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_FIFO2_ERR_CLR_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_FIFO2_ERR_CLR_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_FIFO2_ERR_CLR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000021ull,
    ._info = __ar_pi_pmi_fifo2_err_clr_detail
};
static const cmmr_br_t __ar_pi_pmi_fifo2_err_hss_msk = {
    ._name = "AR_PI_PMI_FIFO2_ERR_HSS_MSK",
    ._addr = AR_PI_PMI_FIFO2_ERR_HSS_MSK,
    ._rval.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTDATA,
    ._rmsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RDMASK,
    ._xsmsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_XSMASK,
    ._wsemsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_FIFO2_ERR_HSS_MSK_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000041ull,
    ._info = __ar_pi_pmi_fifo2_err_hss_msk_detail
};
static const cmmr_br_t __ar_pi_pmi_fifo2_err_os_msk = {
    ._name = "AR_PI_PMI_FIFO2_ERR_OS_MSK",
    ._addr = AR_PI_PMI_FIFO2_ERR_OS_MSK,
    ._rval.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTDATA,
    ._rmsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_RDMASK,
    ._xsmsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_XSMASK,
    ._wsemsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_FIFO2_ERR_OS_MSK_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000081ull,
    ._info = __ar_pi_pmi_fifo2_err_os_msk_detail
};
static const cmmr_br_t __ar_pi_pmi_fifo2_err_first_flg = {
    ._name = "AR_PI_PMI_FIFO2_ERR_FIRST_FLG",
    ._addr = AR_PI_PMI_FIFO2_ERR_FIRST_FLG,
    ._rval.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTDATA,
    ._rmsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RDMASK,
    ._xsmsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_XSMASK,
    ._wsemsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_FIFO2_ERR_FIRST_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000401ull,
    ._info = __ar_pi_pmi_fifo2_err_first_flg_detail
};
static const cmmr_br_t __ar_pi_pmi_mbe_err_info2 = {
    ._name = "AR_PI_PMI_MBE_ERR_INFO2",
    ._addr = AR_PI_PMI_MBE_ERR_INFO2,
    ._rval.val = AR_PI_PMI_MBE_ERR_INFO2_RSTDATA,
    ._rmsk.val = AR_PI_PMI_MBE_ERR_INFO2_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_MBE_ERR_INFO2_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_MBE_ERR_INFO2_RDMASK,
    ._xsmsk.val = AR_PI_PMI_MBE_ERR_INFO2_XSMASK,
    ._wsemsk.val = AR_PI_PMI_MBE_ERR_INFO2_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_MBE_ERR_INFO2_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_MBE_ERR_INFO2_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_MBE_ERR_INFO2_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_MBE_ERR_INFO2_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_MBE_ERR_INFO2_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_MBE_ERR_INFO2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_pmi_mbe_err_info2_detail
};
static const cmmr_br_t __ar_pi_pmi_sbe_err_info2 = {
    ._name = "AR_PI_PMI_SBE_ERR_INFO2",
    ._addr = AR_PI_PMI_SBE_ERR_INFO2,
    ._rval.val = AR_PI_PMI_SBE_ERR_INFO2_RSTDATA,
    ._rmsk.val = AR_PI_PMI_SBE_ERR_INFO2_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_SBE_ERR_INFO2_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_SBE_ERR_INFO2_RDMASK,
    ._xsmsk.val = AR_PI_PMI_SBE_ERR_INFO2_XSMASK,
    ._wsemsk.val = AR_PI_PMI_SBE_ERR_INFO2_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_SBE_ERR_INFO2_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_SBE_ERR_INFO2_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_SBE_ERR_INFO2_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_SBE_ERR_INFO2_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_SBE_ERR_INFO2_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_SBE_ERR_INFO2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_pmi_sbe_err_info2_detail
};
static const cmmr_br_t __ar_pi_pmi_preq_ptc0_stall_duration = {
    ._name = "AR_PI_PMI_PREQ_PTC0_STALL_DURATION",
    ._addr = AR_PI_PMI_PREQ_PTC0_STALL_DURATION,
    ._rval.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_RSTDATA,
    ._rmsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_RDMASK,
    ._xsmsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_XSMASK,
    ._wsemsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_PREQ_PTC0_STALL_DURATION_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000008ull,
    ._info = __ar_pi_pmi_preq_ptc0_stall_duration_detail
};
static const cmmr_br_t __ar_pi_pmi_preq_ptc1_stall_duration = {
    ._name = "AR_PI_PMI_PREQ_PTC1_STALL_DURATION",
    ._addr = AR_PI_PMI_PREQ_PTC1_STALL_DURATION,
    ._rval.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_RSTDATA,
    ._rmsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_RDMASK,
    ._xsmsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_XSMASK,
    ._wsemsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_PREQ_PTC1_STALL_DURATION_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000008ull,
    ._info = __ar_pi_pmi_preq_ptc1_stall_duration_detail
};
static const cmmr_br_t __ar_pi_pmi_preq_ptc2_stall_duration = {
    ._name = "AR_PI_PMI_PREQ_PTC2_STALL_DURATION",
    ._addr = AR_PI_PMI_PREQ_PTC2_STALL_DURATION,
    ._rval.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_RSTDATA,
    ._rmsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_RDMASK,
    ._xsmsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_XSMASK,
    ._wsemsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_PREQ_PTC2_STALL_DURATION_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000008ull,
    ._info = __ar_pi_pmi_preq_ptc2_stall_duration_detail
};
static const cmmr_br_t __ar_pi_pmi_preq_hal_stall_duration = {
    ._name = "AR_PI_PMI_PREQ_HAL_STALL_DURATION",
    ._addr = AR_PI_PMI_PREQ_HAL_STALL_DURATION,
    ._rval.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_RSTDATA,
    ._rmsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_RDMASK,
    ._xsmsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_XSMASK,
    ._wsemsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_PREQ_HAL_STALL_DURATION_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000008ull,
    ._info = __ar_pi_pmi_preq_hal_stall_duration_detail
};
static const cmmr_br_t __ar_pi_pmi_prsp_hal_stall_duration = {
    ._name = "AR_PI_PMI_PRSP_HAL_STALL_DURATION",
    ._addr = AR_PI_PMI_PRSP_HAL_STALL_DURATION,
    ._rval.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_RSTDATA,
    ._rmsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_RSTMASK,
    ._wrmsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_WRTMASK,
    ._rdmsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_RDMASK,
    ._xsmsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_XSMASK,
    ._wsemsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_WSEMASK,
    ._rsemsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_RSEMASK,
    ._w1smsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_W1SMASK,
    ._w1cmsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_W1CMASK,
    ._wrstmsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_WRSTMASK,
    ._hwwmsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_HWWMASK,
    ._hwrmsk.val = AR_PI_PMI_PRSP_HAL_STALL_DURATION_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000008ull,
    ._info = __ar_pi_pmi_prsp_hal_stall_duration_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_cfg = {
    ._name = "AR_PI_PII_PCLK_CFG",
    ._addr = AR_PI_PII_PCLK_CFG,
    ._rval.val = AR_PI_PII_PCLK_CFG_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_CFG_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_CFG_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_CFG_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_CFG_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_CFG_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_CFG_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_CFG_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_CFG_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_CFG_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_CFG_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_CFG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pii_pclk_cfg_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_dbg_errinj_fifo = {
    ._name = "AR_PI_PII_PCLK_DBG_ERRINJ_FIFO",
    ._addr = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO,
    ._rval.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_DBG_ERRINJ_FIFO_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pii_pclk_dbg_errinj_fifo_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_err_flg = {
    ._name = "AR_PI_PII_PCLK_ERR_FLG",
    ._addr = AR_PI_PII_PCLK_ERR_FLG,
    ._rval.val = AR_PI_PII_PCLK_ERR_FLG_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_ERR_FLG_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_ERR_FLG_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_ERR_FLG_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_ERR_FLG_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_ERR_FLG_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_ERR_FLG_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_ERR_FLG_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_ERR_FLG_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_ERR_FLG_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_ERR_FLG_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_ERR_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x000000000018c811ull,
    ._info = __ar_pi_pii_pclk_err_flg_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_err_clr = {
    ._name = "AR_PI_PII_PCLK_ERR_CLR",
    ._addr = AR_PI_PII_PCLK_ERR_CLR,
    ._rval.val = AR_PI_PII_PCLK_ERR_CLR_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_ERR_CLR_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_ERR_CLR_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_ERR_CLR_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_ERR_CLR_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_ERR_CLR_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_ERR_CLR_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_ERR_CLR_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_ERR_CLR_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_ERR_CLR_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_ERR_CLR_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_ERR_CLR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000821ull,
    ._info = __ar_pi_pii_pclk_err_clr_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_err_hss_msk = {
    ._name = "AR_PI_PII_PCLK_ERR_HSS_MSK",
    ._addr = AR_PI_PII_PCLK_ERR_HSS_MSK,
    ._rval.val = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_ERR_HSS_MSK_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000841ull,
    ._info = __ar_pi_pii_pclk_err_hss_msk_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_err_os_msk = {
    ._name = "AR_PI_PII_PCLK_ERR_OS_MSK",
    ._addr = AR_PI_PII_PCLK_ERR_OS_MSK,
    ._rval.val = AR_PI_PII_PCLK_ERR_OS_MSK_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_ERR_OS_MSK_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000881ull,
    ._info = __ar_pi_pii_pclk_err_os_msk_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_err_first_flg = {
    ._name = "AR_PI_PII_PCLK_ERR_FIRST_FLG",
    ._addr = AR_PI_PII_PCLK_ERR_FIRST_FLG,
    ._rval.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_ERR_FIRST_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000c01ull,
    ._info = __ar_pi_pii_pclk_err_first_flg_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_err_info_mbe = {
    ._name = "AR_PI_PII_PCLK_ERR_INFO_MBE",
    ._addr = AR_PI_PII_PCLK_ERR_INFO_MBE,
    ._rval.val = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_ERR_INFO_MBE_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pii_pclk_err_info_mbe_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_err_info_sbe = {
    ._name = "AR_PI_PII_PCLK_ERR_INFO_SBE",
    ._addr = AR_PI_PII_PCLK_ERR_INFO_SBE,
    ._rval.val = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_ERR_INFO_SBE_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pii_pclk_err_info_sbe_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_err_info_msg_addr = {
    ._name = "AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR",
    ._addr = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR,
    ._rval.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_ADDR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pii_pclk_err_info_msg_addr_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_err_info_msg_data = {
    ._name = "AR_PI_PII_PCLK_ERR_INFO_MSG_DATA",
    ._addr = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA,
    ._rval.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_ERR_INFO_MSG_DATA_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pii_pclk_err_info_msg_data_detail
};
static const cmmr_br_t __ar_pi_pii_pclk_msg_stall_duration = {
    ._name = "AR_PI_PII_PCLK_MSG_STALL_DURATION",
    ._addr = AR_PI_PII_PCLK_MSG_STALL_DURATION,
    ._rval.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_RSTDATA,
    ._rmsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_RSTMASK,
    ._wrmsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_WRTMASK,
    ._rdmsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_RDMASK,
    ._xsmsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_XSMASK,
    ._wsemsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_WSEMASK,
    ._rsemsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_RSEMASK,
    ._w1smsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_W1SMASK,
    ._w1cmsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_W1CMASK,
    ._wrstmsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_WRSTMASK,
    ._hwwmsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_HWWMASK,
    ._hwrmsk.val = AR_PI_PII_PCLK_MSG_STALL_DURATION_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000809ull,
    ._info = __ar_pi_pii_pclk_msg_stall_duration_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_cfg = {
    ._name = "AR_PI_PTI_PCLK_CFG",
    ._addr = AR_PI_PTI_PCLK_CFG,
    ._rval.val = AR_PI_PTI_PCLK_CFG_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_CFG_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_CFG_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_CFG_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_CFG_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_CFG_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_CFG_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_CFG_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_CFG_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_CFG_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_CFG_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_CFG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pti_pclk_cfg_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_dbg_errinj_fifo = {
    ._name = "AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO",
    ._addr = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO,
    ._rval.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_FIFO_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pti_pclk_dbg_errinj_fifo_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_dbg_errinj_hal = {
    ._name = "AR_PI_PTI_PCLK_DBG_ERRINJ_HAL",
    ._addr = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL,
    ._rval.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_DBG_ERRINJ_HAL_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pti_pclk_dbg_errinj_hal_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_err_flg = {
    ._name = "AR_PI_PTI_PCLK_ERR_FLG",
    ._addr = AR_PI_PTI_PCLK_ERR_FLG,
    ._rval.val = AR_PI_PTI_PCLK_ERR_FLG_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_ERR_FLG_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_ERR_FLG_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_ERR_FLG_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_ERR_FLG_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_ERR_FLG_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_ERR_FLG_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_ERR_FLG_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_ERR_FLG_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_ERR_FLG_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_ERR_FLG_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_ERR_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x000000000018c811ull,
    ._info = __ar_pi_pti_pclk_err_flg_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_err_clr = {
    ._name = "AR_PI_PTI_PCLK_ERR_CLR",
    ._addr = AR_PI_PTI_PCLK_ERR_CLR,
    ._rval.val = AR_PI_PTI_PCLK_ERR_CLR_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_ERR_CLR_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_ERR_CLR_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_ERR_CLR_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_ERR_CLR_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_ERR_CLR_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_ERR_CLR_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_ERR_CLR_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_ERR_CLR_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_ERR_CLR_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_ERR_CLR_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_ERR_CLR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000821ull,
    ._info = __ar_pi_pti_pclk_err_clr_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_err_hss_msk = {
    ._name = "AR_PI_PTI_PCLK_ERR_HSS_MSK",
    ._addr = AR_PI_PTI_PCLK_ERR_HSS_MSK,
    ._rval.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_ERR_HSS_MSK_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000841ull,
    ._info = __ar_pi_pti_pclk_err_hss_msk_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_err_os_msk = {
    ._name = "AR_PI_PTI_PCLK_ERR_OS_MSK",
    ._addr = AR_PI_PTI_PCLK_ERR_OS_MSK,
    ._rval.val = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_ERR_OS_MSK_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000881ull,
    ._info = __ar_pi_pti_pclk_err_os_msk_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_err_first_flg = {
    ._name = "AR_PI_PTI_PCLK_ERR_FIRST_FLG",
    ._addr = AR_PI_PTI_PCLK_ERR_FIRST_FLG,
    ._rval.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_ERR_FIRST_FLG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000c01ull,
    ._info = __ar_pi_pti_pclk_err_first_flg_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_err_info_ecc = {
    ._name = "AR_PI_PTI_PCLK_ERR_INFO_ECC",
    ._addr = AR_PI_PTI_PCLK_ERR_INFO_ECC,
    ._rval.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_ERR_INFO_ECC_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pti_pclk_err_info_ecc_detail
};
static const cmmr_br_t __ar_pi_pti_pclk_err_info_misc = {
    ._name = "AR_PI_PTI_PCLK_ERR_INFO_MISC",
    ._addr = AR_PI_PTI_PCLK_ERR_INFO_MISC,
    ._rval.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_RSTDATA,
    ._rmsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_RSTMASK,
    ._wrmsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_WRTMASK,
    ._rdmsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_RDMASK,
    ._xsmsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_XSMASK,
    ._wsemsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_WSEMASK,
    ._rsemsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_RSEMASK,
    ._w1smsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_W1SMASK,
    ._w1cmsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_W1CMASK,
    ._wrstmsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_WRSTMASK,
    ._hwwmsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_HWWMASK,
    ._hwrmsk.val = AR_PI_PTI_PCLK_ERR_INFO_MISC_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pti_pclk_err_info_misc_detail
};
static const cmmr_br_t __ar_pi_pm_pclk_dbg_errinj_cntr_perr = {
    ._name = "AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR",
    ._addr = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR,
    ._rval.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_RSTDATA,
    ._rmsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_RSTMASK,
    ._wrmsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_WRTMASK,
    ._rdmsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_RDMASK,
    ._xsmsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_XSMASK,
    ._wsemsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_WSEMASK,
    ._rsemsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_RSEMASK,
    ._w1smsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_W1SMASK,
    ._w1cmsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_W1CMASK,
    ._wrstmsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_WRSTMASK,
    ._hwwmsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_HWWMASK,
    ._hwrmsk.val = AR_PI_PM_PCLK_DBG_ERRINJ_CNTR_PERR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pm_pclk_dbg_errinj_cntr_perr_detail
};
static const cmmr_br_t __ar_pi_pm_pclk_err_info_cntr_perr = {
    ._name = "AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR",
    ._addr = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR,
    ._rval.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_RSTDATA,
    ._rmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_RSTMASK,
    ._wrmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_WRTMASK,
    ._rdmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_RDMASK,
    ._xsmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_XSMASK,
    ._wsemsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_WSEMASK,
    ._rsemsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_RSEMASK,
    ._w1smsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_W1SMASK,
    ._w1cmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_W1CMASK,
    ._wrstmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_WRSTMASK,
    ._hwwmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_HWWMASK,
    ._hwrmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000801ull,
    ._info = __ar_pi_pm_pclk_err_info_cntr_perr_detail
};
static const cmmr_br_t __ar_pi_pm_pclk_err_info_cntr_perr_cnt = {
    ._name = "AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT",
    ._addr = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT,
    ._rval.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_RSTDATA,
    ._rmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_RSTMASK,
    ._wrmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_WRTMASK,
    ._rdmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_RDMASK,
    ._xsmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_XSMASK,
    ._wsemsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_WSEMASK,
    ._rsemsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_RSEMASK,
    ._w1smsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_W1SMASK,
    ._w1cmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_W1CMASK,
    ._wrstmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_WRSTMASK,
    ._hwwmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_HWWMASK,
    ._hwrmsk.val = AR_PI_PM_PCLK_ERR_INFO_CNTR_PERR_CNT_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000009ull,
    ._info = __ar_pi_pm_pclk_err_info_cntr_perr_cnt_detail
};
static const cmmr_br_t __ar_pi_pm_pclk_event_cntr_ctrl = {
    ._name = "AR_PI_PM_PCLK_EVENT_CNTR_CTRL",
    ._addr = AR_PI_PM_PCLK_EVENT_CNTR_CTRL,
    ._rval.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_RSTDATA,
    ._rmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_RSTMASK,
    ._wrmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_WRTMASK,
    ._rdmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_RDMASK,
    ._xsmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_XSMASK,
    ._wsemsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_WSEMASK,
    ._rsemsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_RSEMASK,
    ._w1smsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_W1SMASK,
    ._w1cmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_W1CMASK,
    ._wrstmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_WRSTMASK,
    ._hwwmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_HWWMASK,
    ._hwrmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_CTRL_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000009ull,
    ._info = __ar_pi_pm_pclk_event_cntr_ctrl_detail
};
static const cmmr_br_t __ar_pi_pm_pclk_event_cntr = {
    ._name = "AR_PI_PM_PCLK_EVENT_CNTR",
    ._addr = AR_PI_PM_PCLK_EVENT_CNTR,
    ._rval.val = AR_PI_PM_PCLK_EVENT_CNTR_RSTDATA,
    ._rmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_RSTMASK,
    ._wrmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_WRTMASK,
    ._rdmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_RDMASK,
    ._xsmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_XSMASK,
    ._wsemsk.val = AR_PI_PM_PCLK_EVENT_CNTR_WSEMASK,
    ._rsemsk.val = AR_PI_PM_PCLK_EVENT_CNTR_RSEMASK,
    ._w1smsk.val = AR_PI_PM_PCLK_EVENT_CNTR_W1SMASK,
    ._w1cmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_W1CMASK,
    ._wrstmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_WRSTMASK,
    ._hwwmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_HWWMASK,
    ._hwrmsk.val = AR_PI_PM_PCLK_EVENT_CNTR_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 8,
    ._depth = 32,
      ._type_bitmsk = 0x0000000000000009ull,
    ._info = __ar_pi_pm_pclk_event_cntr_detail
};
static const cmmr_br_t __ar_pi_cfg_diag_trans = {
    ._name = "AR_PI_CFG_DIAG_TRANS",
    ._addr = AR_PI_CFG_DIAG_TRANS,
    ._rval.val = AR_PI_CFG_DIAG_TRANS_RSTDATA,
    ._rmsk.val = AR_PI_CFG_DIAG_TRANS_RSTMASK,
    ._wrmsk.val = AR_PI_CFG_DIAG_TRANS_WRTMASK,
    ._rdmsk.val = AR_PI_CFG_DIAG_TRANS_RDMASK,
    ._xsmsk.val = AR_PI_CFG_DIAG_TRANS_XSMASK,
    ._wsemsk.val = AR_PI_CFG_DIAG_TRANS_WSEMASK,
    ._rsemsk.val = AR_PI_CFG_DIAG_TRANS_RSEMASK,
    ._w1smsk.val = AR_PI_CFG_DIAG_TRANS_W1SMASK,
    ._w1cmsk.val = AR_PI_CFG_DIAG_TRANS_W1CMASK,
    ._wrstmsk.val = AR_PI_CFG_DIAG_TRANS_WRSTMASK,
    ._hwwmsk.val = AR_PI_CFG_DIAG_TRANS_HWWMASK,
    ._hwrmsk.val = AR_PI_CFG_DIAG_TRANS_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_cfg_diag_trans_detail
};
static const cmmr_br_t __ar_pi_sts_diag_trans = {
    ._name = "AR_PI_STS_DIAG_TRANS",
    ._addr = AR_PI_STS_DIAG_TRANS,
    ._rval.val = AR_PI_STS_DIAG_TRANS_RSTDATA,
    ._rmsk.val = AR_PI_STS_DIAG_TRANS_RSTMASK,
    ._wrmsk.val = AR_PI_STS_DIAG_TRANS_WRTMASK,
    ._rdmsk.val = AR_PI_STS_DIAG_TRANS_RDMASK,
    ._xsmsk.val = AR_PI_STS_DIAG_TRANS_XSMASK,
    ._wsemsk.val = AR_PI_STS_DIAG_TRANS_WSEMASK,
    ._rsemsk.val = AR_PI_STS_DIAG_TRANS_RSEMASK,
    ._w1smsk.val = AR_PI_STS_DIAG_TRANS_W1SMASK,
    ._w1cmsk.val = AR_PI_STS_DIAG_TRANS_W1CMASK,
    ._wrstmsk.val = AR_PI_STS_DIAG_TRANS_WRSTMASK,
    ._hwwmsk.val = AR_PI_STS_DIAG_TRANS_HWWMASK,
    ._hwrmsk.val = AR_PI_STS_DIAG_TRANS_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000001001ull,
    ._info = __ar_pi_sts_diag_trans_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_ctl_0 = {
    ._name = "AR_PI_DBG_TRANS_CTL_0",
    ._addr = AR_PI_DBG_TRANS_CTL_0,
    ._rval.val = AR_PI_DBG_TRANS_CTL_0_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_CTL_0_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_CTL_0_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_CTL_0_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_CTL_0_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_CTL_0_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_CTL_0_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_CTL_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_CTL_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_CTL_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_CTL_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_CTL_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_ctl_0_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_ctl_1 = {
    ._name = "AR_PI_DBG_TRANS_CTL_1",
    ._addr = AR_PI_DBG_TRANS_CTL_1,
    ._rval.val = AR_PI_DBG_TRANS_CTL_1_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_CTL_1_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_CTL_1_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_CTL_1_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_CTL_1_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_CTL_1_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_CTL_1_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_CTL_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_CTL_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_CTL_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_CTL_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_CTL_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_ctl_1_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_ctl_2 = {
    ._name = "AR_PI_DBG_TRANS_CTL_2",
    ._addr = AR_PI_DBG_TRANS_CTL_2,
    ._rval.val = AR_PI_DBG_TRANS_CTL_2_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_CTL_2_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_CTL_2_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_CTL_2_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_CTL_2_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_CTL_2_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_CTL_2_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_CTL_2_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_CTL_2_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_CTL_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_CTL_2_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_CTL_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_ctl_2_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_ctl_3 = {
    ._name = "AR_PI_DBG_TRANS_CTL_3",
    ._addr = AR_PI_DBG_TRANS_CTL_3,
    ._rval.val = AR_PI_DBG_TRANS_CTL_3_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_CTL_3_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_CTL_3_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_CTL_3_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_CTL_3_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_CTL_3_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_CTL_3_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_CTL_3_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_CTL_3_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_CTL_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_CTL_3_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_CTL_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_ctl_3_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_ctl_4 = {
    ._name = "AR_PI_DBG_TRANS_CTL_4",
    ._addr = AR_PI_DBG_TRANS_CTL_4,
    ._rval.val = AR_PI_DBG_TRANS_CTL_4_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_CTL_4_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_CTL_4_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_CTL_4_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_CTL_4_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_CTL_4_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_CTL_4_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_CTL_4_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_CTL_4_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_CTL_4_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_CTL_4_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_CTL_4_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_ctl_4_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_mask_0 = {
    ._name = "AR_PI_DBG_TRANS_MASK_0",
    ._addr = AR_PI_DBG_TRANS_MASK_0,
    ._rval.val = AR_PI_DBG_TRANS_MASK_0_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_MASK_0_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_MASK_0_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_MASK_0_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_MASK_0_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_MASK_0_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_MASK_0_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_MASK_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_MASK_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_MASK_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_MASK_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_MASK_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_mask_0_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_mask_1 = {
    ._name = "AR_PI_DBG_TRANS_MASK_1",
    ._addr = AR_PI_DBG_TRANS_MASK_1,
    ._rval.val = AR_PI_DBG_TRANS_MASK_1_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_MASK_1_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_MASK_1_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_MASK_1_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_MASK_1_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_MASK_1_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_MASK_1_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_MASK_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_MASK_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_MASK_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_MASK_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_MASK_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_mask_1_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_mask_2 = {
    ._name = "AR_PI_DBG_TRANS_MASK_2",
    ._addr = AR_PI_DBG_TRANS_MASK_2,
    ._rval.val = AR_PI_DBG_TRANS_MASK_2_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_MASK_2_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_MASK_2_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_MASK_2_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_MASK_2_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_MASK_2_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_MASK_2_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_MASK_2_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_MASK_2_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_MASK_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_MASK_2_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_MASK_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_mask_2_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_mask_3 = {
    ._name = "AR_PI_DBG_TRANS_MASK_3",
    ._addr = AR_PI_DBG_TRANS_MASK_3,
    ._rval.val = AR_PI_DBG_TRANS_MASK_3_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_MASK_3_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_MASK_3_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_MASK_3_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_MASK_3_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_MASK_3_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_MASK_3_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_MASK_3_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_MASK_3_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_MASK_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_MASK_3_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_MASK_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_mask_3_detail
};
static const cmmr_br_t __ar_pi_dbg_trans_mask_4 = {
    ._name = "AR_PI_DBG_TRANS_MASK_4",
    ._addr = AR_PI_DBG_TRANS_MASK_4,
    ._rval.val = AR_PI_DBG_TRANS_MASK_4_RSTDATA,
    ._rmsk.val = AR_PI_DBG_TRANS_MASK_4_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_TRANS_MASK_4_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_TRANS_MASK_4_RDMASK,
    ._xsmsk.val = AR_PI_DBG_TRANS_MASK_4_XSMASK,
    ._wsemsk.val = AR_PI_DBG_TRANS_MASK_4_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_TRANS_MASK_4_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_TRANS_MASK_4_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_TRANS_MASK_4_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_TRANS_MASK_4_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_TRANS_MASK_4_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_TRANS_MASK_4_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_trans_mask_4_detail
};
static const cmmr_br_t __ar_pi_cfg_diag_recv = {
    ._name = "AR_PI_CFG_DIAG_RECV",
    ._addr = AR_PI_CFG_DIAG_RECV,
    ._rval.val = AR_PI_CFG_DIAG_RECV_RSTDATA,
    ._rmsk.val = AR_PI_CFG_DIAG_RECV_RSTMASK,
    ._wrmsk.val = AR_PI_CFG_DIAG_RECV_WRTMASK,
    ._rdmsk.val = AR_PI_CFG_DIAG_RECV_RDMASK,
    ._xsmsk.val = AR_PI_CFG_DIAG_RECV_XSMASK,
    ._wsemsk.val = AR_PI_CFG_DIAG_RECV_WSEMASK,
    ._rsemsk.val = AR_PI_CFG_DIAG_RECV_RSEMASK,
    ._w1smsk.val = AR_PI_CFG_DIAG_RECV_W1SMASK,
    ._w1cmsk.val = AR_PI_CFG_DIAG_RECV_W1CMASK,
    ._wrstmsk.val = AR_PI_CFG_DIAG_RECV_WRSTMASK,
    ._hwwmsk.val = AR_PI_CFG_DIAG_RECV_HWWMASK,
    ._hwrmsk.val = AR_PI_CFG_DIAG_RECV_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_cfg_diag_recv_detail
};
static const cmmr_br_t __ar_pi_sts_diag_recv = {
    ._name = "AR_PI_STS_DIAG_RECV",
    ._addr = AR_PI_STS_DIAG_RECV,
    ._rval.val = AR_PI_STS_DIAG_RECV_RSTDATA,
    ._rmsk.val = AR_PI_STS_DIAG_RECV_RSTMASK,
    ._wrmsk.val = AR_PI_STS_DIAG_RECV_WRTMASK,
    ._rdmsk.val = AR_PI_STS_DIAG_RECV_RDMASK,
    ._xsmsk.val = AR_PI_STS_DIAG_RECV_XSMASK,
    ._wsemsk.val = AR_PI_STS_DIAG_RECV_WSEMASK,
    ._rsemsk.val = AR_PI_STS_DIAG_RECV_RSEMASK,
    ._w1smsk.val = AR_PI_STS_DIAG_RECV_W1SMASK,
    ._w1cmsk.val = AR_PI_STS_DIAG_RECV_W1CMASK,
    ._wrstmsk.val = AR_PI_STS_DIAG_RECV_WRSTMASK,
    ._hwwmsk.val = AR_PI_STS_DIAG_RECV_HWWMASK,
    ._hwrmsk.val = AR_PI_STS_DIAG_RECV_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000001001ull,
    ._info = __ar_pi_sts_diag_recv_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_ctl_0 = {
    ._name = "AR_PI_DBG_RECV_CTL_0",
    ._addr = AR_PI_DBG_RECV_CTL_0,
    ._rval.val = AR_PI_DBG_RECV_CTL_0_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_CTL_0_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_CTL_0_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_CTL_0_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_CTL_0_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_CTL_0_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_CTL_0_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_CTL_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_CTL_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_CTL_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_CTL_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_CTL_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_ctl_0_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_ctl_1 = {
    ._name = "AR_PI_DBG_RECV_CTL_1",
    ._addr = AR_PI_DBG_RECV_CTL_1,
    ._rval.val = AR_PI_DBG_RECV_CTL_1_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_CTL_1_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_CTL_1_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_CTL_1_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_CTL_1_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_CTL_1_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_CTL_1_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_CTL_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_CTL_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_CTL_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_CTL_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_CTL_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_ctl_1_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_ctl_2 = {
    ._name = "AR_PI_DBG_RECV_CTL_2",
    ._addr = AR_PI_DBG_RECV_CTL_2,
    ._rval.val = AR_PI_DBG_RECV_CTL_2_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_CTL_2_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_CTL_2_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_CTL_2_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_CTL_2_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_CTL_2_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_CTL_2_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_CTL_2_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_CTL_2_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_CTL_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_CTL_2_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_CTL_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_ctl_2_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_ctl_3 = {
    ._name = "AR_PI_DBG_RECV_CTL_3",
    ._addr = AR_PI_DBG_RECV_CTL_3,
    ._rval.val = AR_PI_DBG_RECV_CTL_3_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_CTL_3_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_CTL_3_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_CTL_3_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_CTL_3_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_CTL_3_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_CTL_3_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_CTL_3_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_CTL_3_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_CTL_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_CTL_3_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_CTL_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_ctl_3_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_ctl_4 = {
    ._name = "AR_PI_DBG_RECV_CTL_4",
    ._addr = AR_PI_DBG_RECV_CTL_4,
    ._rval.val = AR_PI_DBG_RECV_CTL_4_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_CTL_4_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_CTL_4_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_CTL_4_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_CTL_4_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_CTL_4_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_CTL_4_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_CTL_4_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_CTL_4_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_CTL_4_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_CTL_4_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_CTL_4_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_ctl_4_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_mask_0 = {
    ._name = "AR_PI_DBG_RECV_MASK_0",
    ._addr = AR_PI_DBG_RECV_MASK_0,
    ._rval.val = AR_PI_DBG_RECV_MASK_0_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_MASK_0_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_MASK_0_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_MASK_0_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_MASK_0_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_MASK_0_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_MASK_0_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_MASK_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_MASK_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_MASK_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_MASK_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_MASK_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_mask_0_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_mask_1 = {
    ._name = "AR_PI_DBG_RECV_MASK_1",
    ._addr = AR_PI_DBG_RECV_MASK_1,
    ._rval.val = AR_PI_DBG_RECV_MASK_1_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_MASK_1_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_MASK_1_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_MASK_1_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_MASK_1_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_MASK_1_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_MASK_1_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_MASK_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_MASK_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_MASK_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_MASK_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_MASK_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_mask_1_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_mask_2 = {
    ._name = "AR_PI_DBG_RECV_MASK_2",
    ._addr = AR_PI_DBG_RECV_MASK_2,
    ._rval.val = AR_PI_DBG_RECV_MASK_2_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_MASK_2_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_MASK_2_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_MASK_2_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_MASK_2_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_MASK_2_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_MASK_2_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_MASK_2_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_MASK_2_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_MASK_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_MASK_2_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_MASK_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_mask_2_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_mask_3 = {
    ._name = "AR_PI_DBG_RECV_MASK_3",
    ._addr = AR_PI_DBG_RECV_MASK_3,
    ._rval.val = AR_PI_DBG_RECV_MASK_3_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_MASK_3_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_MASK_3_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_MASK_3_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_MASK_3_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_MASK_3_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_MASK_3_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_MASK_3_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_MASK_3_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_MASK_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_MASK_3_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_MASK_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_mask_3_detail
};
static const cmmr_br_t __ar_pi_dbg_recv_mask_4 = {
    ._name = "AR_PI_DBG_RECV_MASK_4",
    ._addr = AR_PI_DBG_RECV_MASK_4,
    ._rval.val = AR_PI_DBG_RECV_MASK_4_RSTDATA,
    ._rmsk.val = AR_PI_DBG_RECV_MASK_4_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_RECV_MASK_4_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_RECV_MASK_4_RDMASK,
    ._xsmsk.val = AR_PI_DBG_RECV_MASK_4_XSMASK,
    ._wsemsk.val = AR_PI_DBG_RECV_MASK_4_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_RECV_MASK_4_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_RECV_MASK_4_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_RECV_MASK_4_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_RECV_MASK_4_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_RECV_MASK_4_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_RECV_MASK_4_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_dbg_recv_mask_4_detail
};
static const cmmr_br_t __ar_pi_debug_den_ip = {
    ._name = "AR_PI_DEBUG_DEN_IP",
    ._addr = AR_PI_DEBUG_DEN_IP,
    ._rval.val = AR_PI_DEBUG_DEN_IP_RSTDATA,
    ._rmsk.val = AR_PI_DEBUG_DEN_IP_RSTMASK,
    ._wrmsk.val = AR_PI_DEBUG_DEN_IP_WRTMASK,
    ._rdmsk.val = AR_PI_DEBUG_DEN_IP_RDMASK,
    ._xsmsk.val = AR_PI_DEBUG_DEN_IP_XSMASK,
    ._wsemsk.val = AR_PI_DEBUG_DEN_IP_WSEMASK,
    ._rsemsk.val = AR_PI_DEBUG_DEN_IP_RSEMASK,
    ._w1smsk.val = AR_PI_DEBUG_DEN_IP_W1SMASK,
    ._w1cmsk.val = AR_PI_DEBUG_DEN_IP_W1CMASK,
    ._wrstmsk.val = AR_PI_DEBUG_DEN_IP_WRSTMASK,
    ._hwwmsk.val = AR_PI_DEBUG_DEN_IP_HWWMASK,
    ._hwrmsk.val = AR_PI_DEBUG_DEN_IP_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000000ull,
    ._info = __ar_pi_debug_den_ip_detail
};
static const cmmr_br_t __ar_pi_cfg_diag_inj = {
    ._name = "AR_PI_CFG_DIAG_INJ",
    ._addr = AR_PI_CFG_DIAG_INJ,
    ._rval.val = AR_PI_CFG_DIAG_INJ_RSTDATA,
    ._rmsk.val = AR_PI_CFG_DIAG_INJ_RSTMASK,
    ._wrmsk.val = AR_PI_CFG_DIAG_INJ_WRTMASK,
    ._rdmsk.val = AR_PI_CFG_DIAG_INJ_RDMASK,
    ._xsmsk.val = AR_PI_CFG_DIAG_INJ_XSMASK,
    ._wsemsk.val = AR_PI_CFG_DIAG_INJ_WSEMASK,
    ._rsemsk.val = AR_PI_CFG_DIAG_INJ_RSEMASK,
    ._w1smsk.val = AR_PI_CFG_DIAG_INJ_W1SMASK,
    ._w1cmsk.val = AR_PI_CFG_DIAG_INJ_W1CMASK,
    ._wrstmsk.val = AR_PI_CFG_DIAG_INJ_WRSTMASK,
    ._hwwmsk.val = AR_PI_CFG_DIAG_INJ_HWWMASK,
    ._hwrmsk.val = AR_PI_CFG_DIAG_INJ_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_cfg_diag_inj_detail
};
static const cmmr_br_t __ar_pi_sts_diag_inj = {
    ._name = "AR_PI_STS_DIAG_INJ",
    ._addr = AR_PI_STS_DIAG_INJ,
    ._rval.val = AR_PI_STS_DIAG_INJ_RSTDATA,
    ._rmsk.val = AR_PI_STS_DIAG_INJ_RSTMASK,
    ._wrmsk.val = AR_PI_STS_DIAG_INJ_WRTMASK,
    ._rdmsk.val = AR_PI_STS_DIAG_INJ_RDMASK,
    ._xsmsk.val = AR_PI_STS_DIAG_INJ_XSMASK,
    ._wsemsk.val = AR_PI_STS_DIAG_INJ_WSEMASK,
    ._rsemsk.val = AR_PI_STS_DIAG_INJ_RSEMASK,
    ._w1smsk.val = AR_PI_STS_DIAG_INJ_W1SMASK,
    ._w1cmsk.val = AR_PI_STS_DIAG_INJ_W1CMASK,
    ._wrstmsk.val = AR_PI_STS_DIAG_INJ_WRSTMASK,
    ._hwwmsk.val = AR_PI_STS_DIAG_INJ_HWWMASK,
    ._hwrmsk.val = AR_PI_STS_DIAG_INJ_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000001001ull,
    ._info = __ar_pi_sts_diag_inj_detail
};
static const cmmr_br_t __ar_pi_pcic_mems_dbg_errinj = {
    ._name = "AR_PI_PCIC_MEMS_DBG_ERRINJ",
    ._addr = AR_PI_PCIC_MEMS_DBG_ERRINJ,
    ._rval.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_RSTDATA,
    ._rmsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_RSTMASK,
    ._wrmsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_WRTMASK,
    ._rdmsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_RDMASK,
    ._xsmsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_XSMASK,
    ._wsemsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_WSEMASK,
    ._rsemsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_RSEMASK,
    ._w1smsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_W1SMASK,
    ._w1cmsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_W1CMASK,
    ._wrstmsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_WRSTMASK,
    ._hwwmsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_HWWMASK,
    ._hwrmsk.val = AR_PI_PCIC_MEMS_DBG_ERRINJ_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000001ull,
    ._info = __ar_pi_pcic_mems_dbg_errinj_detail
};
static const cmmr_br_t __ar_pi_phy_csrs = {
    ._name = "AR_PI_PHY_CSRS",
    ._addr = AR_PI_PHY_CSRS,
    ._rval.val = AR_PI_PHY_CSRS_RSTDATA,
    ._rmsk.val = AR_PI_PHY_CSRS_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_CSRS_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_CSRS_RDMASK,
    ._xsmsk.val = AR_PI_PHY_CSRS_XSMASK,
    ._wsemsk.val = AR_PI_PHY_CSRS_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_CSRS_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_CSRS_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_CSRS_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_CSRS_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_CSRS_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_CSRS_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 8,
    ._depth = 4096,
      ._type_bitmsk = 0x0000000000002008ull,
    ._info = __ar_pi_phy_csrs_detail
};
static const cmmr_br_t __ar_pi_phy_csr_cmu_0 = {
    ._name = "AR_PI_PHY_CSR_CMU_0",
    ._addr = AR_PI_PHY_CSR_CMU_0,
    ._rval.val = AR_PI_PHY_CSR_CMU_0_RSTDATA,
    ._rmsk.val = AR_PI_PHY_CSR_CMU_0_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_CSR_CMU_0_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_CSR_CMU_0_RDMASK,
    ._xsmsk.val = AR_PI_PHY_CSR_CMU_0_XSMASK,
    ._wsemsk.val = AR_PI_PHY_CSR_CMU_0_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_CSR_CMU_0_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_CSR_CMU_0_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_CSR_CMU_0_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_CSR_CMU_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_CSR_CMU_0_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_CSR_CMU_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002004ull,
    ._info = __ar_pi_phy_csr_cmu_0_detail
};
static const cmmr_br_t __ar_pi_phy_csr_lane1_0 = {
    ._name = "AR_PI_PHY_CSR_LANE1_0",
    ._addr = AR_PI_PHY_CSR_LANE1_0,
    ._rval.val = AR_PI_PHY_CSR_LANE1_0_RSTDATA,
    ._rmsk.val = AR_PI_PHY_CSR_LANE1_0_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_CSR_LANE1_0_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_CSR_LANE1_0_RDMASK,
    ._xsmsk.val = AR_PI_PHY_CSR_LANE1_0_XSMASK,
    ._wsemsk.val = AR_PI_PHY_CSR_LANE1_0_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_CSR_LANE1_0_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_CSR_LANE1_0_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_CSR_LANE1_0_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_CSR_LANE1_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_CSR_LANE1_0_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_CSR_LANE1_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002004ull,
    ._info = __ar_pi_phy_csr_lane1_0_detail
};
static const cmmr_br_t __ar_pi_phy_csr_comlane_0 = {
    ._name = "AR_PI_PHY_CSR_COMLANE_0",
    ._addr = AR_PI_PHY_CSR_COMLANE_0,
    ._rval.val = AR_PI_PHY_CSR_COMLANE_0_RSTDATA,
    ._rmsk.val = AR_PI_PHY_CSR_COMLANE_0_RSTMASK,
    ._wrmsk.val = AR_PI_PHY_CSR_COMLANE_0_WRTMASK,
    ._rdmsk.val = AR_PI_PHY_CSR_COMLANE_0_RDMASK,
    ._xsmsk.val = AR_PI_PHY_CSR_COMLANE_0_XSMASK,
    ._wsemsk.val = AR_PI_PHY_CSR_COMLANE_0_WSEMASK,
    ._rsemsk.val = AR_PI_PHY_CSR_COMLANE_0_RSEMASK,
    ._w1smsk.val = AR_PI_PHY_CSR_COMLANE_0_W1SMASK,
    ._w1cmsk.val = AR_PI_PHY_CSR_COMLANE_0_W1CMASK,
    ._wrstmsk.val = AR_PI_PHY_CSR_COMLANE_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_PHY_CSR_COMLANE_0_HWWMASK,
    ._hwrmsk.val = AR_PI_PHY_CSR_COMLANE_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002004ull,
    ._info = __ar_pi_phy_csr_comlane_0_detail
};
static const cmmr_br_t __ar_pi_databahn_csrs = {
    ._name = "AR_PI_DATABAHN_CSRS",
    ._addr = AR_PI_DATABAHN_CSRS,
    ._rval.val = AR_PI_DATABAHN_CSRS_RSTDATA,
    ._rmsk.val = AR_PI_DATABAHN_CSRS_RSTMASK,
    ._wrmsk.val = AR_PI_DATABAHN_CSRS_WRTMASK,
    ._rdmsk.val = AR_PI_DATABAHN_CSRS_RDMASK,
    ._xsmsk.val = AR_PI_DATABAHN_CSRS_XSMASK,
    ._wsemsk.val = AR_PI_DATABAHN_CSRS_WSEMASK,
    ._rsemsk.val = AR_PI_DATABAHN_CSRS_RSEMASK,
    ._w1smsk.val = AR_PI_DATABAHN_CSRS_W1SMASK,
    ._w1cmsk.val = AR_PI_DATABAHN_CSRS_W1CMASK,
    ._wrstmsk.val = AR_PI_DATABAHN_CSRS_WRSTMASK,
    ._hwwmsk.val = AR_PI_DATABAHN_CSRS_HWWMASK,
    ._hwrmsk.val = AR_PI_DATABAHN_CSRS_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 8,
    ._depth = 4096,
      ._type_bitmsk = 0x0000000000002008ull,
    ._info = __ar_pi_databahn_csrs_detail
};
static const cmmr_br_t __ar_pi_db_f0_db_rev_id_class_code = {
    ._name = "AR_PI_DB_F0_DB_REV_ID_CLASS_CODE",
    ._addr = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE,
    ._rval.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RSTDATA,
    ._rmsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RSTMASK,
    ._wrmsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_WRTMASK,
    ._rdmsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RDMASK,
    ._xsmsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_XSMASK,
    ._wsemsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_WSEMASK,
    ._rsemsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_RSEMASK,
    ._w1smsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_F0_DB_REV_ID_CLASS_CODE_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000006ull,
    ._info = __ar_pi_db_f0_db_rev_id_class_code_detail
};
static const cmmr_br_t __ar_pi_db_f0_bar_0_1 = {
    ._name = "AR_PI_DB_F0_BAR_0_1",
    ._addr = AR_PI_DB_F0_BAR_0_1,
    ._rval.val = AR_PI_DB_F0_BAR_0_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_F0_BAR_0_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_F0_BAR_0_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_F0_BAR_0_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_F0_BAR_0_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_F0_BAR_0_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_F0_BAR_0_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_F0_BAR_0_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_F0_BAR_0_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_F0_BAR_0_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_F0_BAR_0_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_F0_BAR_0_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002006ull,
    ._info = __ar_pi_db_f0_bar_0_1_detail
};
static const cmmr_br_t __ar_pi_db_msi_x_cntl_2c_0 = {
    ._name = "AR_PI_DB_MSI_X_CNTL_2C_0",
    ._addr = AR_PI_DB_MSI_X_CNTL_2C_0,
    ._rval.val = AR_PI_DB_MSI_X_CNTL_2C_0_RSTDATA,
    ._rmsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_RSTMASK,
    ._wrmsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_WRTMASK,
    ._rdmsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_RDMASK,
    ._xsmsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_XSMASK,
    ._wsemsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_WSEMASK,
    ._rsemsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_RSEMASK,
    ._w1smsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_MSI_X_CNTL_2C_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_msi_x_cntl_2c_0_detail
};
static const cmmr_br_t __ar_pi_db_msi_x_pendi_2e_0 = {
    ._name = "AR_PI_DB_MSI_X_PENDI_2E_0",
    ._addr = AR_PI_DB_MSI_X_PENDI_2E_0,
    ._rval.val = AR_PI_DB_MSI_X_PENDI_2E_0_RSTDATA,
    ._rmsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_RSTMASK,
    ._wrmsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_WRTMASK,
    ._rdmsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_RDMASK,
    ._xsmsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_XSMASK,
    ._wsemsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_WSEMASK,
    ._rsemsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_RSEMASK,
    ._w1smsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_MSI_X_PENDI_2E_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_msi_x_pendi_2e_0_detail
};
static const cmmr_br_t __ar_pi_db_pcie_cntl_sts_0 = {
    ._name = "AR_PI_DB_PCIE_CNTL_STS_0",
    ._addr = AR_PI_DB_PCIE_CNTL_STS_0,
    ._rval.val = AR_PI_DB_PCIE_CNTL_STS_0_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_CNTL_STS_0_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_CNTL_STS_0_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_CNTL_STS_0_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_CNTL_STS_0_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_CNTL_STS_0_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_CNTL_STS_0_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_CNTL_STS_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_CNTL_STS_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_CNTL_STS_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_CNTL_STS_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_CNTL_STS_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_pcie_cntl_sts_0_detail
};
static const cmmr_br_t __ar_pi_db_pcie_cntl_sts_2_0 = {
    ._name = "AR_PI_DB_PCIE_CNTL_STS_2_0",
    ._addr = AR_PI_DB_PCIE_CNTL_STS_2_0,
    ._rval.val = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_pcie_cntl_sts_2_0_detail
};
static const cmmr_br_t __ar_pi_db_pcie_tph_req_cntl_0 = {
    ._name = "AR_PI_DB_PCIE_TPH_REQ_CNTL_0",
    ._addr = AR_PI_DB_PCIE_TPH_REQ_CNTL_0,
    ._rval.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002007ull,
    ._info = __ar_pi_db_pcie_tph_req_cntl_0_detail
};
static const cmmr_br_t __ar_pi_db_f1_db_rev_id_class_code = {
    ._name = "AR_PI_DB_F1_DB_REV_ID_CLASS_CODE",
    ._addr = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE,
    ._rval.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RSTDATA,
    ._rmsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RSTMASK,
    ._wrmsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_WRTMASK,
    ._rdmsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RDMASK,
    ._xsmsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_XSMASK,
    ._wsemsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_WSEMASK,
    ._rsemsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_RSEMASK,
    ._w1smsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_F1_DB_REV_ID_CLASS_CODE_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000006ull,
    ._info = __ar_pi_db_f1_db_rev_id_class_code_detail
};
static const cmmr_br_t __ar_pi_db_f1_bar_0_1 = {
    ._name = "AR_PI_DB_F1_BAR_0_1",
    ._addr = AR_PI_DB_F1_BAR_0_1,
    ._rval.val = AR_PI_DB_F1_BAR_0_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_F1_BAR_0_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_F1_BAR_0_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_F1_BAR_0_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_F1_BAR_0_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_F1_BAR_0_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_F1_BAR_0_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_F1_BAR_0_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_F1_BAR_0_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_F1_BAR_0_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_F1_BAR_0_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_F1_BAR_0_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002006ull,
    ._info = __ar_pi_db_f1_bar_0_1_detail
};
static const cmmr_br_t __ar_pi_db_msi_x_cntl_2c_1 = {
    ._name = "AR_PI_DB_MSI_X_CNTL_2C_1",
    ._addr = AR_PI_DB_MSI_X_CNTL_2C_1,
    ._rval.val = AR_PI_DB_MSI_X_CNTL_2C_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_MSI_X_CNTL_2C_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_msi_x_cntl_2c_1_detail
};
static const cmmr_br_t __ar_pi_db_msi_x_pendi_2e_1 = {
    ._name = "AR_PI_DB_MSI_X_PENDI_2E_1",
    ._addr = AR_PI_DB_MSI_X_PENDI_2E_1,
    ._rval.val = AR_PI_DB_MSI_X_PENDI_2E_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_MSI_X_PENDI_2E_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_msi_x_pendi_2e_1_detail
};
static const cmmr_br_t __ar_pi_db_pcie_cntl_sts_1 = {
    ._name = "AR_PI_DB_PCIE_CNTL_STS_1",
    ._addr = AR_PI_DB_PCIE_CNTL_STS_1,
    ._rval.val = AR_PI_DB_PCIE_CNTL_STS_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_CNTL_STS_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_CNTL_STS_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_CNTL_STS_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_CNTL_STS_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_CNTL_STS_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_CNTL_STS_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_CNTL_STS_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_CNTL_STS_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_CNTL_STS_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_CNTL_STS_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_CNTL_STS_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_pcie_cntl_sts_1_detail
};
static const cmmr_br_t __ar_pi_db_pcie_cntl_sts_2_1 = {
    ._name = "AR_PI_DB_PCIE_CNTL_STS_2_1",
    ._addr = AR_PI_DB_PCIE_CNTL_STS_2_1,
    ._rval.val = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_pcie_cntl_sts_2_1_detail
};
static const cmmr_br_t __ar_pi_db_pcie_tph_req_cntl_1 = {
    ._name = "AR_PI_DB_PCIE_TPH_REQ_CNTL_1",
    ._addr = AR_PI_DB_PCIE_TPH_REQ_CNTL_1,
    ._rval.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002007ull,
    ._info = __ar_pi_db_pcie_tph_req_cntl_1_detail
};
static const cmmr_br_t __ar_pi_db_f2_db_rev_id_class_code = {
    ._name = "AR_PI_DB_F2_DB_REV_ID_CLASS_CODE",
    ._addr = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE,
    ._rval.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RSTDATA,
    ._rmsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RSTMASK,
    ._wrmsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_WRTMASK,
    ._rdmsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RDMASK,
    ._xsmsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_XSMASK,
    ._wsemsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_WSEMASK,
    ._rsemsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_RSEMASK,
    ._w1smsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_F2_DB_REV_ID_CLASS_CODE_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000006ull,
    ._info = __ar_pi_db_f2_db_rev_id_class_code_detail
};
static const cmmr_br_t __ar_pi_db_f2_bar_0_1 = {
    ._name = "AR_PI_DB_F2_BAR_0_1",
    ._addr = AR_PI_DB_F2_BAR_0_1,
    ._rval.val = AR_PI_DB_F2_BAR_0_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_F2_BAR_0_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_F2_BAR_0_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_F2_BAR_0_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_F2_BAR_0_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_F2_BAR_0_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_F2_BAR_0_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_F2_BAR_0_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_F2_BAR_0_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_F2_BAR_0_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_F2_BAR_0_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_F2_BAR_0_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002006ull,
    ._info = __ar_pi_db_f2_bar_0_1_detail
};
static const cmmr_br_t __ar_pi_db_msi_x_cntl_2c_2 = {
    ._name = "AR_PI_DB_MSI_X_CNTL_2C_2",
    ._addr = AR_PI_DB_MSI_X_CNTL_2C_2,
    ._rval.val = AR_PI_DB_MSI_X_CNTL_2C_2_RSTDATA,
    ._rmsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_RSTMASK,
    ._wrmsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_WRTMASK,
    ._rdmsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_RDMASK,
    ._xsmsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_XSMASK,
    ._wsemsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_WSEMASK,
    ._rsemsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_RSEMASK,
    ._w1smsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_MSI_X_CNTL_2C_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_msi_x_cntl_2c_2_detail
};
static const cmmr_br_t __ar_pi_db_msi_x_pendi_2e_2 = {
    ._name = "AR_PI_DB_MSI_X_PENDI_2E_2",
    ._addr = AR_PI_DB_MSI_X_PENDI_2E_2,
    ._rval.val = AR_PI_DB_MSI_X_PENDI_2E_2_RSTDATA,
    ._rmsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_RSTMASK,
    ._wrmsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_WRTMASK,
    ._rdmsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_RDMASK,
    ._xsmsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_XSMASK,
    ._wsemsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_WSEMASK,
    ._rsemsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_RSEMASK,
    ._w1smsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_MSI_X_PENDI_2E_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_msi_x_pendi_2e_2_detail
};
static const cmmr_br_t __ar_pi_db_pcie_cntl_sts_2 = {
    ._name = "AR_PI_DB_PCIE_CNTL_STS_2",
    ._addr = AR_PI_DB_PCIE_CNTL_STS_2,
    ._rval.val = AR_PI_DB_PCIE_CNTL_STS_2_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_CNTL_STS_2_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_pcie_cntl_sts_2_detail
};
static const cmmr_br_t __ar_pi_db_pcie_cntl_sts_2_2 = {
    ._name = "AR_PI_DB_PCIE_CNTL_STS_2_2",
    ._addr = AR_PI_DB_PCIE_CNTL_STS_2_2,
    ._rval.val = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_pcie_cntl_sts_2_2_detail
};
static const cmmr_br_t __ar_pi_db_pcie_tph_req_cntl_2 = {
    ._name = "AR_PI_DB_PCIE_TPH_REQ_CNTL_2",
    ._addr = AR_PI_DB_PCIE_TPH_REQ_CNTL_2,
    ._rval.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_2_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002007ull,
    ._info = __ar_pi_db_pcie_tph_req_cntl_2_detail
};
static const cmmr_br_t __ar_pi_db_f3_db_rev_id_class_code = {
    ._name = "AR_PI_DB_F3_DB_REV_ID_CLASS_CODE",
    ._addr = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE,
    ._rval.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RSTDATA,
    ._rmsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RSTMASK,
    ._wrmsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_WRTMASK,
    ._rdmsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RDMASK,
    ._xsmsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_XSMASK,
    ._wsemsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_WSEMASK,
    ._rsemsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_RSEMASK,
    ._w1smsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_F3_DB_REV_ID_CLASS_CODE_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000006ull,
    ._info = __ar_pi_db_f3_db_rev_id_class_code_detail
};
static const cmmr_br_t __ar_pi_db_f3_bar_0_1 = {
    ._name = "AR_PI_DB_F3_BAR_0_1",
    ._addr = AR_PI_DB_F3_BAR_0_1,
    ._rval.val = AR_PI_DB_F3_BAR_0_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_F3_BAR_0_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_F3_BAR_0_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_F3_BAR_0_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_F3_BAR_0_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_F3_BAR_0_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_F3_BAR_0_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_F3_BAR_0_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_F3_BAR_0_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_F3_BAR_0_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_F3_BAR_0_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_F3_BAR_0_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002006ull,
    ._info = __ar_pi_db_f3_bar_0_1_detail
};
static const cmmr_br_t __ar_pi_db_msi_x_cntl_2c_3 = {
    ._name = "AR_PI_DB_MSI_X_CNTL_2C_3",
    ._addr = AR_PI_DB_MSI_X_CNTL_2C_3,
    ._rval.val = AR_PI_DB_MSI_X_CNTL_2C_3_RSTDATA,
    ._rmsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_RSTMASK,
    ._wrmsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_WRTMASK,
    ._rdmsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_RDMASK,
    ._xsmsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_XSMASK,
    ._wsemsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_WSEMASK,
    ._rsemsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_RSEMASK,
    ._w1smsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_MSI_X_CNTL_2C_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_msi_x_cntl_2c_3_detail
};
static const cmmr_br_t __ar_pi_db_msi_x_pendi_2e_3 = {
    ._name = "AR_PI_DB_MSI_X_PENDI_2E_3",
    ._addr = AR_PI_DB_MSI_X_PENDI_2E_3,
    ._rval.val = AR_PI_DB_MSI_X_PENDI_2E_3_RSTDATA,
    ._rmsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_RSTMASK,
    ._wrmsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_WRTMASK,
    ._rdmsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_RDMASK,
    ._xsmsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_XSMASK,
    ._wsemsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_WSEMASK,
    ._rsemsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_RSEMASK,
    ._w1smsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_MSI_X_PENDI_2E_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_msi_x_pendi_2e_3_detail
};
static const cmmr_br_t __ar_pi_db_pcie_cntl_sts_3 = {
    ._name = "AR_PI_DB_PCIE_CNTL_STS_3",
    ._addr = AR_PI_DB_PCIE_CNTL_STS_3,
    ._rval.val = AR_PI_DB_PCIE_CNTL_STS_3_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_CNTL_STS_3_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_CNTL_STS_3_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_CNTL_STS_3_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_CNTL_STS_3_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_CNTL_STS_3_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_CNTL_STS_3_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_CNTL_STS_3_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_CNTL_STS_3_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_CNTL_STS_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_CNTL_STS_3_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_CNTL_STS_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_pcie_cntl_sts_3_detail
};
static const cmmr_br_t __ar_pi_db_pcie_cntl_sts_2_3 = {
    ._name = "AR_PI_DB_PCIE_CNTL_STS_2_3",
    ._addr = AR_PI_DB_PCIE_CNTL_STS_2_3,
    ._rval.val = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_CNTL_STS_2_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_pcie_cntl_sts_2_3_detail
};
static const cmmr_br_t __ar_pi_db_pcie_tph_req_cntl_3 = {
    ._name = "AR_PI_DB_PCIE_TPH_REQ_CNTL_3",
    ._addr = AR_PI_DB_PCIE_TPH_REQ_CNTL_3,
    ._rval.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTDATA,
    ._rmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RDMASK,
    ._xsmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_XSMASK,
    ._wsemsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PCIE_TPH_REQ_CNTL_3_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002007ull,
    ._info = __ar_pi_db_pcie_tph_req_cntl_3_detail
};
static const cmmr_br_t __ar_pi_db_phy_layer_cfg = {
    ._name = "AR_PI_DB_PHY_LAYER_CFG",
    ._addr = AR_PI_DB_PHY_LAYER_CFG,
    ._rval.val = AR_PI_DB_PHY_LAYER_CFG_RSTDATA,
    ._rmsk.val = AR_PI_DB_PHY_LAYER_CFG_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PHY_LAYER_CFG_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PHY_LAYER_CFG_RDMASK,
    ._xsmsk.val = AR_PI_DB_PHY_LAYER_CFG_XSMASK,
    ._wsemsk.val = AR_PI_DB_PHY_LAYER_CFG_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PHY_LAYER_CFG_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PHY_LAYER_CFG_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PHY_LAYER_CFG_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PHY_LAYER_CFG_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PHY_LAYER_CFG_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PHY_LAYER_CFG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002004ull,
    ._info = __ar_pi_db_phy_layer_cfg_detail
};
static const cmmr_br_t __ar_pi_db_recv_credit_0 = {
    ._name = "AR_PI_DB_RECV_CREDIT_0",
    ._addr = AR_PI_DB_RECV_CREDIT_0,
    ._rval.val = AR_PI_DB_RECV_CREDIT_0_RSTDATA,
    ._rmsk.val = AR_PI_DB_RECV_CREDIT_0_RSTMASK,
    ._wrmsk.val = AR_PI_DB_RECV_CREDIT_0_WRTMASK,
    ._rdmsk.val = AR_PI_DB_RECV_CREDIT_0_RDMASK,
    ._xsmsk.val = AR_PI_DB_RECV_CREDIT_0_XSMASK,
    ._wsemsk.val = AR_PI_DB_RECV_CREDIT_0_WSEMASK,
    ._rsemsk.val = AR_PI_DB_RECV_CREDIT_0_RSEMASK,
    ._w1smsk.val = AR_PI_DB_RECV_CREDIT_0_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_RECV_CREDIT_0_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_RECV_CREDIT_0_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_RECV_CREDIT_0_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_RECV_CREDIT_0_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002004ull,
    ._info = __ar_pi_db_recv_credit_0_detail
};
static const cmmr_br_t __ar_pi_db_recv_credit_1 = {
    ._name = "AR_PI_DB_RECV_CREDIT_1",
    ._addr = AR_PI_DB_RECV_CREDIT_1,
    ._rval.val = AR_PI_DB_RECV_CREDIT_1_RSTDATA,
    ._rmsk.val = AR_PI_DB_RECV_CREDIT_1_RSTMASK,
    ._wrmsk.val = AR_PI_DB_RECV_CREDIT_1_WRTMASK,
    ._rdmsk.val = AR_PI_DB_RECV_CREDIT_1_RDMASK,
    ._xsmsk.val = AR_PI_DB_RECV_CREDIT_1_XSMASK,
    ._wsemsk.val = AR_PI_DB_RECV_CREDIT_1_WSEMASK,
    ._rsemsk.val = AR_PI_DB_RECV_CREDIT_1_RSEMASK,
    ._w1smsk.val = AR_PI_DB_RECV_CREDIT_1_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_RECV_CREDIT_1_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_RECV_CREDIT_1_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_RECV_CREDIT_1_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_RECV_CREDIT_1_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_recv_credit_1_detail
};
static const cmmr_br_t __ar_pi_db_recv_fts_count = {
    ._name = "AR_PI_DB_RECV_FTS_COUNT",
    ._addr = AR_PI_DB_RECV_FTS_COUNT,
    ._rval.val = AR_PI_DB_RECV_FTS_COUNT_RSTDATA,
    ._rmsk.val = AR_PI_DB_RECV_FTS_COUNT_RSTMASK,
    ._wrmsk.val = AR_PI_DB_RECV_FTS_COUNT_WRTMASK,
    ._rdmsk.val = AR_PI_DB_RECV_FTS_COUNT_RDMASK,
    ._xsmsk.val = AR_PI_DB_RECV_FTS_COUNT_XSMASK,
    ._wsemsk.val = AR_PI_DB_RECV_FTS_COUNT_WSEMASK,
    ._rsemsk.val = AR_PI_DB_RECV_FTS_COUNT_RSEMASK,
    ._w1smsk.val = AR_PI_DB_RECV_FTS_COUNT_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_RECV_FTS_COUNT_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_RECV_FTS_COUNT_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_RECV_FTS_COUNT_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_RECV_FTS_COUNT_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000000004ull,
    ._info = __ar_pi_db_recv_fts_count_detail
};
static const cmmr_br_t __ar_pi_db_physical_cfg_reg = {
    ._name = "AR_PI_DB_PHYSICAL_CFG_REG",
    ._addr = AR_PI_DB_PHYSICAL_CFG_REG,
    ._rval.val = AR_PI_DB_PHYSICAL_CFG_REG_RSTDATA,
    ._rmsk.val = AR_PI_DB_PHYSICAL_CFG_REG_RSTMASK,
    ._wrmsk.val = AR_PI_DB_PHYSICAL_CFG_REG_WRTMASK,
    ._rdmsk.val = AR_PI_DB_PHYSICAL_CFG_REG_RDMASK,
    ._xsmsk.val = AR_PI_DB_PHYSICAL_CFG_REG_XSMASK,
    ._wsemsk.val = AR_PI_DB_PHYSICAL_CFG_REG_WSEMASK,
    ._rsemsk.val = AR_PI_DB_PHYSICAL_CFG_REG_RSEMASK,
    ._w1smsk.val = AR_PI_DB_PHYSICAL_CFG_REG_W1SMASK,
    ._w1cmsk.val = AR_PI_DB_PHYSICAL_CFG_REG_W1CMASK,
    ._wrstmsk.val = AR_PI_DB_PHYSICAL_CFG_REG_WRSTMASK,
    ._hwwmsk.val = AR_PI_DB_PHYSICAL_CFG_REG_HWWMASK,
    ._hwrmsk.val = AR_PI_DB_PHYSICAL_CFG_REG_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 0,
    ._depth = 1,
      ._type_bitmsk = 0x0000000000002005ull,
    ._info = __ar_pi_db_physical_cfg_reg_detail
};
static const cmmr_br_t __ar_pi_dbg_diag_inj_ram = {
    ._name = "AR_PI_DBG_DIAG_INJ_RAM",
    ._addr = AR_PI_DBG_DIAG_INJ_RAM,
    ._rval.val = AR_PI_DBG_DIAG_INJ_RAM_RSTDATA,
    ._rmsk.val = AR_PI_DBG_DIAG_INJ_RAM_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_DIAG_INJ_RAM_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_DIAG_INJ_RAM_RDMASK,
    ._xsmsk.val = AR_PI_DBG_DIAG_INJ_RAM_XSMASK,
    ._wsemsk.val = AR_PI_DBG_DIAG_INJ_RAM_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_DIAG_INJ_RAM_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_DIAG_INJ_RAM_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_DIAG_INJ_RAM_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_DIAG_INJ_RAM_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_DIAG_INJ_RAM_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_DIAG_INJ_RAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 8,
    ._depth = 640,
      ._type_bitmsk = 0x0000000000000009ull,
    ._info = __ar_pi_dbg_diag_inj_ram_detail
};
static const cmmr_br_t __ar_pi_dbg_diag_trans_ram = {
    ._name = "AR_PI_DBG_DIAG_TRANS_RAM",
    ._addr = AR_PI_DBG_DIAG_TRANS_RAM,
    ._rval.val = AR_PI_DBG_DIAG_TRANS_RAM_RSTDATA,
    ._rmsk.val = AR_PI_DBG_DIAG_TRANS_RAM_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_DIAG_TRANS_RAM_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_DIAG_TRANS_RAM_RDMASK,
    ._xsmsk.val = AR_PI_DBG_DIAG_TRANS_RAM_XSMASK,
    ._wsemsk.val = AR_PI_DBG_DIAG_TRANS_RAM_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_DIAG_TRANS_RAM_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_DIAG_TRANS_RAM_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_DIAG_TRANS_RAM_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_DIAG_TRANS_RAM_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_DIAG_TRANS_RAM_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_DIAG_TRANS_RAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 8,
    ._depth = 768,
      ._type_bitmsk = 0x0000000000000009ull,
    ._info = __ar_pi_dbg_diag_trans_ram_detail
};
static const cmmr_br_t __ar_pi_dbg_diag_recv_ram = {
    ._name = "AR_PI_DBG_DIAG_RECV_RAM",
    ._addr = AR_PI_DBG_DIAG_RECV_RAM,
    ._rval.val = AR_PI_DBG_DIAG_RECV_RAM_RSTDATA,
    ._rmsk.val = AR_PI_DBG_DIAG_RECV_RAM_RSTMASK,
    ._wrmsk.val = AR_PI_DBG_DIAG_RECV_RAM_WRTMASK,
    ._rdmsk.val = AR_PI_DBG_DIAG_RECV_RAM_RDMASK,
    ._xsmsk.val = AR_PI_DBG_DIAG_RECV_RAM_XSMASK,
    ._wsemsk.val = AR_PI_DBG_DIAG_RECV_RAM_WSEMASK,
    ._rsemsk.val = AR_PI_DBG_DIAG_RECV_RAM_RSEMASK,
    ._w1smsk.val = AR_PI_DBG_DIAG_RECV_RAM_W1SMASK,
    ._w1cmsk.val = AR_PI_DBG_DIAG_RECV_RAM_W1CMASK,
    ._wrstmsk.val = AR_PI_DBG_DIAG_RECV_RAM_WRSTMASK,
    ._hwwmsk.val = AR_PI_DBG_DIAG_RECV_RAM_HWWMASK,
    ._hwrmsk.val = AR_PI_DBG_DIAG_RECV_RAM_HWRMASK,
    ._nqw = 1,
    ._size = 8,
    ._incr = 8,
    ._depth = 768,
      ._type_bitmsk = 0x0000000000000009ull,
    ._info = __ar_pi_dbg_diag_recv_ram_detail
};

/*
 *  INSTALL AR PI_IP MMRS
 */
static const cmmr_br_t* __ar_pi_ip_mmrs[] = {
    &__ar_pi_cfg_den_ip,
    &__ar_pi_sts_den_ip,
    &__ar_pi_err_flg_ip,
    &__ar_pi_err_clr_ip,
    &__ar_pi_err_hss_msk_ip,
    &__ar_pi_err_os_msk_ip,
    &__ar_pi_err_first_flg_ip,
    &__ar_pi_phy_status_den_ip,
    &__ar_pi_phy_equal_den_ip,
    &__ar_pi_phy_equal_coeff_0,
    &__ar_pi_phy_equal_coeff_1,
    &__ar_pi_phy_equal_coeff_2,
    &__ar_pi_phy_equal_coeff_3,
    &__ar_pi_phy_equal_coeff_4,
    &__ar_pi_phy_equal_coeff_5,
    &__ar_pi_phy_equal_coeff_6,
    &__ar_pi_phy_equal_coeff_7,
    &__ar_pi_phy_equal_coeff_8,
    &__ar_pi_phy_equal_coeff_9,
    &__ar_pi_phy_equal_coeff_10,
    &__ar_pi_pmi_pclk_cfg,
    &__ar_pi_pmi_dbg_errinj_preq,
    &__ar_pi_pmi_dbg_errinj_prsp_hal,
    &__ar_pi_pmi_fifo2_err_flg,
    &__ar_pi_pmi_fifo2_err_clr,
    &__ar_pi_pmi_fifo2_err_hss_msk,
    &__ar_pi_pmi_fifo2_err_os_msk,
    &__ar_pi_pmi_fifo2_err_first_flg,
    &__ar_pi_pmi_mbe_err_info2,
    &__ar_pi_pmi_sbe_err_info2,
    &__ar_pi_pmi_preq_ptc0_stall_duration,
    &__ar_pi_pmi_preq_ptc1_stall_duration,
    &__ar_pi_pmi_preq_ptc2_stall_duration,
    &__ar_pi_pmi_preq_hal_stall_duration,
    &__ar_pi_pmi_prsp_hal_stall_duration,
    &__ar_pi_pii_pclk_cfg,
    &__ar_pi_pii_pclk_dbg_errinj_fifo,
    &__ar_pi_pii_pclk_err_flg,
    &__ar_pi_pii_pclk_err_clr,
    &__ar_pi_pii_pclk_err_hss_msk,
    &__ar_pi_pii_pclk_err_os_msk,
    &__ar_pi_pii_pclk_err_first_flg,
    &__ar_pi_pii_pclk_err_info_mbe,
    &__ar_pi_pii_pclk_err_info_sbe,
    &__ar_pi_pii_pclk_err_info_msg_addr,
    &__ar_pi_pii_pclk_err_info_msg_data,
    &__ar_pi_pii_pclk_msg_stall_duration,
    &__ar_pi_pti_pclk_cfg,
    &__ar_pi_pti_pclk_dbg_errinj_fifo,
    &__ar_pi_pti_pclk_dbg_errinj_hal,
    &__ar_pi_pti_pclk_err_flg,
    &__ar_pi_pti_pclk_err_clr,
    &__ar_pi_pti_pclk_err_hss_msk,
    &__ar_pi_pti_pclk_err_os_msk,
    &__ar_pi_pti_pclk_err_first_flg,
    &__ar_pi_pti_pclk_err_info_ecc,
    &__ar_pi_pti_pclk_err_info_misc,
    &__ar_pi_pm_pclk_dbg_errinj_cntr_perr,
    &__ar_pi_pm_pclk_err_info_cntr_perr,
    &__ar_pi_pm_pclk_err_info_cntr_perr_cnt,
    &__ar_pi_pm_pclk_event_cntr_ctrl,
    &__ar_pi_pm_pclk_event_cntr,
    &__ar_pi_cfg_diag_trans,
    &__ar_pi_sts_diag_trans,
    &__ar_pi_dbg_trans_ctl_0,
    &__ar_pi_dbg_trans_ctl_1,
    &__ar_pi_dbg_trans_ctl_2,
    &__ar_pi_dbg_trans_ctl_3,
    &__ar_pi_dbg_trans_ctl_4,
    &__ar_pi_dbg_trans_mask_0,
    &__ar_pi_dbg_trans_mask_1,
    &__ar_pi_dbg_trans_mask_2,
    &__ar_pi_dbg_trans_mask_3,
    &__ar_pi_dbg_trans_mask_4,
    &__ar_pi_cfg_diag_recv,
    &__ar_pi_sts_diag_recv,
    &__ar_pi_dbg_recv_ctl_0,
    &__ar_pi_dbg_recv_ctl_1,
    &__ar_pi_dbg_recv_ctl_2,
    &__ar_pi_dbg_recv_ctl_3,
    &__ar_pi_dbg_recv_ctl_4,
    &__ar_pi_dbg_recv_mask_0,
    &__ar_pi_dbg_recv_mask_1,
    &__ar_pi_dbg_recv_mask_2,
    &__ar_pi_dbg_recv_mask_3,
    &__ar_pi_dbg_recv_mask_4,
    &__ar_pi_debug_den_ip,
    &__ar_pi_cfg_diag_inj,
    &__ar_pi_sts_diag_inj,
    &__ar_pi_pcic_mems_dbg_errinj,
    &__ar_pi_phy_csrs,
    &__ar_pi_phy_csr_cmu_0,
    &__ar_pi_phy_csr_lane1_0,
    &__ar_pi_phy_csr_comlane_0,
    &__ar_pi_databahn_csrs,
    &__ar_pi_db_f0_db_rev_id_class_code,
    &__ar_pi_db_f0_bar_0_1,
    &__ar_pi_db_msi_x_cntl_2c_0,
    &__ar_pi_db_msi_x_pendi_2e_0,
    &__ar_pi_db_pcie_cntl_sts_0,
    &__ar_pi_db_pcie_cntl_sts_2_0,
    &__ar_pi_db_pcie_tph_req_cntl_0,
    &__ar_pi_db_f1_db_rev_id_class_code,
    &__ar_pi_db_f1_bar_0_1,
    &__ar_pi_db_msi_x_cntl_2c_1,
    &__ar_pi_db_msi_x_pendi_2e_1,
    &__ar_pi_db_pcie_cntl_sts_1,
    &__ar_pi_db_pcie_cntl_sts_2_1,
    &__ar_pi_db_pcie_tph_req_cntl_1,
    &__ar_pi_db_f2_db_rev_id_class_code,
    &__ar_pi_db_f2_bar_0_1,
    &__ar_pi_db_msi_x_cntl_2c_2,
    &__ar_pi_db_msi_x_pendi_2e_2,
    &__ar_pi_db_pcie_cntl_sts_2,
    &__ar_pi_db_pcie_cntl_sts_2_2,
    &__ar_pi_db_pcie_tph_req_cntl_2,
    &__ar_pi_db_f3_db_rev_id_class_code,
    &__ar_pi_db_f3_bar_0_1,
    &__ar_pi_db_msi_x_cntl_2c_3,
    &__ar_pi_db_msi_x_pendi_2e_3,
    &__ar_pi_db_pcie_cntl_sts_3,
    &__ar_pi_db_pcie_cntl_sts_2_3,
    &__ar_pi_db_pcie_tph_req_cntl_3,
    &__ar_pi_db_phy_layer_cfg,
    &__ar_pi_db_recv_credit_0,
    &__ar_pi_db_recv_credit_1,
    &__ar_pi_db_recv_fts_count,
    &__ar_pi_db_physical_cfg_reg,
    &__ar_pi_dbg_diag_inj_ram,
    &__ar_pi_dbg_diag_trans_ram,
    &__ar_pi_dbg_diag_recv_ram,
    NULL
};

/*
 *  INSTALL AR PI_IP LM MUX SELECT ENCODINGS
 */
static const cmmr_br_t* __ar_pi_ip_enc_mmrs[] = {
    NULL
};

#endif
